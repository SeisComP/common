# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _system
else:
    import _system

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _system.delete_SwigPyIterator

    def value(self):
        return _system.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _system.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _system.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _system.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _system.SwigPyIterator_equal(self, x)

    def copy(self):
        return _system.SwigPyIterator_copy(self)

    def next(self):
        return _system.SwigPyIterator_next(self)

    def __next__(self):
        return _system.SwigPyIterator___next__(self)

    def previous(self):
        return _system.SwigPyIterator_previous(self)

    def advance(self, n):
        return _system.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _system.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _system.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _system.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _system.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _system.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _system.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _system:
_system.SwigPyIterator_swigregister(SwigPyIterator)
import seiscomp.core
import seiscomp.logging
import seiscomp.config
class CommandLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _system.CommandLine_swiginit(self, _system.new_CommandLine())

    def addGroup(self, arg2):
        return _system.CommandLine_addGroup(self, arg2)

    def addOption(self, group, option, description):
        return _system.CommandLine_addOption(self, group, option, description)

    def parse(self, *args):
        return _system.CommandLine_parse(self, *args)

    def printOptions(self):
        return _system.CommandLine_printOptions(self)

    def hasOption(self, option):
        return _system.CommandLine_hasOption(self, option)

    def unrecognizedOptions(self):
        return _system.CommandLine_unrecognizedOptions(self)

    def optionInt(self, option):
        return _system.CommandLine_optionInt(self, option)

    def optionBool(self, option):
        return _system.CommandLine_optionBool(self, option)

    def optionDouble(self, option):
        return _system.CommandLine_optionDouble(self, option)

    def optionString(self, option):
        return _system.CommandLine_optionString(self, option)

    def addIntOption(self, *args):
        return _system.CommandLine_addIntOption(self, *args)

    def addDoubleOption(self, *args):
        return _system.CommandLine_addDoubleOption(self, *args)

    def addBoolOption(self, *args):
        return _system.CommandLine_addBoolOption(self, *args)

    def addStringOption(self, *args):
        return _system.CommandLine_addStringOption(self, *args)
    __swig_destroy__ = _system.delete_CommandLine

# Register CommandLine in _system:
_system.CommandLine_swigregister(CommandLine)
class Environment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CS_UNDEFINED = _system.Environment_CS_UNDEFINED
    CS_FIRST = _system.Environment_CS_FIRST
    CS_DEFAULT_GLOBAL = _system.Environment_CS_DEFAULT_GLOBAL
    CS_DEFAULT_APP = _system.Environment_CS_DEFAULT_APP
    CS_CONFIG_GLOBAL = _system.Environment_CS_CONFIG_GLOBAL
    CS_CONFIG_APP = _system.Environment_CS_CONFIG_APP
    CS_USER_GLOBAL = _system.Environment_CS_USER_GLOBAL
    CS_USER_APP = _system.Environment_CS_USER_APP
    CS_LAST = _system.Environment_CS_LAST
    CS_QUANTITY = _system.Environment_CS_QUANTITY
    __swig_destroy__ = _system.delete_Environment

    @staticmethod
    def Instance():
        return _system.Environment_Instance()

    def homeDir(self):
        return _system.Environment_homeDir(self)

    def configDir(self):
        return _system.Environment_configDir(self)

    def appConfigDir(self):
        return _system.Environment_appConfigDir(self)

    def globalConfigDir(self):
        return _system.Environment_globalConfigDir(self)

    def installDir(self):
        return _system.Environment_installDir(self)

    def shareDir(self):
        return _system.Environment_shareDir(self)

    def logDir(self):
        return _system.Environment_logDir(self)

    def configFileName(self, programname):
        return _system.Environment_configFileName(self, programname)

    def appConfigFileName(self, programname):
        return _system.Environment_appConfigFileName(self, programname)

    def globalConfigFileName(self, programname):
        return _system.Environment_globalConfigFileName(self, programname)

    def logFile(self, name):
        return _system.Environment_logFile(self, name)

    def absolutePath(self, name):
        return _system.Environment_absolutePath(self, name)

    def resolvePath(self, name):
        return _system.Environment_resolvePath(self, name)

    def configFileLocation(self, name, stage):
        return _system.Environment_configFileLocation(self, name, stage)

    def initConfig(self, *args):
        return _system.Environment_initConfig(self, *args)

# Register Environment in _system:
_system.Environment_swigregister(Environment)
class PluginRegistry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _system.delete_PluginRegistry

    @staticmethod
    def Instance():
        return _system.PluginRegistry_Instance()

    @staticmethod
    def Reset():
        return _system.PluginRegistry_Reset()

    def addPluginName(self, name):
        return _system.PluginRegistry_addPluginName(self, name)

    def addPluginPath(self, path):
        return _system.PluginRegistry_addPluginPath(self, path)

    def addPackagePath(self, package):
        return _system.PluginRegistry_addPackagePath(self, package)

    def loadPlugins(self):
        return _system.PluginRegistry_loadPlugins(self)

    def loadConfiguredPlugins(self, config):
        return _system.PluginRegistry_loadConfiguredPlugins(self, config)

    def freePlugins(self):
        return _system.PluginRegistry_freePlugins(self)

    def pluginCount(self):
        return _system.PluginRegistry_pluginCount(self)

# Register PluginRegistry in _system:
_system.PluginRegistry_swigregister(PluginRegistry)

def join(prefix, relativeName):
    return _system.join(prefix, relativeName)
class SystemApplication(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    COMMANDLINE = _system.SystemApplication_COMMANDLINE
    CONFIGURATION = _system.SystemApplication_CONFIGURATION
    LOGGING = _system.SystemApplication_LOGGING
    PLUGINS = _system.SystemApplication_PLUGINS
    ST_QUANTITY = _system.SystemApplication_ST_QUANTITY

    def __init__(self, argc, argv):
        if self.__class__ == SystemApplication:
            _self = None
        else:
            _self = self
        _system.SystemApplication_swiginit(self, _system.new_SystemApplication(_self, argc, argv))
    __swig_destroy__ = _system.delete_SystemApplication

    def __call__(self):
        return _system.SystemApplication___call__(self)

    def arguments(self):
        return _system.SystemApplication_arguments(self)

    def commandline(self, *args):
        return _system.SystemApplication_commandline(self, *args)

    def configuration(self):
        return _system.SystemApplication_configuration(self)

    def path(self):
        return _system.SystemApplication_path(self)

    def name(self):
        return _system.SystemApplication_name(self)

    def addPluginPackagePath(self, package):
        return _system.SystemApplication_addPluginPackagePath(self, package)

    def frameworkVersion(self):
        return _system.SystemApplication_frameworkVersion(self)

    def execute(self):
        return _system.SystemApplication_execute(self)

    def exit(self, returnCode):
        return _system.SystemApplication_exit(self, returnCode)

    def quit(self):
        return _system.SystemApplication_quit(self)

    def isExitRequested(self):
        return _system.SystemApplication_isExitRequested(self)

    def printUsage(self):
        return _system.SystemApplication_printUsage(self)

    def crashHandler(self):
        return _system.SystemApplication_crashHandler(self)

    def setDaemonEnabled(self, enable):
        return _system.SystemApplication_setDaemonEnabled(self, enable)

    def setLoggingContext(self, arg2):
        return _system.SystemApplication_setLoggingContext(self, arg2)

    def setLoggingComponent(self, arg2):
        return _system.SystemApplication_setLoggingComponent(self, arg2)

    def setLoggingToStdErr(self, arg2):
        return _system.SystemApplication_setLoggingToStdErr(self, arg2)

    def addLoggingComponentSubscription(self, arg2):
        return _system.SystemApplication_addLoggingComponentSubscription(self, arg2)

    def closeLogging(self):
        return _system.SystemApplication_closeLogging(self)

    def version(self):
        return _system.SystemApplication_version(self)

    @staticmethod
    def Instance():
        return _system.SystemApplication_Instance()

    @staticmethod
    def HandleSignals(termination, crash):
        return _system.SystemApplication_HandleSignals(termination, crash)

    def createBaseCommandLineDescription(self):
        return _system.SystemApplication_createBaseCommandLineDescription(self)

    def createCommandLineDescription(self):
        return _system.SystemApplication_createCommandLineDescription(self)

    def handleCommandLineOptions(self):
        return _system.SystemApplication_handleCommandLineOptions(self)

    def handlePreFork(self):
        return _system.SystemApplication_handlePreFork(self)

    def validateParameters(self):
        return _system.SystemApplication_validateParameters(self)

    def init(self):
        return _system.SystemApplication_init(self)

    def run(self):
        return _system.SystemApplication_run(self)

    def done(self):
        return _system.SystemApplication_done(self)

    def forkProcess(self):
        return _system.SystemApplication_forkProcess(self)

    def initConfiguration(self):
        return _system.SystemApplication_initConfiguration(self)

    def initPlugins(self):
        return _system.SystemApplication_initPlugins(self)

    def printVersion(self):
        return _system.SystemApplication_printVersion(self)

    def printConfigVariables(self):
        return _system.SystemApplication_printConfigVariables(self)

    def schemaValidationNames(self, modules, plugins):
        return _system.SystemApplication_schemaValidationNames(self, modules, plugins)

    def validateSchemaParameters(self):
        return _system.SystemApplication_validateSchemaParameters(self)

    def handleInitializationError(self, stage):
        return _system.SystemApplication_handleInitializationError(self, stage)

    def showMessage(self, arg0):
        return _system.SystemApplication_showMessage(self, arg0)

    def showWarning(self, arg0):
        return _system.SystemApplication_showWarning(self, arg0)

    def configGetBool(self, query):
        return _system.SystemApplication_configGetBool(self, query)

    def configGetInt(self, query):
        return _system.SystemApplication_configGetInt(self, query)

    def configGetDouble(self, query):
        return _system.SystemApplication_configGetDouble(self, query)

    def configGetString(self, query):
        return _system.SystemApplication_configGetString(self, query)

    def configGetPath(self, query):
        return _system.SystemApplication_configGetPath(self, query)

    def configGetBools(self, query):
        return _system.SystemApplication_configGetBools(self, query)

    def configGetInts(self, query):
        return _system.SystemApplication_configGetInts(self, query)

    def configGetDoubles(self, query):
        return _system.SystemApplication_configGetDoubles(self, query)

    def configGetStrings(self, query):
        return _system.SystemApplication_configGetStrings(self, query)

    def configSetBool(self, query, v):
        return _system.SystemApplication_configSetBool(self, query, v)

    def configSetInt(self, query, v):
        return _system.SystemApplication_configSetInt(self, query, v)

    def configSetDouble(self, query, v):
        return _system.SystemApplication_configSetDouble(self, query, v)

    def configSetString(self, query, v):
        return _system.SystemApplication_configSetString(self, query, v)

    def configSetBools(self, query, arg3):
        return _system.SystemApplication_configSetBools(self, query, arg3)

    def configSetInts(self, query, arg3):
        return _system.SystemApplication_configSetInts(self, query, arg3)

    def configSetDoubles(self, query, arg3):
        return _system.SystemApplication_configSetDoubles(self, query, arg3)

    def configSetStrings(self, query, arg3):
        return _system.SystemApplication_configSetStrings(self, query, arg3)

    def configUnset(self, query):
        return _system.SystemApplication_configUnset(self, query)

    def saveConfiguration(self):
        return _system.SystemApplication_saveConfiguration(self)

    def bindSettings(self, settings):
        return _system.SystemApplication_bindSettings(self, settings)
    def __disown__(self):
        self.this.disown()
        _system.disown_SystemApplication(self)
        return weakref.proxy(self)

# Register SystemApplication in _system:
_system.SystemApplication_swigregister(SystemApplication)
class HostInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _system.HostInfo_swiginit(self, _system.new_HostInfo())
    __swig_destroy__ = _system.delete_HostInfo

    def pid(self):
        return _system.HostInfo_pid(self)

    def name(self):
        return _system.HostInfo_name(self)

    def login(self):
        return _system.HostInfo_login(self)

    def programName(self):
        return _system.HostInfo_programName(self)

    def totalMemory(self):
        return _system.HostInfo_totalMemory(self)

    def getCurrentMemoryUsage(self):
        return _system.HostInfo_getCurrentMemoryUsage(self)

    def getCurrentCpuUsage(self, forceReset=False):
        return _system.HostInfo_getCurrentCpuUsage(self, forceReset)

# Register HostInfo in _system:
_system.HostInfo_swigregister(HostInfo)
class SchemaParameter(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaParameter_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaParameter_TypeInfo()

    def className(self):
        return _system.SchemaParameter_className(self)

    def typeInfo(self):
        return _system.SchemaParameter_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaParameter_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaParameter_ConstCast(*args)

    def __init__(self):
        _system.SchemaParameter_swiginit(self, _system.new_SchemaParameter())

    def serialize(self, ar):
        return _system.SchemaParameter_serialize(self, ar)
    name = property(_system.SchemaParameter_name_get, _system.SchemaParameter_name_set)
    type = property(_system.SchemaParameter_type_get, _system.SchemaParameter_type_set)
    unit = property(_system.SchemaParameter_unit_get, _system.SchemaParameter_unit_set)
    range = property(_system.SchemaParameter_range_get, _system.SchemaParameter_range_set)
    values = property(_system.SchemaParameter_values_get, _system.SchemaParameter_values_set)
    options = property(_system.SchemaParameter_options_get, _system.SchemaParameter_options_set)
    defaultValue = property(_system.SchemaParameter_defaultValue_get, _system.SchemaParameter_defaultValue_set)
    description = property(_system.SchemaParameter_description_get, _system.SchemaParameter_description_set)
    readOnly = property(_system.SchemaParameter_readOnly_get, _system.SchemaParameter_readOnly_set)
    __swig_destroy__ = _system.delete_SchemaParameter

# Register SchemaParameter in _system:
_system.SchemaParameter_swigregister(SchemaParameter)
class SchemaParameters(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaParameters_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaParameters_TypeInfo()

    def className(self):
        return _system.SchemaParameters_className(self)

    def typeInfo(self):
        return _system.SchemaParameters_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaParameters_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaParameters_ConstCast(*args)

    def __init__(self):
        _system.SchemaParameters_swiginit(self, _system.new_SchemaParameters())

    def parameterCount(self):
        return _system.SchemaParameters_parameterCount(self)

    def parameter(self, i):
        return _system.SchemaParameters_parameter(self, i)

    def groupCount(self):
        return _system.SchemaParameters_groupCount(self)

    def group(self, i):
        return _system.SchemaParameters_group(self, i)

    def structureCount(self):
        return _system.SchemaParameters_structureCount(self)

    def structure(self, i):
        return _system.SchemaParameters_structure(self, i)

    def add(self, *args):
        return _system.SchemaParameters_add(self, *args)

    def isEmpty(self):
        return _system.SchemaParameters_isEmpty(self)

    def accept(self, arg2):
        return _system.SchemaParameters_accept(self, arg2)

    def serialize(self, ar):
        return _system.SchemaParameters_serialize(self, ar)
    structExtents = property(_system.SchemaParameters_structExtents_get, _system.SchemaParameters_structExtents_set)
    __swig_destroy__ = _system.delete_SchemaParameters

# Register SchemaParameters in _system:
_system.SchemaParameters_swigregister(SchemaParameters)
class SchemaStructExtent(SchemaParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaStructExtent_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaStructExtent_TypeInfo()

    def className(self):
        return _system.SchemaStructExtent_className(self)

    def typeInfo(self):
        return _system.SchemaStructExtent_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaStructExtent_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaStructExtent_ConstCast(*args)

    def serialize(self, ar):
        return _system.SchemaStructExtent_serialize(self, ar)
    type = property(_system.SchemaStructExtent_type_get, _system.SchemaStructExtent_type_set)
    matchName = property(_system.SchemaStructExtent_matchName_get, _system.SchemaStructExtent_matchName_set)

    def __init__(self):
        _system.SchemaStructExtent_swiginit(self, _system.new_SchemaStructExtent())
    __swig_destroy__ = _system.delete_SchemaStructExtent

# Register SchemaStructExtent in _system:
_system.SchemaStructExtent_swigregister(SchemaStructExtent)
class SchemaGroup(SchemaParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaGroup_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaGroup_TypeInfo()

    def className(self):
        return _system.SchemaGroup_className(self)

    def typeInfo(self):
        return _system.SchemaGroup_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaGroup_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaGroup_ConstCast(*args)

    def __init__(self):
        _system.SchemaGroup_swiginit(self, _system.new_SchemaGroup())

    def serialize(self, ar):
        return _system.SchemaGroup_serialize(self, ar)
    name = property(_system.SchemaGroup_name_get, _system.SchemaGroup_name_set)
    description = property(_system.SchemaGroup_description_get, _system.SchemaGroup_description_set)
    __swig_destroy__ = _system.delete_SchemaGroup

# Register SchemaGroup in _system:
_system.SchemaGroup_swigregister(SchemaGroup)
class SchemaStructure(SchemaParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaStructure_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaStructure_TypeInfo()

    def className(self):
        return _system.SchemaStructure_className(self)

    def typeInfo(self):
        return _system.SchemaStructure_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaStructure_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaStructure_ConstCast(*args)

    def __init__(self):
        _system.SchemaStructure_swiginit(self, _system.new_SchemaStructure())

    def serialize(self, ar):
        return _system.SchemaStructure_serialize(self, ar)
    type = property(_system.SchemaStructure_type_get, _system.SchemaStructure_type_set)
    title = property(_system.SchemaStructure_title_get, _system.SchemaStructure_title_set)
    link = property(_system.SchemaStructure_link_get, _system.SchemaStructure_link_set)
    description = property(_system.SchemaStructure_description_get, _system.SchemaStructure_description_set)
    __swig_destroy__ = _system.delete_SchemaStructure

# Register SchemaStructure in _system:
_system.SchemaStructure_swigregister(SchemaStructure)
class SchemaSetupInputOption(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaSetupInputOption_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaSetupInputOption_TypeInfo()

    def className(self):
        return _system.SchemaSetupInputOption_className(self)

    def typeInfo(self):
        return _system.SchemaSetupInputOption_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaSetupInputOption_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaSetupInputOption_ConstCast(*args)

    def __init__(self):
        _system.SchemaSetupInputOption_swiginit(self, _system.new_SchemaSetupInputOption())

    def serialize(self, ar):
        return _system.SchemaSetupInputOption_serialize(self, ar)
    value = property(_system.SchemaSetupInputOption_value_get, _system.SchemaSetupInputOption_value_set)
    description = property(_system.SchemaSetupInputOption_description_get, _system.SchemaSetupInputOption_description_set)
    inputs = property(_system.SchemaSetupInputOption_inputs_get, _system.SchemaSetupInputOption_inputs_set)
    __swig_destroy__ = _system.delete_SchemaSetupInputOption

# Register SchemaSetupInputOption in _system:
_system.SchemaSetupInputOption_swigregister(SchemaSetupInputOption)
class SchemaSetupInput(SchemaParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaSetupInput_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaSetupInput_TypeInfo()

    def className(self):
        return _system.SchemaSetupInput_className(self)

    def typeInfo(self):
        return _system.SchemaSetupInput_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaSetupInput_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaSetupInput_ConstCast(*args)

    def __init__(self):
        _system.SchemaSetupInput_swiginit(self, _system.new_SchemaSetupInput())

    def serialize(self, ar):
        return _system.SchemaSetupInput_serialize(self, ar)
    text = property(_system.SchemaSetupInput_text_get, _system.SchemaSetupInput_text_set)
    echo = property(_system.SchemaSetupInput_echo_get, _system.SchemaSetupInput_echo_set)
    options = property(_system.SchemaSetupInput_options_get, _system.SchemaSetupInput_options_set)
    __swig_destroy__ = _system.delete_SchemaSetupInput

# Register SchemaSetupInput in _system:
_system.SchemaSetupInput_swigregister(SchemaSetupInput)
class SchemaSetupGroup(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaSetupGroup_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaSetupGroup_TypeInfo()

    def className(self):
        return _system.SchemaSetupGroup_className(self)

    def typeInfo(self):
        return _system.SchemaSetupGroup_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaSetupGroup_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaSetupGroup_ConstCast(*args)

    def __init__(self):
        _system.SchemaSetupGroup_swiginit(self, _system.new_SchemaSetupGroup())

    def serialize(self, ar):
        return _system.SchemaSetupGroup_serialize(self, ar)
    name = property(_system.SchemaSetupGroup_name_get, _system.SchemaSetupGroup_name_set)
    inputs = property(_system.SchemaSetupGroup_inputs_get, _system.SchemaSetupGroup_inputs_set)
    __swig_destroy__ = _system.delete_SchemaSetupGroup

# Register SchemaSetupGroup in _system:
_system.SchemaSetupGroup_swigregister(SchemaSetupGroup)
class SchemaSetup(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaSetup_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaSetup_TypeInfo()

    def className(self):
        return _system.SchemaSetup_className(self)

    def typeInfo(self):
        return _system.SchemaSetup_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaSetup_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaSetup_ConstCast(*args)

    def __init__(self):
        _system.SchemaSetup_swiginit(self, _system.new_SchemaSetup())

    def serialize(self, ar):
        return _system.SchemaSetup_serialize(self, ar)
    groups = property(_system.SchemaSetup_groups_get, _system.SchemaSetup_groups_set)
    __swig_destroy__ = _system.delete_SchemaSetup

# Register SchemaSetup in _system:
_system.SchemaSetup_swigregister(SchemaSetup)
class SchemaModule(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaModule_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaModule_TypeInfo()

    def className(self):
        return _system.SchemaModule_className(self)

    def typeInfo(self):
        return _system.SchemaModule_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaModule_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaModule_ConstCast(*args)

    def __init__(self):
        _system.SchemaModule_swiginit(self, _system.new_SchemaModule())

    def isStandalone(self):
        return _system.SchemaModule_isStandalone(self)

    def accept(self, arg2):
        return _system.SchemaModule_accept(self, arg2)

    def serialize(self, ar):
        return _system.SchemaModule_serialize(self, ar)
    aliasedModule = property(_system.SchemaModule_aliasedModule_get, _system.SchemaModule_aliasedModule_set)
    name = property(_system.SchemaModule_name_get, _system.SchemaModule_name_set)
    category = property(_system.SchemaModule_category_get, _system.SchemaModule_category_set)
    _import = property(_system.SchemaModule__import_get, _system.SchemaModule__import_set)
    description = property(_system.SchemaModule_description_get, _system.SchemaModule_description_set)
    standalone = property(_system.SchemaModule_standalone_get, _system.SchemaModule_standalone_set)
    inheritGlobalBinding = property(_system.SchemaModule_inheritGlobalBinding_get, _system.SchemaModule_inheritGlobalBinding_set)
    parameters = property(_system.SchemaModule_parameters_get, _system.SchemaModule_parameters_set)
    setup = property(_system.SchemaModule_setup_get, _system.SchemaModule_setup_set)
    __swig_destroy__ = _system.delete_SchemaModule

# Register SchemaModule in _system:
_system.SchemaModule_swigregister(SchemaModule)
class SchemaPlugin(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaPlugin_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaPlugin_TypeInfo()

    def className(self):
        return _system.SchemaPlugin_className(self)

    def typeInfo(self):
        return _system.SchemaPlugin_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaPlugin_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaPlugin_ConstCast(*args)

    def __init__(self):
        _system.SchemaPlugin_swiginit(self, _system.new_SchemaPlugin())

    def serialize(self, ar):
        return _system.SchemaPlugin_serialize(self, ar)
    name = property(_system.SchemaPlugin_name_get, _system.SchemaPlugin_name_set)
    extends = property(_system.SchemaPlugin_extends_get, _system.SchemaPlugin_extends_set)
    description = property(_system.SchemaPlugin_description_get, _system.SchemaPlugin_description_set)
    parameters = property(_system.SchemaPlugin_parameters_get, _system.SchemaPlugin_parameters_set)
    setup = property(_system.SchemaPlugin_setup_get, _system.SchemaPlugin_setup_set)
    __swig_destroy__ = _system.delete_SchemaPlugin

# Register SchemaPlugin in _system:
_system.SchemaPlugin_swigregister(SchemaPlugin)
class SchemaBinding(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.SchemaBinding_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.SchemaBinding_TypeInfo()

    def className(self):
        return _system.SchemaBinding_className(self)

    def typeInfo(self):
        return _system.SchemaBinding_typeInfo(self)

    @staticmethod
    def Cast(*args):
        return _system.SchemaBinding_Cast(*args)

    @staticmethod
    def ConstCast(*args):
        return _system.SchemaBinding_ConstCast(*args)

    def __init__(self):
        _system.SchemaBinding_swiginit(self, _system.new_SchemaBinding())

    def serialize(self, ar):
        return _system.SchemaBinding_serialize(self, ar)
    name = property(_system.SchemaBinding_name_get, _system.SchemaBinding_name_set)
    module = property(_system.SchemaBinding_module_get, _system.SchemaBinding_module_set)
    category = property(_system.SchemaBinding_category_get, _system.SchemaBinding_category_set)
    description = property(_system.SchemaBinding_description_get, _system.SchemaBinding_description_set)
    parameters = property(_system.SchemaBinding_parameters_get, _system.SchemaBinding_parameters_set)
    __swig_destroy__ = _system.delete_SchemaBinding

# Register SchemaBinding in _system:
_system.SchemaBinding_swigregister(SchemaBinding)
class SchemaDefinitions(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _system.SchemaDefinitions_swiginit(self, _system.new_SchemaDefinitions())

    def createAlias(self, existingModule, newModule):
        return _system.SchemaDefinitions_createAlias(self, existingModule, newModule)

    def removeAlias(self, existingModule):
        return _system.SchemaDefinitions_removeAlias(self, existingModule)

    def moduleCount(self):
        return _system.SchemaDefinitions_moduleCount(self)

    def module(self, *args):
        return _system.SchemaDefinitions_module(self, *args)

    def pluginCount(self):
        return _system.SchemaDefinitions_pluginCount(self)

    def plugin(self, *args):
        return _system.SchemaDefinitions_plugin(self, *args)

    def bindingCount(self):
        return _system.SchemaDefinitions_bindingCount(self)

    def binding(self, *args):
        return _system.SchemaDefinitions_binding(self, *args)

    def add(self, *args):
        return _system.SchemaDefinitions_add(self, *args)

    def pluginsForModule(self, *args):
        return _system.SchemaDefinitions_pluginsForModule(self, *args)

    def bindingsForModule(self, *args):
        return _system.SchemaDefinitions_bindingsForModule(self, *args)

    def serialize(self, ar):
        return _system.SchemaDefinitions_serialize(self, ar)

    def load(self, path):
        return _system.SchemaDefinitions_load(self, path)

    def reload(self):
        return _system.SchemaDefinitions_reload(self)
    __swig_destroy__ = _system.delete_SchemaDefinitions

# Register SchemaDefinitions in _system:
_system.SchemaDefinitions_swigregister(SchemaDefinitions)
class SchemaVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register SchemaVisitor in _system:
_system.SchemaVisitor_swigregister(SchemaVisitor)
class ConfigDelegate(seiscomp.config.Logger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Added = _system.ConfigDelegate_Added
    Removed = _system.ConfigDelegate_Removed
    Updated = _system.ConfigDelegate_Updated

    def aboutToRead(self, filename):
        return _system.ConfigDelegate_aboutToRead(self, filename)

    def finishedReading(self, filename):
        return _system.ConfigDelegate_finishedReading(self, filename)

    def handleReadError(self, filename):
        return _system.ConfigDelegate_handleReadError(self, filename)

    def aboutToWrite(self, filename):
        return _system.ConfigDelegate_aboutToWrite(self, filename)

    def finishedWriting(self, filename, changes):
        return _system.ConfigDelegate_finishedWriting(self, filename, changes)

    def hasWriteError(self, filename):
        return _system.ConfigDelegate_hasWriteError(self, filename)

    def handleWriteTimeMismatch(self, filename, changes):
        return _system.ConfigDelegate_handleWriteTimeMismatch(self, filename, changes)

    def caseSensitivityConflict(self, arg2):
        return _system.ConfigDelegate_caseSensitivityConflict(self, arg2)

    def __init__(self):
        _system.ConfigDelegate_swiginit(self, _system.new_ConfigDelegate())
    __swig_destroy__ = _system.delete_ConfigDelegate

# Register ConfigDelegate in _system:
_system.ConfigDelegate_swigregister(ConfigDelegate)
class SymbolMapItem(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _system.SymbolMapItem_swiginit(self, _system.new_SymbolMapItem(*args))
    symbol = property(_system.SymbolMapItem_symbol_get, _system.SymbolMapItem_symbol_set)
    known = property(_system.SymbolMapItem_known_get, _system.SymbolMapItem_known_set)
    __swig_destroy__ = _system.delete_SymbolMapItem

# Register SymbolMapItem in _system:
_system.SymbolMapItem_swigregister(SymbolMapItem)
class Container(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def parameter(self, i):
        return _system.Container_parameter(self, i)

    def parameterCount(self):
        return _system.Container_parameterCount(self)

    def group(self, i):
        return _system.Container_group(self, i)

    def groupCount(self):
        return _system.Container_groupCount(self)

    def add(self, *args):
        return _system.Container_add(self, *args)

    def structure(self, i):
        return _system.Container_structure(self, i)

    def structureCount(self):
        return _system.Container_structureCount(self)

    def addType(self, arg2):
        return _system.Container_addType(self, arg2)

    def hasStructure(self, *args):
        return _system.Container_hasStructure(self, *args)

    def instantiate(self, s, name):
        return _system.Container_instantiate(self, s, name)

    def remove(self, s):
        return _system.Container_remove(self, s)

    def findStructureType(self, type):
        return _system.Container_findStructureType(self, type)

    def findParameter(self, fullName):
        return _system.Container_findParameter(self, fullName)

    def findContainer(self, path):
        return _system.Container_findContainer(self, path)

    def accept(self, arg2):
        return _system.Container_accept(self, arg2)
    super = property(_system.Container_super_get, _system.Container_super_set)
    parent = property(_system.Container_parent_get, _system.Container_parent_set)
    path = property(_system.Container_path_get, _system.Container_path_set)
    groups = property(_system.Container_groups_get, _system.Container_groups_set)
    parameters = property(_system.Container_parameters_get, _system.Container_parameters_set)
    structures = property(_system.Container_structures_get, _system.Container_structures_set)
    structureTypes = property(_system.Container_structureTypes_get, _system.Container_structureTypes_set)
    __swig_destroy__ = _system.delete_Container

# Register Container in _system:
_system.Container_swigregister(Container)
class Parameter(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Parameter_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Parameter_TypeInfo()

    def className(self):
        return _system.Parameter_className(self)

    def typeInfo(self):
        return _system.Parameter_typeInfo(self)

    def __init__(self, *args):
        _system.Parameter_swiginit(self, _system.new_Parameter(*args))

    def copy(self, backImport=False):
        return _system.Parameter_copy(self, backImport)

    def clone(self):
        return _system.Parameter_clone(self)

    def dump(self, os):
        return _system.Parameter_dump(self, os)

    def inherits(self, param):
        return _system.Parameter_inherits(self, param)

    def updateFinalValue(self, *args):
        return _system.Parameter_updateFinalValue(self, *args)
    parent = property(_system.Parameter_parent_get, _system.Parameter_parent_set)
    super = property(_system.Parameter_super_get, _system.Parameter_super_set)
    definition = property(_system.Parameter_definition_get, _system.Parameter_definition_set)
    symbols = property(_system.Parameter_symbols_get, _system.Parameter_symbols_set)
    symbol = property(_system.Parameter_symbol_get, _system.Parameter_symbol_set)
    variableName = property(_system.Parameter_variableName_get, _system.Parameter_variableName_set)
    __swig_destroy__ = _system.delete_Parameter

# Register Parameter in _system:
_system.Parameter_swigregister(Parameter)
class Structure(Container):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Structure_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Structure_TypeInfo()

    def className(self):
        return _system.Structure_className(self)

    def typeInfo(self):
        return _system.Structure_typeInfo(self)

    def __init__(self, *args):
        _system.Structure_swiginit(self, _system.new_Structure(*args))

    def copy(self, backImport=False):
        return _system.Structure_copy(self, backImport)

    def clone(self):
        return _system.Structure_clone(self)

    def instantiate(self, name):
        return _system.Structure_instantiate(self, name)

    def dump(self, os):
        return _system.Structure_dump(self, os)
    definition = property(_system.Structure_definition_get, _system.Structure_definition_set)
    extensions = property(_system.Structure_extensions_get, _system.Structure_extensions_set)
    name = property(_system.Structure_name_get, _system.Structure_name_set)
    __swig_destroy__ = _system.delete_Structure

# Register Structure in _system:
_system.Structure_swigregister(Structure)
class Group(Container):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Group_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Group_TypeInfo()

    def className(self):
        return _system.Group_className(self)

    def typeInfo(self):
        return _system.Group_typeInfo(self)

    def __init__(self, *args):
        _system.Group_swiginit(self, _system.new_Group(*args))

    def copy(self, backImport=False):
        return _system.Group_copy(self, backImport)

    def clone(self):
        return _system.Group_clone(self)

    def dump(self, os):
        return _system.Group_dump(self, os)
    definition = property(_system.Group_definition_get, _system.Group_definition_set)
    __swig_destroy__ = _system.delete_Group

# Register Group in _system:
_system.Group_swigregister(Group)
class Section(Container):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Section_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Section_TypeInfo()

    def className(self):
        return _system.Section_className(self)

    def typeInfo(self):
        return _system.Section_typeInfo(self)

    def __init__(self, *args):
        _system.Section_swiginit(self, _system.new_Section(*args))

    def copy(self, backImport=False):
        return _system.Section_copy(self, backImport)

    def clone(self):
        return _system.Section_clone(self)

    def dump(self, os):
        return _system.Section_dump(self, os)
    name = property(_system.Section_name_get, _system.Section_name_set)
    description = property(_system.Section_description_get, _system.Section_description_set)
    __swig_destroy__ = _system.delete_Section

# Register Section in _system:
_system.Section_swigregister(Section)
class Binding(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Binding_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Binding_TypeInfo()

    def className(self):
        return _system.Binding_className(self)

    def typeInfo(self):
        return _system.Binding_typeInfo(self)

    def __init__(self, n):
        _system.Binding_swiginit(self, _system.new_Binding(n))

    def clone(self):
        return _system.Binding_clone(self)

    def dump(self, os):
        return _system.Binding_dump(self, os)

    def section(self, i):
        return _system.Binding_section(self, i)

    def sectionCount(self):
        return _system.Binding_sectionCount(self)

    def findContainer(self, path):
        return _system.Binding_findContainer(self, path)

    def findParameter(self, fullName):
        return _system.Binding_findParameter(self, fullName)

    def accept(self, arg2):
        return _system.Binding_accept(self, arg2)
    parent = property(_system.Binding_parent_get, _system.Binding_parent_set)
    definition = property(_system.Binding_definition_get, _system.Binding_definition_set)
    name = property(_system.Binding_name_get, _system.Binding_name_set)
    description = property(_system.Binding_description_get, _system.Binding_description_set)
    sections = property(_system.Binding_sections_get, _system.Binding_sections_set)
    __swig_destroy__ = _system.delete_Binding

# Register Binding in _system:
_system.Binding_swigregister(Binding)
class BindingCategory(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _system.BindingCategory_swiginit(self, _system.new_BindingCategory(n))

    def binding(self, name):
        return _system.BindingCategory_binding(self, name)

    def clone(self):
        return _system.BindingCategory_clone(self)

    def dump(self, os):
        return _system.BindingCategory_dump(self, os)

    def hasBinding(self, alias):
        return _system.BindingCategory_hasBinding(self, alias)

    def instantiate(self, b, alias):
        return _system.BindingCategory_instantiate(self, b, alias)

    def alias(self, b):
        return _system.BindingCategory_alias(self, b)

    def removeInstance(self, *args):
        return _system.BindingCategory_removeInstance(self, *args)

    def findContainer(self, path):
        return _system.BindingCategory_findContainer(self, path)

    def findParameter(self, fullName):
        return _system.BindingCategory_findParameter(self, fullName)

    def accept(self, arg2):
        return _system.BindingCategory_accept(self, arg2)
    parent = property(_system.BindingCategory_parent_get, _system.BindingCategory_parent_set)
    name = property(_system.BindingCategory_name_get, _system.BindingCategory_name_set)
    bindings = property(_system.BindingCategory_bindings_get, _system.BindingCategory_bindings_set)
    bindingTypes = property(_system.BindingCategory_bindingTypes_get, _system.BindingCategory_bindingTypes_set)
    __swig_destroy__ = _system.delete_BindingCategory

# Register BindingCategory in _system:
_system.BindingCategory_swigregister(BindingCategory)
class ModuleBinding(Binding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.ModuleBinding_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.ModuleBinding_TypeInfo()

    def className(self):
        return _system.ModuleBinding_className(self)

    def typeInfo(self):
        return _system.ModuleBinding_typeInfo(self)

    def __init__(self, n):
        _system.ModuleBinding_swiginit(self, _system.new_ModuleBinding(n))

    def clone(self):
        return _system.ModuleBinding_clone(self)

    def add(self, arg2):
        return _system.ModuleBinding_add(self, arg2)

    def category(self, name):
        return _system.ModuleBinding_category(self, name)

    def writeConfig(self, filename, delegate=None):
        return _system.ModuleBinding_writeConfig(self, filename, delegate)

    def dump(self, os):
        return _system.ModuleBinding_dump(self, os)

    def findContainer(self, path):
        return _system.ModuleBinding_findContainer(self, path)

    def findParameter(self, fullName):
        return _system.ModuleBinding_findParameter(self, fullName)

    def accept(self, arg2):
        return _system.ModuleBinding_accept(self, arg2)
    configFile = property(_system.ModuleBinding_configFile_get, _system.ModuleBinding_configFile_set)
    categories = property(_system.ModuleBinding_categories_get, _system.ModuleBinding_categories_set)
    __swig_destroy__ = _system.delete_ModuleBinding

# Register ModuleBinding in _system:
_system.ModuleBinding_swigregister(ModuleBinding)
class StationID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _system.StationID_swiginit(self, _system.new_StationID(*args))

    def __eq__(self, other):
        return _system.StationID___eq__(self, other)

    def __lt__(self, other):
        return _system.StationID___lt__(self, other)
    networkCode = property(_system.StationID_networkCode_get, _system.StationID_networkCode_set)
    stationCode = property(_system.StationID_stationCode_get, _system.StationID_stationCode_set)
    __swig_destroy__ = _system.delete_StationID

# Register StationID in _system:
_system.StationID_swigregister(StationID)
class Module(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Module_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Module_TypeInfo()

    def className(self):
        return _system.Module_className(self)

    def typeInfo(self):
        return _system.Module_typeInfo(self)

    def __init__(self, _def):
        _system.Module_swiginit(self, _system.new_Module(_def))

    def hasConfiguration(self):
        return _system.Module_hasConfiguration(self)

    def add(self, arg2):
        return _system.Module_add(self, arg2)

    def section(self, i):
        return _system.Module_section(self, i)

    def sectionCount(self):
        return _system.Module_sectionCount(self)

    def findParameter(self, fullName):
        return _system.Module_findParameter(self, fullName)

    def findContainer(self, path):
        return _system.Module_findContainer(self, path)

    def supportsBindings(self):
        return _system.Module_supportsBindings(self)

    def loadProfiles(self, dir, delegate=None):
        return _system.Module_loadProfiles(self, dir, delegate)

    def addProfile(self, arg2):
        return _system.Module_addProfile(self, arg2)

    def removeProfile(self, *args):
        return _system.Module_removeProfile(self, *args)

    def bind(self, *args):
        return _system.Module_bind(self, *args)

    def removeStation(self, arg2):
        return _system.Module_removeStation(self, arg2)

    def createBinding(self):
        return _system.Module_createBinding(self)

    def createProfile(self, name):
        return _system.Module_createProfile(self, name)

    def getProfile(self, profile):
        return _system.Module_getProfile(self, profile)

    def getBinding(self, arg2):
        return _system.Module_getBinding(self, arg2)

    def readBinding(self, *args):
        return _system.Module_readBinding(self, *args)

    def accept(self, arg2):
        return _system.Module_accept(self, arg2)
    model = property(_system.Module_model_get, _system.Module_model_set)
    keyDirectory = property(_system.Module_keyDirectory_get, _system.Module_keyDirectory_set)
    configFile = property(_system.Module_configFile_get, _system.Module_configFile_set)
    definition = property(_system.Module_definition_get, _system.Module_definition_set)
    bindingTemplate = property(_system.Module_bindingTemplate_get, _system.Module_bindingTemplate_set)
    sections = property(_system.Module_sections_get, _system.Module_sections_set)
    unknowns = property(_system.Module_unknowns_get, _system.Module_unknowns_set)
    bindings = property(_system.Module_bindings_get, _system.Module_bindings_set)
    profiles = property(_system.Module_profiles_get, _system.Module_profiles_set)
    __swig_destroy__ = _system.delete_Module

# Register Module in _system:
_system.Module_swigregister(Module)
class Station(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Station_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Station_TypeInfo()

    def className(self):
        return _system.Station_className(self)

    def typeInfo(self):
        return _system.Station_typeInfo(self)

    def __init__(self):
        _system.Station_swiginit(self, _system.new_Station())

    def readConfig(self, filename):
        return _system.Station_readConfig(self, filename)

    def writeConfig(self, filename, delegate=None):
        return _system.Station_writeConfig(self, filename, delegate)

    def setConfig(self, module, profile):
        return _system.Station_setConfig(self, module, profile)

    def compareTag(self, name, value):
        return _system.Station_compareTag(self, name, value)
    config = property(_system.Station_config_get, _system.Station_config_set)
    tags = property(_system.Station_tags_get, _system.Station_tags_set)
    __swig_destroy__ = _system.delete_Station

# Register Station in _system:
_system.Station_swigregister(Station)
class Model(seiscomp.core.BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ClassName():
        return _system.Model_ClassName()

    @staticmethod
    def TypeInfo():
        return _system.Model_TypeInfo()

    def className(self):
        return _system.Model_className(self)

    def typeInfo(self):
        return _system.Model_typeInfo(self)

    def __init__(self):
        _system.Model_swiginit(self, _system.new_Model())

    def create(self, _def):
        return _system.Model_create(self, _def)

    def recreate(self):
        return _system.Model_recreate(self)

    def readConfig(self, *args):
        return _system.Model_readConfig(self, *args)

    def writeConfig(self, *args):
        return _system.Model_writeConfig(self, *args)

    def module(self, name):
        return _system.Model_module(self, name)

    def systemConfigFilename(self, read, name):
        return _system.Model_systemConfigFilename(self, read, name)

    def configFileLocation(self, read, name, stage):
        return _system.Model_configFileLocation(self, read, name, stage)

    def stationConfigDir(self, *args):
        return _system.Model_stationConfigDir(self, *args)

    def update(self, mod, container):
        return _system.Model_update(self, mod, container)

    def updateBinding(self, mod, binding):
        return _system.Model_updateBinding(self, mod, binding)

    def addStation(self, arg2):
        return _system.Model_addStation(self, arg2)

    def removeStation(self, arg2):
        return _system.Model_removeStation(self, arg2)

    def removeNetwork(self, arg2):
        return _system.Model_removeNetwork(self, arg2)

    def removeStationModule(self, arg2, arg3):
        return _system.Model_removeStationModule(self, arg2, arg3)

    def accept(self, arg2):
        return _system.Model_accept(self, arg2)
    schema = property(_system.Model_schema_get, _system.Model_schema_set)
    modules = property(_system.Model_modules_get, _system.Model_modules_set)
    categories = property(_system.Model_categories_get, _system.Model_categories_set)
    stations = property(_system.Model_stations_get, _system.Model_stations_set)
    symbols = property(_system.Model_symbols_get, _system.Model_symbols_set)
    modMap = property(_system.Model_modMap_get, _system.Model_modMap_set)
    keyDirOverride = property(_system.Model_keyDirOverride_get, _system.Model_keyDirOverride_set)
    __swig_destroy__ = _system.delete_Model

# Register Model in _system:
_system.Model_swigregister(Model)
class ModelVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register ModelVisitor in _system:
_system.ModelVisitor_swigregister(ModelVisitor)
class BindingMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _system.BindingMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _system.BindingMap___nonzero__(self)

    def __bool__(self):
        return _system.BindingMap___bool__(self)

    def __len__(self):
        return _system.BindingMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _system.BindingMap___getitem__(self, key)

    def __delitem__(self, key):
        return _system.BindingMap___delitem__(self, key)

    def has_key(self, key):
        return _system.BindingMap_has_key(self, key)

    def keys(self):
        return _system.BindingMap_keys(self)

    def values(self):
        return _system.BindingMap_values(self)

    def items(self):
        return _system.BindingMap_items(self)

    def __contains__(self, key):
        return _system.BindingMap___contains__(self, key)

    def key_iterator(self):
        return _system.BindingMap_key_iterator(self)

    def value_iterator(self):
        return _system.BindingMap_value_iterator(self)

    def __setitem__(self, *args):
        return _system.BindingMap___setitem__(self, *args)

    def asdict(self):
        return _system.BindingMap_asdict(self)

    def __init__(self, *args):
        _system.BindingMap_swiginit(self, _system.new_BindingMap(*args))

    def empty(self):
        return _system.BindingMap_empty(self)

    def size(self):
        return _system.BindingMap_size(self)

    def swap(self, v):
        return _system.BindingMap_swap(self, v)

    def begin(self):
        return _system.BindingMap_begin(self)

    def end(self):
        return _system.BindingMap_end(self)

    def rbegin(self):
        return _system.BindingMap_rbegin(self)

    def rend(self):
        return _system.BindingMap_rend(self)

    def clear(self):
        return _system.BindingMap_clear(self)

    def get_allocator(self):
        return _system.BindingMap_get_allocator(self)

    def count(self, x):
        return _system.BindingMap_count(self, x)

    def erase(self, *args):
        return _system.BindingMap_erase(self, *args)

    def find(self, x):
        return _system.BindingMap_find(self, x)

    def lower_bound(self, x):
        return _system.BindingMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _system.BindingMap_upper_bound(self, x)
    __swig_destroy__ = _system.delete_BindingMap

# Register BindingMap in _system:
_system.BindingMap_swigregister(BindingMap)
class GroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _system.GroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _system.GroupVector___nonzero__(self)

    def __bool__(self):
        return _system.GroupVector___bool__(self)

    def __len__(self):
        return _system.GroupVector___len__(self)

    def __getslice__(self, i, j):
        return _system.GroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _system.GroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _system.GroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _system.GroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _system.GroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _system.GroupVector___setitem__(self, *args)

    def pop(self):
        return _system.GroupVector_pop(self)

    def append(self, x):
        return _system.GroupVector_append(self, x)

    def empty(self):
        return _system.GroupVector_empty(self)

    def size(self):
        return _system.GroupVector_size(self)

    def swap(self, v):
        return _system.GroupVector_swap(self, v)

    def begin(self):
        return _system.GroupVector_begin(self)

    def end(self):
        return _system.GroupVector_end(self)

    def rbegin(self):
        return _system.GroupVector_rbegin(self)

    def rend(self):
        return _system.GroupVector_rend(self)

    def clear(self):
        return _system.GroupVector_clear(self)

    def get_allocator(self):
        return _system.GroupVector_get_allocator(self)

    def pop_back(self):
        return _system.GroupVector_pop_back(self)

    def erase(self, *args):
        return _system.GroupVector_erase(self, *args)

    def __init__(self, *args):
        _system.GroupVector_swiginit(self, _system.new_GroupVector(*args))

    def push_back(self, x):
        return _system.GroupVector_push_back(self, x)

    def front(self):
        return _system.GroupVector_front(self)

    def back(self):
        return _system.GroupVector_back(self)

    def assign(self, n, x):
        return _system.GroupVector_assign(self, n, x)

    def resize(self, *args):
        return _system.GroupVector_resize(self, *args)

    def insert(self, *args):
        return _system.GroupVector_insert(self, *args)

    def reserve(self, n):
        return _system.GroupVector_reserve(self, n)

    def capacity(self):
        return _system.GroupVector_capacity(self)
    __swig_destroy__ = _system.delete_GroupVector

# Register GroupVector in _system:
_system.GroupVector_swigregister(GroupVector)
class ParameterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _system.ParameterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _system.ParameterVector___nonzero__(self)

    def __bool__(self):
        return _system.ParameterVector___bool__(self)

    def __len__(self):
        return _system.ParameterVector___len__(self)

    def __getslice__(self, i, j):
        return _system.ParameterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _system.ParameterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _system.ParameterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _system.ParameterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _system.ParameterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _system.ParameterVector___setitem__(self, *args)

    def pop(self):
        return _system.ParameterVector_pop(self)

    def append(self, x):
        return _system.ParameterVector_append(self, x)

    def empty(self):
        return _system.ParameterVector_empty(self)

    def size(self):
        return _system.ParameterVector_size(self)

    def swap(self, v):
        return _system.ParameterVector_swap(self, v)

    def begin(self):
        return _system.ParameterVector_begin(self)

    def end(self):
        return _system.ParameterVector_end(self)

    def rbegin(self):
        return _system.ParameterVector_rbegin(self)

    def rend(self):
        return _system.ParameterVector_rend(self)

    def clear(self):
        return _system.ParameterVector_clear(self)

    def get_allocator(self):
        return _system.ParameterVector_get_allocator(self)

    def pop_back(self):
        return _system.ParameterVector_pop_back(self)

    def erase(self, *args):
        return _system.ParameterVector_erase(self, *args)

    def __init__(self, *args):
        _system.ParameterVector_swiginit(self, _system.new_ParameterVector(*args))

    def push_back(self, x):
        return _system.ParameterVector_push_back(self, x)

    def front(self):
        return _system.ParameterVector_front(self)

    def back(self):
        return _system.ParameterVector_back(self)

    def assign(self, n, x):
        return _system.ParameterVector_assign(self, n, x)

    def resize(self, *args):
        return _system.ParameterVector_resize(self, *args)

    def insert(self, *args):
        return _system.ParameterVector_insert(self, *args)

    def reserve(self, n):
        return _system.ParameterVector_reserve(self, n)

    def capacity(self):
        return _system.ParameterVector_capacity(self)
    __swig_destroy__ = _system.delete_ParameterVector

# Register ParameterVector in _system:
_system.ParameterVector_swigregister(ParameterVector)
class StructureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _system.StructureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _system.StructureVector___nonzero__(self)

    def __bool__(self):
        return _system.StructureVector___bool__(self)

    def __len__(self):
        return _system.StructureVector___len__(self)

    def __getslice__(self, i, j):
        return _system.StructureVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _system.StructureVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _system.StructureVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _system.StructureVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _system.StructureVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _system.StructureVector___setitem__(self, *args)

    def pop(self):
        return _system.StructureVector_pop(self)

    def append(self, x):
        return _system.StructureVector_append(self, x)

    def empty(self):
        return _system.StructureVector_empty(self)

    def size(self):
        return _system.StructureVector_size(self)

    def swap(self, v):
        return _system.StructureVector_swap(self, v)

    def begin(self):
        return _system.StructureVector_begin(self)

    def end(self):
        return _system.StructureVector_end(self)

    def rbegin(self):
        return _system.StructureVector_rbegin(self)

    def rend(self):
        return _system.StructureVector_rend(self)

    def clear(self):
        return _system.StructureVector_clear(self)

    def get_allocator(self):
        return _system.StructureVector_get_allocator(self)

    def pop_back(self):
        return _system.StructureVector_pop_back(self)

    def erase(self, *args):
        return _system.StructureVector_erase(self, *args)

    def __init__(self, *args):
        _system.StructureVector_swiginit(self, _system.new_StructureVector(*args))

    def push_back(self, x):
        return _system.StructureVector_push_back(self, x)

    def front(self):
        return _system.StructureVector_front(self)

    def back(self):
        return _system.StructureVector_back(self)

    def assign(self, n, x):
        return _system.StructureVector_assign(self, n, x)

    def resize(self, *args):
        return _system.StructureVector_resize(self, *args)

    def insert(self, *args):
        return _system.StructureVector_insert(self, *args)

    def reserve(self, n):
        return _system.StructureVector_reserve(self, n)

    def capacity(self):
        return _system.StructureVector_capacity(self)
    __swig_destroy__ = _system.delete_StructureVector

# Register StructureVector in _system:
_system.StructureVector_swigregister(StructureVector)

