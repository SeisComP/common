/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#define SWIG_name    "_seismology"
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if !defined(SWIGPYTHON_BUILTIN) && PY_VERSION_HEX >= 0x03030000
# define SWIG_HEAPTYPES

/* Note: Currently this won't activate - it is in place ready for when the
 * SWIGPYTHON_BUILTIN condition above gets removed. */
# if PY_VERSION_HEX < 0x030c0000 && defined(SWIGPYTHON_BUILTIN)
#  include <structmember.h>
#  define Py_READONLY READONLY
#  define Py_T_PYSSIZET T_PYSSIZET
# endif
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
  const char *chars;
  *pbytes = PyUnicode_AsUTF8String(str);
  chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
  if (chars && psize)
    *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* Increment and Decrement wrappers - for portability when using the stable abi and for performance otherwise */
#ifdef Py_LIMITED_API
# define SWIG_Py_INCREF Py_IncRef
# define SWIG_Py_XINCREF Py_IncRef
# define SWIG_Py_DECREF Py_DecRef
# define SWIG_Py_XDECREF Py_DecRef
#else
# define SWIG_Py_INCREF Py_INCREF
# define SWIG_Py_XINCREF Py_XINCREF
# define SWIG_Py_DECREF Py_DECREF
# define SWIG_Py_XDECREF Py_XDECREF
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  case SWIG_NullReferenceError:
    type = PyExc_TypeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    SWIG_Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_DECREF(old_str);
    SWIG_Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      SWIG_Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  SWIG_Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  SWIG_Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj, int is_void) {
  if (!result) {
    result = obj;
  } else if (result == Py_None && is_void) {
    SWIG_Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        SWIG_Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    SWIG_Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    SWIG_Py_DECREF(str);
    SWIG_Py_DECREF(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        SWIG_Py_DECREF(str);
        SWIG_Py_DECREF(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  SWIG_Py_DECREF(str);
  SWIG_Py_DECREF(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /* tp_print */
#else
      (Py_ssize_t)0,                      /* tp_vectorcall_offset */
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                  /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                  /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  SWIG_Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    SWIG_Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      SWIG_Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          SWIG_Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          SWIG_Py_DECREF(data->newraw);
          SWIG_Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        SWIG_Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  SWIG_Py_XDECREF(data->klass);
  SWIG_Py_XDECREF(data->newraw);
  SWIG_Py_XDECREF(data->newargs);
  SWIG_Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  SWIG_Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        SWIG_Py_DECREF(ofmt);
      }
    }
    SWIG_Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      SWIG_Py_DECREF(repr);
      SWIG_Py_DECREF(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      SWIG_Py_DECREF(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      SWIG_Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        SWIG_Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      SWIG_Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    SWIG_Py_XDECREF(Swig_Capsule_global);
  }
  SWIG_Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  SWIG_Py_XDECREF(sobj->dict);
#endif
  PyObject_Free(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  SWIG_Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    SWIG_Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SWIG_Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        SWIG_Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      SWIG_Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_Free(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_Free((PyObject *)sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
#if PY_VERSION_HEX >= 0x030d0000
    PyWeakref_GetRef(pyobj, &pyobj);
    Py_DECREF(pyobj);
#else
    pyobj = PyWeakref_GET_OBJECT(pyobj);
#endif
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	SWIG_Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    SWIG_Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            SWIG_Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          SWIG_Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        SWIG_Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        SWIG_Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            SWIG_Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      SWIG_Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      SWIG_Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SWIG_Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    SWIG_Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  SWIG_Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  SWIG_Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  SWIG_Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      SWIG_Py_DECREF(pointer);
    }
  } else {
    SWIG_Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  SWIG_Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      SWIG_Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Py_XDECREF(bytes);
      SWIG_Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  (void) obj;
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	SWIG_Py_XDECREF(bytes);
	SWIG_Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    SWIG_Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      SWIG_Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    SWIG_Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  SWIG_Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director_py_mutex.swg
 *
 * contains python mutex for threads
 * ----------------------------------------------------------------------------- */

#if defined(SWIG_PYTHON_THREADS) && !defined(SWIG_THREADS)
#define SWIG_THREADS 1
#endif
#if defined(SWIG_THREADS) && !defined(Py_LIMITED_API)
#include "pythread.h"
#define SWIG_HAVE_MUTEX
namespace Swig {
   class Mutex
   {
       PyThread_type_lock mutex_;
   public:
       Mutex() : mutex_(PyThread_allocate_lock()) {}
       ~Mutex() { PyThread_release_lock(mutex_); }
       void lock() { PyThread_acquire_lock(mutex_, WAIT_LOCK); }
       void unlock() { PyThread_free_lock(mutex_); }
   };
}
#endif
/* -----------------------------------------------------------------------------
 * director_guard.swg
 *
 * Generic Mutex implementation for directors
 *
 * Before including this file, there are two macros to define for choosing
 * an implementation as follows:
 * - SWIG_THREADS:
 *   If defined than mutexes are used.
 *   If not defined then mutexes are not used.
 * - SWIG_HAVE_MUTEX:
 *   If there is a target language defined 'Mutex' class available, the target
 *     language will define this macro to use the class over the options below.
 *     The language 'Mutex' class needs to be Basic Lockable.
 *     It must have public 'void lock()' and 'void unlock()' methods.
 *     See: https://en.cppreference.com/w/cpp/named_req/BasicLockable
 *   If the macro is not defined, one of the following will be used in this order:
 *   - std::mutex if using C++11 or later.
 *   - CRITICAL_SECTION on Windows.
 *   - POSIX pthread mutex.
 * ----------------------------------------------------------------------------- */

#ifdef SWIG_THREADS

#if __cplusplus >= 201103L
/*
 * C++ 11 or above
 * std::mutex        https://en.cppreference.com/w/cpp/thread/mutex
 * std::unique_lock  https://en.cppreference.com/w/cpp/thread/unique_lock
 */
#include <mutex>
#ifdef SWIG_HAVE_MUTEX
/* Use Language defined Mutex class */
#define SWIG_GUARD(_mutex) std::unique_lock<Mutex> _guard(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex) Mutex _cls::_mutex
#define SWIG_GUARD_DECLARATION(_mutex) static Mutex _mutex
#else
#define SWIG_GUARD(_mutex) std::unique_lock<std::mutex> _guard(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex) std::mutex _cls::_mutex
#define SWIG_GUARD_DECLARATION(_mutex) static std::mutex _mutex
#endif

#else /* __cplusplus */

#ifdef SWIG_HAVE_MUTEX
/* Use Language defined Mutex class */

#elif defined(_WIN32)
/*
 * Windows Critical Section Objects
 * https://learn.microsoft.com/en-us/windows/win32/Sync/critical-section-objects
 */
#include <windows.h>
#include <synchapi.h>
namespace Swig {
    class Mutex {
        CRITICAL_SECTION mutex_;
    public:
        Mutex() { InitializeCriticalSection(&mutex_); }
        ~Mutex() { DeleteCriticalSection(&mutex_); }
        void lock() { EnterCriticalSection(&mutex_); }
        void unlock() { LeaveCriticalSection(&mutex_); }
    };
}

#else /* _WIN32 */
/*
 * POSIX Thread mutex
 * https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread.h.html
 */
#include <pthread.h>
namespace Swig {
    class Mutex {
        pthread_mutex_t mutex_;
    public:
        Mutex() { pthread_mutex_init(&mutex_, NULL); }
        ~Mutex() { pthread_mutex_destroy(&mutex_); }
        void lock() { pthread_mutex_lock(&mutex_); }
        void unlock() { pthread_mutex_unlock(&mutex_); }
    };
}

#endif /* _WIN32 */

namespace Swig {
    class Unique_lock {
        Mutex &mutex_;
    public:
        Unique_lock(Mutex &_mutex) : mutex_(_mutex) { mutex_.lock(); }
        ~Unique_lock() { mutex_.unlock(); }
    };
}
#define SWIG_GUARD(_mutex) Unique_lock _guard(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex) Mutex _cls::_mutex
#define SWIG_GUARD_DECLARATION(_mutex) static Mutex _mutex

#endif /* __cplusplus */

#else /* SWIG_THREADS */

#define SWIG_GUARD(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex)
#define SWIG_GUARD_DECLARATION(_mutex)

#endif /* SWIG_THREADS */
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>

/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, swig_msg.c_str());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };



  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        SWIG_Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        SWIG_Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
    SWIG_GUARD_DECLARATION(swig_mutex_own);

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

  SWIG_GUARD_DEFINITION(Director, swig_mutex_own);
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Archive swig_types[0]
#define SWIGTYPE_p_AttachmentList swig_types[1]
#define SWIGTYPE_p_AttachmentType swig_types[2]
#define SWIGTYPE_p_Attributes swig_types[3]
#define SWIGTYPE_p_Backend swig_types[4]
#define SWIGTYPE_p_DataArray swig_types[5]
#define SWIGTYPE_p_Days swig_types[6]
#define SWIGTYPE_p_Duration swig_types[7]
#define SWIGTYPE_p_F1 swig_types[8]
#define SWIGTYPE_p_F2 swig_types[9]
#define SWIGTYPE_p_F3 swig_types[10]
#define SWIGTYPE_p_F4 swig_types[11]
#define SWIGTYPE_p_F5 swig_types[12]
#define SWIGTYPE_p_F6 swig_types[13]
#define SWIGTYPE_p_Flags swig_types[14]
#define SWIGTYPE_p_Hours swig_types[15]
#define SWIGTYPE_p_IDList swig_types[16]
#define SWIGTYPE_p_ImplType swig_types[17]
#define SWIGTYPE_p_IncludedFiles swig_types[18]
#define SWIGTYPE_p_InplaceFilterType swig_types[19]
#define SWIGTYPE_p_Iterator swig_types[20]
#define SWIGTYPE_p_LogNodeCPtr swig_types[21]
#define SWIGTYPE_p_LogNodePtr swig_types[22]
#define SWIGTYPE_p_MSRecord_s swig_types[23]
#define SWIGTYPE_p_MajorType swig_types[24]
#define SWIGTYPE_p_MicroSeconds swig_types[25]
#define SWIGTYPE_p_MilliSeconds swig_types[26]
#define SWIGTYPE_p_MinorType swig_types[27]
#define SWIGTYPE_p_Minutes swig_types[28]
#define SWIGTYPE_p_Notifiers swig_types[29]
#define SWIGTYPE_p_OID swig_types[30]
#define SWIGTYPE_p_PackType swig_types[31]
#define SWIGTYPE_p_ParameterMap swig_types[32]
#define SWIGTYPE_p_PatchType swig_types[33]
#define SWIGTYPE_p_PickList swig_types[34]
#define SWIGTYPE_p_PopCallback swig_types[35]
#define SWIGTYPE_p_Properties swig_types[36]
#define SWIGTYPE_p_PropertyIndex swig_types[37]
#define SWIGTYPE_p_PropertyValue swig_types[38]
#define SWIGTYPE_p_PublicObjectMap swig_types[39]
#define SWIGTYPE_p_PushCallback swig_types[40]
#define SWIGTYPE_p_ReferenceType swig_types[41]
#define SWIGTYPE_p_RootType swig_types[42]
#define SWIGTYPE_p_Seconds swig_types[43]
#define SWIGTYPE_p_Seiscomp__Array swig_types[44]
#define SWIGTYPE_p_Seiscomp__BitSet swig_types[45]
#define SWIGTYPE_p_Seiscomp__Config__CaseSensitivityException swig_types[46]
#define SWIGTYPE_p_Seiscomp__Config__Config swig_types[47]
#define SWIGTYPE_p_Seiscomp__Config__Exception swig_types[48]
#define SWIGTYPE_p_Seiscomp__Config__OptionNotFoundException swig_types[49]
#define SWIGTYPE_p_Seiscomp__Config__SyntaxException swig_types[50]
#define SWIGTYPE_p_Seiscomp__Config__TypeConversionException swig_types[51]
#define SWIGTYPE_p_Seiscomp__Core__BaseObject swig_types[52]
#define SWIGTYPE_p_Seiscomp__Core__ClassNotFound swig_types[53]
#define SWIGTYPE_p_Seiscomp__Core__DataMessage swig_types[54]
#define SWIGTYPE_p_Seiscomp__Core__DuplicateClassname swig_types[55]
#define SWIGTYPE_p_Seiscomp__Core__EndOfStreamException swig_types[56]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EDataUsedWaveType_Seiscomp__DataModel__EDataUsedWaveTypeQuantity_Seiscomp__DataModel__EDataUsedWaveTypeNames_t swig_types[57]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationMode_Seiscomp__DataModel__EEvaluationModeQuantity_Seiscomp__DataModel__EEvaluationModeNames_t swig_types[58]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationStatus_Seiscomp__DataModel__EEvaluationStatusQuantity_Seiscomp__DataModel__EEvaluationStatusNames_t swig_types[59]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventDescriptionType_Seiscomp__DataModel__EEventDescriptionTypeQuantity_Seiscomp__DataModel__EEventDescriptionTypeNames_t swig_types[60]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventTypeCertainty_Seiscomp__DataModel__EEventTypeCertaintyQuantity_Seiscomp__DataModel__EEventTypeCertaintyNames_t swig_types[61]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventType_Seiscomp__DataModel__EEventTypeQuantity_Seiscomp__DataModel__EEventTypeNames_t swig_types[62]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EInventoryError_Seiscomp__DataModel__EInventoryErrorQuantity_Seiscomp__DataModel__EInventoryErrorNames_t swig_types[63]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorMethod_Seiscomp__DataModel__EMomentTensorMethodQuantity_Seiscomp__DataModel__EMomentTensorMethodNames_t swig_types[64]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorStatus_Seiscomp__DataModel__EMomentTensorStatusQuantity_Seiscomp__DataModel__EMomentTensorStatusNames_t swig_types[65]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOperation_Seiscomp__DataModel__EOperationQuantity_Seiscomp__DataModel__EOperationNames_t swig_types[66]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginDepthType_Seiscomp__DataModel__EOriginDepthTypeQuantity_Seiscomp__DataModel__EOriginDepthTypeNames_t swig_types[67]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginType_Seiscomp__DataModel__EOriginTypeQuantity_Seiscomp__DataModel__EOriginTypeNames_t swig_types[68]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginUncertaintyDescription_Seiscomp__DataModel__EOriginUncertaintyDescriptionQuantity_Seiscomp__DataModel__EOriginUncertaintyDescriptionNames_t swig_types[69]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickOnset_Seiscomp__DataModel__EPickOnsetQuantity_Seiscomp__DataModel__EPickOnsetNames_t swig_types[70]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickPolarity_Seiscomp__DataModel__EPickPolarityQuantity_Seiscomp__DataModel__EPickPolarityNames_t swig_types[71]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__ESourceTimeFunctionType_Seiscomp__DataModel__ESourceTimeFunctionTypeQuantity_Seiscomp__DataModel__ESourceTimeFunctionTypeNames_t swig_types[72]
#define SWIGTYPE_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EStationGroupType_Seiscomp__DataModel__EStationGroupTypeQuantity_Seiscomp__DataModel__EStationGroupTypeNames_t swig_types[73]
#define SWIGTYPE_p_Seiscomp__Core__GeneralException swig_types[74]
#define SWIGTYPE_p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t swig_types[75]
#define SWIGTYPE_p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t swig_types[76]
#define SWIGTYPE_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t swig_types[77]
#define SWIGTYPE_p_Seiscomp__Core__Generic__ClassFactoryInterfaceT_Seiscomp__Core__BaseObject_t swig_types[78]
#define SWIGTYPE_p_Seiscomp__Core__GreensFunction swig_types[79]
#define SWIGTYPE_p_Seiscomp__Core__InterruptibleObject swig_types[80]
#define SWIGTYPE_p_Seiscomp__Core__MemoryException swig_types[81]
#define SWIGTYPE_p_Seiscomp__Core__Message swig_types[82]
#define SWIGTYPE_p_Seiscomp__Core__OperationInterrupted swig_types[83]
#define SWIGTYPE_p_Seiscomp__Core__OptionalT_double_t swig_types[84]
#define SWIGTYPE_p_Seiscomp__Core__OverflowException swig_types[85]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_const_t swig_types[86]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_t swig_types[87]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_const_t swig_types[88]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_t swig_types[89]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_const_t swig_types[90]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_t swig_types[91]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_const_t swig_types[92]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_t swig_types[93]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__DataMessage_t swig_types[94]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_const_t swig_types[95]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_t swig_types[96]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_const_t swig_types[97]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_t swig_types[98]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_const_t swig_types[99]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_t swig_types[100]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_const_t swig_types[101]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_t swig_types[102]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_const_t swig_types[103]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_t swig_types[104]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_const_t swig_types[105]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_t swig_types[106]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_const_t swig_types[107]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_t swig_types[108]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_const_t swig_types[109]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_t swig_types[110]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_const_t swig_types[111]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_t swig_types[112]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_const_t swig_types[113]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_t swig_types[114]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_const_t swig_types[115]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_t swig_types[116]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_const_t swig_types[117]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_t swig_types[118]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_const_t swig_types[119]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_t swig_types[120]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_const_t swig_types[121]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_t swig_types[122]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_const_t swig_types[123]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_t swig_types[124]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_const_t swig_types[125]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_t swig_types[126]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_const_t swig_types[127]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_t swig_types[128]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_const_t swig_types[129]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_t swig_types[130]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_const_t swig_types[131]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_t swig_types[132]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_const_t swig_types[133]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_t swig_types[134]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_const_t swig_types[135]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_t swig_types[136]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_const_t swig_types[137]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_t swig_types[138]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_const_t swig_types[139]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_t swig_types[140]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_const_t swig_types[141]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_t swig_types[142]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_const_t swig_types[143]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_t swig_types[144]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_const_t swig_types[145]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_t swig_types[146]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_const_t swig_types[147]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_t swig_types[148]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_const_t swig_types[149]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_t swig_types[150]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_const_t swig_types[151]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_t swig_types[152]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_const_t swig_types[153]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_t swig_types[154]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_const_t swig_types[155]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_t swig_types[156]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_const_t swig_types[157]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_t swig_types[158]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_const_t swig_types[159]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_t swig_types[160]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_const_t swig_types[161]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_t swig_types[162]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_const_t swig_types[163]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_t swig_types[164]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_const_t swig_types[165]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_t swig_types[166]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_const_t swig_types[167]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_t swig_types[168]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_const_t swig_types[169]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_t swig_types[170]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_const_t swig_types[171]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_t swig_types[172]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_const_t swig_types[173]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_t swig_types[174]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_const_t swig_types[175]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_t swig_types[176]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_const_t swig_types[177]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_t swig_types[178]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_const_t swig_types[179]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_t swig_types[180]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_const_t swig_types[181]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_t swig_types[182]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_const_t swig_types[183]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_t swig_types[184]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_const_t swig_types[185]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_t swig_types[186]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_const_t swig_types[187]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_t swig_types[188]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_const_t swig_types[189]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_t swig_types[190]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_const_t swig_types[191]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_t swig_types[192]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_const_t swig_types[193]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_t swig_types[194]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_const_t swig_types[195]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_t swig_types[196]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_const_t swig_types[197]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_t swig_types[198]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_const_t swig_types[199]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_t swig_types[200]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_const_t swig_types[201]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_t swig_types[202]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_const_t swig_types[203]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_t swig_types[204]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_const_t swig_types[205]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_t swig_types[206]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_const_t swig_types[207]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_t swig_types[208]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NotifierMessage_t swig_types[209]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_const_t swig_types[210]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_t swig_types[211]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_const_t swig_types[212]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_t swig_types[213]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_const_t swig_types[214]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_t swig_types[215]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_const_t swig_types[216]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_t swig_types[217]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_const_t swig_types[218]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_t swig_types[219]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_const_t swig_types[220]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_t swig_types[221]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_const_t swig_types[222]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_t swig_types[223]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_const_t swig_types[224]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_t swig_types[225]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_const_t swig_types[226]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_t swig_types[227]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_const_t swig_types[228]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_t swig_types[229]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_const_t swig_types[230]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_t swig_types[231]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_const_t swig_types[232]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_t swig_types[233]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_const_t swig_types[234]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_t swig_types[235]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_const_t swig_types[236]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_t swig_types[237]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_const_t swig_types[238]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_t swig_types[239]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_const_t swig_types[240]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_t swig_types[241]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_const_t swig_types[242]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_t swig_types[243]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_const_t swig_types[244]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_t swig_types[245]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_const_t swig_types[246]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_t swig_types[247]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_const_t swig_types[248]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_t swig_types[249]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_const_t swig_types[250]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_t swig_types[251]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_const_t swig_types[252]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_t swig_types[253]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_const_t swig_types[254]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_t swig_types[255]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_const_t swig_types[256]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_t swig_types[257]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_const_t swig_types[258]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_t swig_types[259]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_const_t swig_types[260]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_t swig_types[261]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_const_t swig_types[262]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_t swig_types[263]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_const_t swig_types[264]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_t swig_types[265]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_const_t swig_types[266]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_t swig_types[267]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_const_t swig_types[268]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_t swig_types[269]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_const_t swig_types[270]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_t swig_types[271]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_const_t swig_types[272]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_t swig_types[273]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_const_t swig_types[274]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_t swig_types[275]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_const_t swig_types[276]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_t swig_types[277]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_const_t swig_types[278]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_t swig_types[279]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_const_t swig_types[280]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_t swig_types[281]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_const_t swig_types[282]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_t swig_types[283]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_const_t swig_types[284]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_t swig_types[285]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_const_t swig_types[286]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_t swig_types[287]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_const_t swig_types[288]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_t swig_types[289]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_const_t swig_types[290]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_t swig_types[291]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_const_t swig_types[292]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_t swig_types[293]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_const_t swig_types[294]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_t swig_types[295]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_const_t swig_types[296]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_t swig_types[297]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_const_t swig_types[298]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_t swig_types[299]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_const_t swig_types[300]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_t swig_types[301]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_const_t swig_types[302]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_t swig_types[303]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_const_t swig_types[304]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_t swig_types[305]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_const_t swig_types[306]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_t swig_types[307]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_const_t swig_types[308]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_t swig_types[309]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_const_t swig_types[310]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_t swig_types[311]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_const_t swig_types[312]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_t swig_types[313]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_const_t swig_types[314]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_t swig_types[315]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_const_t swig_types[316]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_t swig_types[317]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_const_t swig_types[318]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_t swig_types[319]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_const_t swig_types[320]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_t swig_types[321]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_const_t swig_types[322]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_t swig_types[323]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_const_t swig_types[324]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_t swig_types[325]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_const_t swig_types[326]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_t swig_types[327]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_const_t swig_types[328]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_t swig_types[329]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_const_t swig_types[330]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_t swig_types[331]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_const_t swig_types[332]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_t swig_types[333]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_const_t swig_types[334]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_t swig_types[335]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_const_t swig_types[336]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_t swig_types[337]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_const_t swig_types[338]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_t swig_types[339]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_const_t swig_types[340]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_t swig_types[341]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_const_t swig_types[342]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_t swig_types[343]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_const_t swig_types[344]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_t swig_types[345]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_const_t swig_types[346]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_t swig_types[347]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_const_t swig_types[348]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_t swig_types[349]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_const_t swig_types[350]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_t swig_types[351]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_const_t swig_types[352]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_t swig_types[353]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_const_t swig_types[354]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_t swig_types[355]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_const_t swig_types[356]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_t swig_types[357]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_const_t swig_types[358]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_t swig_types[359]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_const_t swig_types[360]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_t swig_types[361]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_const_t swig_types[362]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_t swig_types[363]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_const_t swig_types[364]
#define SWIGTYPE_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_t swig_types[365]
#define SWIGTYPE_p_Seiscomp__Core__StreamException swig_types[366]
#define SWIGTYPE_p_Seiscomp__Core__Time swig_types[367]
#define SWIGTYPE_p_Seiscomp__Core__TypeConversionException swig_types[368]
#define SWIGTYPE_p_Seiscomp__Core__TypeException swig_types[369]
#define SWIGTYPE_p_Seiscomp__Core__UnderflowException swig_types[370]
#define SWIGTYPE_p_Seiscomp__Core__ValueError swig_types[371]
#define SWIGTYPE_p_Seiscomp__Core__ValueException swig_types[372]
#define SWIGTYPE_p_Seiscomp__DataModel__Access swig_types[373]
#define SWIGTYPE_p_Seiscomp__DataModel__Amplitude swig_types[374]
#define SWIGTYPE_p_Seiscomp__DataModel__AmplitudeReference swig_types[375]
#define SWIGTYPE_p_Seiscomp__DataModel__ArclinkLog swig_types[376]
#define SWIGTYPE_p_Seiscomp__DataModel__ArclinkRequest swig_types[377]
#define SWIGTYPE_p_Seiscomp__DataModel__ArclinkRequestLine swig_types[378]
#define SWIGTYPE_p_Seiscomp__DataModel__ArclinkRequestSummary swig_types[379]
#define SWIGTYPE_p_Seiscomp__DataModel__ArclinkStatusLine swig_types[380]
#define SWIGTYPE_p_Seiscomp__DataModel__ArclinkUser swig_types[381]
#define SWIGTYPE_p_Seiscomp__DataModel__Arrival swig_types[382]
#define SWIGTYPE_p_Seiscomp__DataModel__ArtificialEventParametersMessage swig_types[383]
#define SWIGTYPE_p_Seiscomp__DataModel__ArtificialOriginMessage swig_types[384]
#define SWIGTYPE_p_Seiscomp__DataModel__AuxDevice swig_types[385]
#define SWIGTYPE_p_Seiscomp__DataModel__AuxSource swig_types[386]
#define SWIGTYPE_p_Seiscomp__DataModel__AuxStream swig_types[387]
#define SWIGTYPE_p_Seiscomp__DataModel__Axis swig_types[388]
#define SWIGTYPE_p_Seiscomp__DataModel__Blob swig_types[389]
#define SWIGTYPE_p_Seiscomp__DataModel__Comment swig_types[390]
#define SWIGTYPE_p_Seiscomp__DataModel__ComplexArray swig_types[391]
#define SWIGTYPE_p_Seiscomp__DataModel__CompositeTime swig_types[392]
#define SWIGTYPE_p_Seiscomp__DataModel__ConfidenceEllipsoid swig_types[393]
#define SWIGTYPE_p_Seiscomp__DataModel__Config swig_types[394]
#define SWIGTYPE_p_Seiscomp__DataModel__ConfigModule swig_types[395]
#define SWIGTYPE_p_Seiscomp__DataModel__ConfigStation swig_types[396]
#define SWIGTYPE_p_Seiscomp__DataModel__ConfigSyncMessage swig_types[397]
#define SWIGTYPE_p_Seiscomp__DataModel__CreationInfo swig_types[398]
#define SWIGTYPE_p_Seiscomp__DataModel__DataAttributeExtent swig_types[399]
#define SWIGTYPE_p_Seiscomp__DataModel__DataAvailability swig_types[400]
#define SWIGTYPE_p_Seiscomp__DataModel__DataExtent swig_types[401]
#define SWIGTYPE_p_Seiscomp__DataModel__DataSegment swig_types[402]
#define SWIGTYPE_p_Seiscomp__DataModel__DataUsed swig_types[403]
#define SWIGTYPE_p_Seiscomp__DataModel__DatabaseArchive swig_types[404]
#define SWIGTYPE_p_Seiscomp__DataModel__DatabaseIterator swig_types[405]
#define SWIGTYPE_p_Seiscomp__DataModel__DatabaseQuery swig_types[406]
#define SWIGTYPE_p_Seiscomp__DataModel__DatabaseReader swig_types[407]
#define SWIGTYPE_p_Seiscomp__DataModel__Datalogger swig_types[408]
#define SWIGTYPE_p_Seiscomp__DataModel__DataloggerCalibration swig_types[409]
#define SWIGTYPE_p_Seiscomp__DataModel__Decimation swig_types[410]
#define SWIGTYPE_p_Seiscomp__DataModel__Event swig_types[411]
#define SWIGTYPE_p_Seiscomp__DataModel__EventDescription swig_types[412]
#define SWIGTYPE_p_Seiscomp__DataModel__EventParameters swig_types[413]
#define SWIGTYPE_p_Seiscomp__DataModel__FocalMechanism swig_types[414]
#define SWIGTYPE_p_Seiscomp__DataModel__FocalMechanismReference swig_types[415]
#define SWIGTYPE_p_Seiscomp__DataModel__IntegerQuantity swig_types[416]
#define SWIGTYPE_p_Seiscomp__DataModel__Inventory swig_types[417]
#define SWIGTYPE_p_Seiscomp__DataModel__InventorySyncMessage swig_types[418]
#define SWIGTYPE_p_Seiscomp__DataModel__JournalEntry swig_types[419]
#define SWIGTYPE_p_Seiscomp__DataModel__Journaling swig_types[420]
#define SWIGTYPE_p_Seiscomp__DataModel__Magnitude swig_types[421]
#define SWIGTYPE_p_Seiscomp__DataModel__MomentTensor swig_types[422]
#define SWIGTYPE_p_Seiscomp__DataModel__MomentTensorComponentContribution swig_types[423]
#define SWIGTYPE_p_Seiscomp__DataModel__MomentTensorPhaseSetting swig_types[424]
#define SWIGTYPE_p_Seiscomp__DataModel__MomentTensorStationContribution swig_types[425]
#define SWIGTYPE_p_Seiscomp__DataModel__Network swig_types[426]
#define SWIGTYPE_p_Seiscomp__DataModel__NodalPlane swig_types[427]
#define SWIGTYPE_p_Seiscomp__DataModel__NodalPlanes swig_types[428]
#define SWIGTYPE_p_Seiscomp__DataModel__Notifier swig_types[429]
#define SWIGTYPE_p_Seiscomp__DataModel__NotifierMessage swig_types[430]
#define SWIGTYPE_p_Seiscomp__DataModel__Object swig_types[431]
#define SWIGTYPE_p_Seiscomp__DataModel__Observer swig_types[432]
#define SWIGTYPE_p_Seiscomp__DataModel__Origin swig_types[433]
#define SWIGTYPE_p_Seiscomp__DataModel__OriginQuality swig_types[434]
#define SWIGTYPE_p_Seiscomp__DataModel__OriginReference swig_types[435]
#define SWIGTYPE_p_Seiscomp__DataModel__OriginUncertainty swig_types[436]
#define SWIGTYPE_p_Seiscomp__DataModel__Outage swig_types[437]
#define SWIGTYPE_p_Seiscomp__DataModel__Parameter swig_types[438]
#define SWIGTYPE_p_Seiscomp__DataModel__ParameterSet swig_types[439]
#define SWIGTYPE_p_Seiscomp__DataModel__Phase swig_types[440]
#define SWIGTYPE_p_Seiscomp__DataModel__Pick swig_types[441]
#define SWIGTYPE_p_Seiscomp__DataModel__PickReference swig_types[442]
#define SWIGTYPE_p_Seiscomp__DataModel__PrincipalAxes swig_types[443]
#define SWIGTYPE_p_Seiscomp__DataModel__PublicObject swig_types[444]
#define SWIGTYPE_p_Seiscomp__DataModel__PublicObjectCache swig_types[445]
#define SWIGTYPE_p_Seiscomp__DataModel__PublicObjectRingBuffer swig_types[446]
#define SWIGTYPE_p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer swig_types[447]
#define SWIGTYPE_p_Seiscomp__DataModel__QCLog swig_types[448]
#define SWIGTYPE_p_Seiscomp__DataModel__QualityControl swig_types[449]
#define SWIGTYPE_p_Seiscomp__DataModel__Reading swig_types[450]
#define SWIGTYPE_p_Seiscomp__DataModel__RealArray swig_types[451]
#define SWIGTYPE_p_Seiscomp__DataModel__RealPDF1D swig_types[452]
#define SWIGTYPE_p_Seiscomp__DataModel__RealQuantity swig_types[453]
#define SWIGTYPE_p_Seiscomp__DataModel__ResponseFAP swig_types[454]
#define SWIGTYPE_p_Seiscomp__DataModel__ResponseFIR swig_types[455]
#define SWIGTYPE_p_Seiscomp__DataModel__ResponseIIR swig_types[456]
#define SWIGTYPE_p_Seiscomp__DataModel__ResponsePAZ swig_types[457]
#define SWIGTYPE_p_Seiscomp__DataModel__ResponsePolynomial swig_types[458]
#define SWIGTYPE_p_Seiscomp__DataModel__Route swig_types[459]
#define SWIGTYPE_p_Seiscomp__DataModel__RouteArclink swig_types[460]
#define SWIGTYPE_p_Seiscomp__DataModel__RouteSeedlink swig_types[461]
#define SWIGTYPE_p_Seiscomp__DataModel__Routing swig_types[462]
#define SWIGTYPE_p_Seiscomp__DataModel__Sensor swig_types[463]
#define SWIGTYPE_p_Seiscomp__DataModel__SensorCalibration swig_types[464]
#define SWIGTYPE_p_Seiscomp__DataModel__SensorLocation swig_types[465]
#define SWIGTYPE_p_Seiscomp__DataModel__Setup swig_types[466]
#define SWIGTYPE_p_Seiscomp__DataModel__SourceTimeFunction swig_types[467]
#define SWIGTYPE_p_Seiscomp__DataModel__Station swig_types[468]
#define SWIGTYPE_p_Seiscomp__DataModel__StationGroup swig_types[469]
#define SWIGTYPE_p_Seiscomp__DataModel__StationMagnitude swig_types[470]
#define SWIGTYPE_p_Seiscomp__DataModel__StationMagnitudeContribution swig_types[471]
#define SWIGTYPE_p_Seiscomp__DataModel__StationReference swig_types[472]
#define SWIGTYPE_p_Seiscomp__DataModel__Stream swig_types[473]
#define SWIGTYPE_p_Seiscomp__DataModel__Tensor swig_types[474]
#define SWIGTYPE_p_Seiscomp__DataModel__TimeArray swig_types[475]
#define SWIGTYPE_p_Seiscomp__DataModel__TimePDF1D swig_types[476]
#define SWIGTYPE_p_Seiscomp__DataModel__TimeQuantity swig_types[477]
#define SWIGTYPE_p_Seiscomp__DataModel__TimeWindow swig_types[478]
#define SWIGTYPE_p_Seiscomp__DataModel__WaveformQuality swig_types[479]
#define SWIGTYPE_p_Seiscomp__DataModel__WaveformStreamID swig_types[480]
#define SWIGTYPE_p_Seiscomp__FileNotFoundError swig_types[481]
#define SWIGTYPE_p_Seiscomp__GenericRecord swig_types[482]
#define SWIGTYPE_p_Seiscomp__Geo__GeoCoordinate swig_types[483]
#define SWIGTYPE_p_Seiscomp__Geo__GeoFeature swig_types[484]
#define SWIGTYPE_p_Seiscomp__Geo__GeoFeatureSet swig_types[485]
#define SWIGTYPE_p_Seiscomp__Geo__PolyRegions swig_types[486]
#define SWIGTYPE_p_Seiscomp__IO__BinaryArchive swig_types[487]
#define SWIGTYPE_p_Seiscomp__IO__Cropper swig_types[488]
#define SWIGTYPE_p_Seiscomp__IO__DatabaseInterface swig_types[489]
#define SWIGTYPE_p_Seiscomp__IO__Exporter swig_types[490]
#define SWIGTYPE_p_Seiscomp__IO__GFArchive swig_types[491]
#define SWIGTYPE_p_Seiscomp__IO__GFReceiver swig_types[492]
#define SWIGTYPE_p_Seiscomp__IO__GFSource swig_types[493]
#define SWIGTYPE_p_Seiscomp__IO__Importer swig_types[494]
#define SWIGTYPE_p_Seiscomp__IO__LibmseedException swig_types[495]
#define SWIGTYPE_p_Seiscomp__IO__MSeedEncoder swig_types[496]
#define SWIGTYPE_p_Seiscomp__IO__MSeedRecord swig_types[497]
#define SWIGTYPE_p_Seiscomp__IO__PipeFilter swig_types[498]
#define SWIGTYPE_p_Seiscomp__IO__RecordDemuxFilter swig_types[499]
#define SWIGTYPE_p_Seiscomp__IO__RecordFilterInterface swig_types[500]
#define SWIGTYPE_p_Seiscomp__IO__RecordIIRFilterT_double_t swig_types[501]
#define SWIGTYPE_p_Seiscomp__IO__RecordIIRFilterT_float_t swig_types[502]
#define SWIGTYPE_p_Seiscomp__IO__RecordInput swig_types[503]
#define SWIGTYPE_p_Seiscomp__IO__RecordResamplerBase swig_types[504]
#define SWIGTYPE_p_Seiscomp__IO__RecordResamplerT_double_t swig_types[505]
#define SWIGTYPE_p_Seiscomp__IO__RecordResamplerT_float_t swig_types[506]
#define SWIGTYPE_p_Seiscomp__IO__RecordResamplerT_int_t swig_types[507]
#define SWIGTYPE_p_Seiscomp__IO__RecordStream swig_types[508]
#define SWIGTYPE_p_Seiscomp__IO__RecordStreamException swig_types[509]
#define SWIGTYPE_p_Seiscomp__IO__RecordStreamTimeout swig_types[510]
#define SWIGTYPE_p_Seiscomp__IO__VBinaryArchive swig_types[511]
#define SWIGTYPE_p_Seiscomp__IO__XMLArchive swig_types[512]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__AlignmentError swig_types[513]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__AverageT_double_t swig_types[514]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__AverageT_float_t swig_types[515]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__ChainFilterT_double_t swig_types[516]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__ChainFilterT_float_t swig_types[517]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t swig_types[518]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t swig_types[519]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t swig_types[520]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t swig_types[521]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t swig_types[522]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t swig_types[523]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t swig_types[524]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t swig_types[525]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t swig_types[526]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t swig_types[527]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t swig_types[528]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t swig_types[529]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__FilterT_double_t swig_types[530]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__FilterT_float_t swig_types[531]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t swig_types[532]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t swig_types[533]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t swig_types[534]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t swig_types[535]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t swig_types[536]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t swig_types[537]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t swig_types[538]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t swig_types[539]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t swig_types[540]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t swig_types[541]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__InitialTaperT_double_t swig_types[542]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__InitialTaperT_float_t swig_types[543]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t swig_types[544]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t swig_types[545]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__RunningMeanT_double_t swig_types[546]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__RunningMeanT_float_t swig_types[547]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__STALTA2T_double_t swig_types[548]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__STALTA2T_float_t swig_types[549]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__STALTAT_double_t swig_types[550]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__STALTAT_float_t swig_types[551]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t swig_types[552]
#define SWIGTYPE_p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t swig_types[553]
#define SWIGTYPE_p_Seiscomp__Math__Geo__CityT_double_t swig_types[554]
#define SWIGTYPE_p_Seiscomp__Math__Geo__CityT_float_t swig_types[555]
#define SWIGTYPE_p_Seiscomp__Math__Geo__CoordT_double_t swig_types[556]
#define SWIGTYPE_p_Seiscomp__Math__Geo__CoordT_float_t swig_types[557]
#define SWIGTYPE_p_Seiscomp__Math__Geo__NamedCoordT_double_t swig_types[558]
#define SWIGTYPE_p_Seiscomp__Math__Geo__NamedCoordT_float_t swig_types[559]
#define SWIGTYPE_p_Seiscomp__Math__Restitution__FFT__PolesAndZeros swig_types[560]
#define SWIGTYPE_p_Seiscomp__Math__Restitution__FFT__ResponseList swig_types[561]
#define SWIGTYPE_p_Seiscomp__Math__Restitution__FFT__TransferFunction swig_types[562]
#define SWIGTYPE_p_Seiscomp__MultipleModelsError swig_types[563]
#define SWIGTYPE_p_Seiscomp__NoPhaseError swig_types[564]
#define SWIGTYPE_p_Seiscomp__NumericArrayT_char_t swig_types[565]
#define SWIGTYPE_p_Seiscomp__NumericArrayT_double_t swig_types[566]
#define SWIGTYPE_p_Seiscomp__NumericArrayT_float_t swig_types[567]
#define SWIGTYPE_p_Seiscomp__NumericArrayT_int_t swig_types[568]
#define SWIGTYPE_p_Seiscomp__Record swig_types[569]
#define SWIGTYPE_p_Seiscomp__RecordStream__Arclink__ArclinkConnection swig_types[570]
#define SWIGTYPE_p_Seiscomp__RecordStream__CombinedConnection swig_types[571]
#define SWIGTYPE_p_Seiscomp__RecordStream__File swig_types[572]
#define SWIGTYPE_p_Seiscomp__RecordStream__SLConnection swig_types[573]
#define SWIGTYPE_p_Seiscomp__RecordStream__SeedlinkCommandException swig_types[574]
#define SWIGTYPE_p_Seiscomp__RecordStream__SeedlinkException swig_types[575]
#define SWIGTYPE_p_Seiscomp__Regions swig_types[576]
#define SWIGTYPE_p_Seiscomp__Seismology__LocatorException swig_types[577]
#define SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface swig_types[578]
#define SWIGTYPE_p_Seiscomp__Seismology__PickNotFoundException swig_types[579]
#define SWIGTYPE_p_Seiscomp__Seismology__SensorLocationDelegate swig_types[580]
#define SWIGTYPE_p_Seiscomp__Seismology__StationNotFoundException swig_types[581]
#define SWIGTYPE_p_Seiscomp__TravelTime swig_types[582]
#define SWIGTYPE_p_Seiscomp__TravelTimeList swig_types[583]
#define SWIGTYPE_p_Seiscomp__TravelTimeTable swig_types[584]
#define SWIGTYPE_p_Seiscomp__TravelTimeTableInterface swig_types[585]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t swig_types[586]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_char_t swig_types[587]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_double_t swig_types[588]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_float_t swig_types[589]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_int_t swig_types[590]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_std__complexT_double_t_t swig_types[591]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_std__complexT_float_t_t swig_types[592]
#define SWIGTYPE_p_Seiscomp__TypedArrayT_std__string_t swig_types[593]
#define SWIGTYPE_p_Storage swig_types[594]
#define SWIGTYPE_p_TimePoint swig_types[595]
#define SWIGTYPE_p_Type swig_types[596]
#define SWIGTYPE_p_ValueType swig_types[597]
#define SWIGTYPE_p_Values swig_types[598]
#define SWIGTYPE_p_Weeks swig_types[599]
#define SWIGTYPE_p_allocator_type swig_types[600]
#define SWIGTYPE_p_boost__any swig_types[601]
#define SWIGTYPE_p_boost__bad_any_cast swig_types[602]
#define SWIGTYPE_p_char swig_types[603]
#define SWIGTYPE_p_char_type swig_types[604]
#define SWIGTYPE_p_const_iterator swig_types[605]
#define SWIGTYPE_p_const_reference swig_types[606]
#define SWIGTYPE_p_difference_type swig_types[607]
#define SWIGTYPE_p_double swig_types[608]
#define SWIGTYPE_p_file_iterator swig_types[609]
#define SWIGTYPE_p_fmtflags swig_types[610]
#define SWIGTYPE_p_int swig_types[611]
#define SWIGTYPE_p_int_type swig_types[612]
#define SWIGTYPE_p_iostate swig_types[613]
#define SWIGTYPE_p_iterator swig_types[614]
#define SWIGTYPE_p_iterator_category swig_types[615]
#define SWIGTYPE_p_long swig_types[616]
#define SWIGTYPE_p_long_long swig_types[617]
#define SWIGTYPE_p_off_type swig_types[618]
#define SWIGTYPE_p_openmode swig_types[619]
#define SWIGTYPE_p_p_PyObject swig_types[620]
#define SWIGTYPE_p_pos_type swig_types[621]
#define SWIGTYPE_p_seekdir swig_types[622]
#define SWIGTYPE_p_short swig_types[623]
#define SWIGTYPE_p_signed_char swig_types[624]
#define SWIGTYPE_p_size_t swig_types[625]
#define SWIGTYPE_p_size_type swig_types[626]
#define SWIGTYPE_p_state_type swig_types[627]
#define SWIGTYPE_p_std__allocatorT_Seiscomp__TravelTime_t swig_types[628]
#define SWIGTYPE_p_std__basic_iosT_char_t swig_types[629]
#define SWIGTYPE_p_std__complexT_double_t swig_types[630]
#define SWIGTYPE_p_std__exception swig_types[631]
#define SWIGTYPE_p_std__invalid_argument swig_types[632]
#define SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t swig_types[633]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[634]
#define SWIGTYPE_p_std__shared_ptrT_Seiscomp__Core__MetaObject_t swig_types[635]
#define SWIGTYPE_p_std__shared_ptrT_Seiscomp__Core__MetaProperty_t swig_types[636]
#define SWIGTYPE_p_std__vectorT_Seiscomp__Core__BaseObject_p_t swig_types[637]
#define SWIGTYPE_p_std__vectorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_std__allocatorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_t_t swig_types[638]
#define SWIGTYPE_p_std__vectorT_Seiscomp__Math__SeismometerResponse__FAP_std__allocatorT_Seiscomp__Math__SeismometerResponse__FAP_t_t swig_types[639]
#define SWIGTYPE_p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t swig_types[640]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_t swig_types[641]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[642]
#define SWIGTYPE_p_traits_type swig_types[643]
#define SWIGTYPE_p_unsigned_char swig_types[644]
#define SWIGTYPE_p_unsigned_int swig_types[645]
#define SWIGTYPE_p_unsigned_long_long swig_types[646]
#define SWIGTYPE_p_unsigned_short swig_types[647]
#define SWIGTYPE_p_value_type swig_types[648]
static swig_type_info *swig_types[650];
static swig_module_info swig_module = {swig_types, 649, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _seismology.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__seismology

#else
#  define SWIG_init    init_seismology

#endif

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        SWIG_Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(item._obj);
      SWIG_Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      SWIG_Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


/* headers to be included in the wrapper code */
#include "seiscomp/core/typedarray.h"
#include "seiscomp/core/genericrecord.h"
#include "seiscomp/core/exceptions.h"
#include "seiscomp/core/datamessage.h"
#include "seiscomp/core/greensfunction.h"
#include "seiscomp/config/exceptions.h"
#include "seiscomp/math/geo.h"
#include "seiscomp/math/coord.h"
#include "seiscomp/math/math.h"
#include "seiscomp/math/filter.h"
#include "seiscomp/math/filter/rmhp.h"
#include "seiscomp/math/filter/taper.h"
#include "seiscomp/math/filter/average.h"
#include "seiscomp/math/filter/stalta.h"
#include "seiscomp/math/filter/chainfilter.h"
#include "seiscomp/math/filter/biquad.h"
#include "seiscomp/math/filter/butterworth.h"
#include "seiscomp/math/filter/taper.h"
#include "seiscomp/math/filter/seismometers.h"
#include "seiscomp/math/restitution/transferfunction.h"
#include "seiscomp/geo/feature.h"
#include "seiscomp/geo/featureset.h"
#include "seiscomp/io/recordstream.h"
#include "seiscomp/io/recordinput.h"
#include "seiscomp/io/recordfilter.h"
#include "seiscomp/io/recordfilter/pipe.h"
#include "seiscomp/io/recordfilter/crop.h"
#include "seiscomp/io/recordfilter/demux.h"
#include "seiscomp/io/recordfilter/iirfilter.h"
#include "seiscomp/io/recordfilter/mseedencoder.h"
#include "seiscomp/io/recordfilter/resample.h"
#include "seiscomp/io/importer.h"
#include "seiscomp/io/exporter.h"
#include "seiscomp/io/gfarchive.h"
#include "seiscomp/io/archive/binarchive.h"
#include "seiscomp/io/archive/xmlarchive.h"
#include "seiscomp/io/records/mseedrecord.h"
#include "seiscomp/io/recordstream/file.h"
#include "seiscomp/io/recordstream/slconnection.h"
#include "seiscomp/io/recordstream/arclink.h"
#include "seiscomp/io/recordstream/combined.h"

#include "seiscomp/datamodel/publicobjectcache.h"
#include "seiscomp/datamodel/messages.h"
#include "seiscomp/datamodel/databasequery.h"
#include "seiscomp/datamodel/eventparameters_package.h"
#include "seiscomp/datamodel/inventory_package.h"
#include "seiscomp/datamodel/config_package.h"
#include "seiscomp/datamodel/routing_package.h"

#include "seiscomp/seismology/locatorinterface.h"
#include "seiscomp/seismology/regions.h"
#include "seiscomp/seismology/ttt.h"


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICEOBJECT PyObject
#else
# define SWIGPY_SLICEOBJECT PySliceObject
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static swig_type_info* desc = SWIG_TypeQuery("swig::SwigPyIterator *");
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    SWIG_Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <list>


#include <vector>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


  namespace swig {
    template <>  struct traits< Seiscomp::TravelTime > {
      typedef pointer_category category;
      static const char* type_name() { return"Seiscomp::TravelTime"; }
    };
  }


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      SWIG_Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


namespace swig {
  template <class Seq, class T = typename Seq::value_type >
  struct IteratorProtocol {
    static void assign(PyObject *obj, Seq *seq) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        while (item) {
          seq->insert(seq->end(), swig::as<T>(item));
          item = PyIter_Next(iter);
        }
      }
    }

    static bool check(PyObject *obj) {
      bool ret = false;
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        ret = true;
        while (item) {
          ret = swig::check<T>(item);
          item = ret ? PyIter_Next(iter) : 0;
        }
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static bool is_iterable(PyObject *obj) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      PyErr_Clear();
      return iter != 0;
    }

    static int asptr(PyObject *obj, sequence **seq) {
      int ret = SWIG_ERROR;
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (is_iterable(obj)) {
	try {
	  if (seq) {
	    *seq = new sequence();
            IteratorProtocol<Seq, T>::assign(obj, *seq);
            if (!PyErr_Occurred())
              return SWIG_NEWOBJ;
	  } else {
	    return IteratorProtocol<Seq, T>::check(obj) ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
          if (seq && !PyErr_Occurred())
            PyErr_SetString(PyExc_TypeError, e.what());
	}
        if (seq)
          delete *seq;
	return SWIG_ERROR;
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T >
    struct traits_asptr<std::list<T> >  {
      static int asptr(PyObject *obj, std::list<T> **lis) {
	return traits_asptr_stdseq<std::list<T> >::asptr(obj, lis);
      }
    };

    template <class T>
    struct traits_from<std::list<T> > {
      static PyObject *from(const std::list<T>& vec) {
	return traits_from_stdseq<std::list<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::list< Seiscomp::TravelTime, std::allocator< Seiscomp::TravelTime > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "Seiscomp::TravelTime" ", " "std::allocator< Seiscomp::TravelTime >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_Seiscomp_TravelTime_Sg__iterator(std::list< Seiscomp::TravelTime > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_Seiscomp_TravelTime_Sg____nonzero__(std::list< Seiscomp::TravelTime > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_Seiscomp_TravelTime_Sg____bool__(std::list< Seiscomp::TravelTime > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< Seiscomp::TravelTime >::size_type std_list_Sl_Seiscomp_TravelTime_Sg____len__(std::list< Seiscomp::TravelTime > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *std_list_Sl_Seiscomp_TravelTime_Sg____getslice__(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::difference_type i,std::list< Seiscomp::TravelTime >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____setslice____SWIG_0(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::difference_type i,std::list< Seiscomp::TravelTime >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >());
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____setslice____SWIG_1(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::difference_type i,std::list< Seiscomp::TravelTime >::difference_type j,std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____delslice__(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::difference_type i,std::list< Seiscomp::TravelTime >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____delitem____SWIG_0(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *std_list_Sl_Seiscomp_TravelTime_Sg____getitem____SWIG_0(std::list< Seiscomp::TravelTime > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type id = i;
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____setitem____SWIG_0(std::list< Seiscomp::TravelTime > *self,SWIGPY_SLICEOBJECT *slice,std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type id = i;
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____setitem____SWIG_1(std::list< Seiscomp::TravelTime > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type id = i;
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____delitem____SWIG_1(std::list< Seiscomp::TravelTime > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type id = i;
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< Seiscomp::TravelTime >::value_type const &std_list_Sl_Seiscomp_TravelTime_Sg____getitem____SWIG_1(std::list< Seiscomp::TravelTime > const *self,std::list< Seiscomp::TravelTime >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg____setitem____SWIG_2(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::difference_type i,std::list< Seiscomp::TravelTime >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< Seiscomp::TravelTime >::value_type std_list_Sl_Seiscomp_TravelTime_Sg__pop(std::list< Seiscomp::TravelTime > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg__append(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< Seiscomp::TravelTime >::iterator std_list_Sl_Seiscomp_TravelTime_Sg__erase__SWIG_0(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< Seiscomp::TravelTime >::iterator std_list_Sl_Seiscomp_TravelTime_Sg__erase__SWIG_1(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::iterator first,std::list< Seiscomp::TravelTime >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< Seiscomp::TravelTime >::iterator std_list_Sl_Seiscomp_TravelTime_Sg__insert__SWIG_0(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::iterator pos,std::list< Seiscomp::TravelTime >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_Seiscomp_TravelTime_Sg__insert__SWIG_1(std::list< Seiscomp::TravelTime > *self,std::list< Seiscomp::TravelTime >::iterator pos,std::list< Seiscomp::TravelTime >::size_type n,std::list< Seiscomp::TravelTime >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static swig_type_info* info = 0;
  if (!info) {
    info = SWIG_TypeQuery("_p_char");
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    SWIG_Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        SWIG_Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        SWIG_Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    PyErr_Clear();
    static swig_type_info *descriptor = SWIG_TypeQuery("std::string" " *");
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


  #define SWIG_From_double   PyFloat_FromDouble 



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "seismology_python_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TravelTimeList_internal_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_iterator" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_list_Sl_Seiscomp_TravelTime_Sg__iterator(arg1,arg2);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___nonzero__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (bool)std_list_Sl_Seiscomp_TravelTime_Sg____nonzero__((std::list< Seiscomp::TravelTime > const *)arg1);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___bool__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (bool)std_list_Sl_Seiscomp_TravelTime_Sg____bool__((std::list< Seiscomp::TravelTime > const *)arg1);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___len__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = std_list_Sl_Seiscomp_TravelTime_Sg____len__((std::list< Seiscomp::TravelTime > const *)arg1);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::difference_type arg2 ;
  std::list< Seiscomp::TravelTime >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_internal___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___getslice__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal___getslice__" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeList_internal___getslice__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg3 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val3);
  {
    try {
      try {
        result = (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *)std_list_Sl_Seiscomp_TravelTime_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::difference_type arg2 ;
  std::list< Seiscomp::TravelTime >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___setslice__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal___setslice__" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeList_internal___setslice__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg3 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val3);
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::difference_type arg2 ;
  std::list< Seiscomp::TravelTime >::difference_type arg3 ;
  std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___setslice__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal___setslice__" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeList_internal___setslice__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg3 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val3);
  {
    std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *ptr = (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TravelTimeList_internal___setslice__" "', argument " "4"" of type '" "std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal___setslice__" "', argument " "4"" of type '" "std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeList_internal___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TravelTimeList_internal___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TravelTimeList_internal___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeList_internal___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::__setslice__(std::list< Seiscomp::TravelTime >::difference_type,std::list< Seiscomp::TravelTime >::difference_type)\n"
    "    std::list< Seiscomp::TravelTime >::__setslice__(std::list< Seiscomp::TravelTime >::difference_type,std::list< Seiscomp::TravelTime >::difference_type,std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::difference_type arg2 ;
  std::list< Seiscomp::TravelTime >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_internal___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___delslice__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal___delslice__" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeList_internal___delslice__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg3 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val3);
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___delitem__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal___delitem__" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val2);
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___getitem__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *)std_list_Sl_Seiscomp_TravelTime_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___setitem__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *ptr = (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TravelTimeList_internal___setitem__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal___setitem__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____setitem____SWIG_0(arg1,arg2,(std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___setitem__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___delitem__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeList_internal___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TravelTimeList_internal___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TravelTimeList_internal___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeList_internal___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::__delitem__(std::list< Seiscomp::TravelTime >::difference_type)\n"
    "    std::list< Seiscomp::TravelTime >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::list< Seiscomp::TravelTime >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___getitem__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal___getitem__" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val2);
  {
    try {
      try {
        result = (std::list< Seiscomp::TravelTime >::value_type *) &std_list_Sl_Seiscomp_TravelTime_Sg____getitem____SWIG_1((std::list< Seiscomp::TravelTime > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::list< Seiscomp::TravelTime >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeList_internal___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TravelTimeList_internal___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TravelTimeList_internal___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeList_internal___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::list< Seiscomp::TravelTime >::__getitem__(std::list< Seiscomp::TravelTime >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::difference_type arg2 ;
  std::list< Seiscomp::TravelTime >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal___setitem__" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal___setitem__" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::difference_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TravelTimeList_internal___setitem__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal___setitem__" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp3);
  {
    try {
      try {
        std_list_Sl_Seiscomp_TravelTime_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Seiscomp::TravelTime const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeList_internal___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TravelTimeList_internal___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TravelTimeList_internal___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TravelTimeList_internal___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeList_internal___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::__setitem__(SWIGPY_SLICEOBJECT *,std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > const &)\n"
    "    std::list< Seiscomp::TravelTime >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::list< Seiscomp::TravelTime >::__setitem__(std::list< Seiscomp::TravelTime >::difference_type,std::list< Seiscomp::TravelTime >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_pop" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      try {
        result = std_list_Sl_Seiscomp_TravelTime_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::list< Seiscomp::TravelTime >::value_type(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_append" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeList_internal_append" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_append" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp2);
  {
    try {
      std_list_Sl_Seiscomp_TravelTime_Sg__append(arg1,(Seiscomp::TravelTime const &)*arg2);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TravelTimeList_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::list< Seiscomp::TravelTime > *)new std::list< Seiscomp::TravelTime >();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TravelTimeList_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::list< Seiscomp::TravelTime > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *ptr = (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TravelTimeList_internal" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_TravelTimeList_internal" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::list< Seiscomp::TravelTime > *)new std::list< Seiscomp::TravelTime >((std::list< Seiscomp::TravelTime > const &)*arg1);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_empty" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (bool)((std::list< Seiscomp::TravelTime > const *)arg1)->empty();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_size" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = ((std::list< Seiscomp::TravelTime > const *)arg1)->size();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_swap" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeList_internal_swap" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_swap" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_begin" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< Seiscomp::TravelTime >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_end" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< Seiscomp::TravelTime >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_rbegin" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< Seiscomp::TravelTime >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_rend" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< Seiscomp::TravelTime >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_clear" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Seiscomp::TravelTime > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_get_allocator" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = ((std::list< Seiscomp::TravelTime > const *)arg1)->get_allocator();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::list< Seiscomp::TravelTime >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Seiscomp__TravelTime_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TravelTimeList_internal__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::list< Seiscomp::TravelTime > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TravelTimeList_internal" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime >::size_type""'");
  } 
  arg1 = static_cast< std::list< Seiscomp::TravelTime >::size_type >(val1);
  {
    try {
      result = (std::list< Seiscomp::TravelTime > *)new std::list< Seiscomp::TravelTime >(SWIG_STD_MOVE(arg1));
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_pop_back" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_resize" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal_resize" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::size_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::size_type >(val2);
  {
    try {
      (arg1)->resize(SWIG_STD_MOVE(arg2));
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::list< Seiscomp::TravelTime >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_erase" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_erase" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_erase" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
    }
  }
  {
    try {
      result = std_list_Sl_Seiscomp_TravelTime_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< Seiscomp::TravelTime >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::iterator arg2 ;
  std::list< Seiscomp::TravelTime >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::list< Seiscomp::TravelTime >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_erase" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_erase" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_erase" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_erase" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_erase" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
    }
  }
  {
    try {
      result = std_list_Sl_Seiscomp_TravelTime_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< Seiscomp::TravelTime >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_TravelTimeList_internal_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_TravelTimeList_internal_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeList_internal_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::erase(std::list< Seiscomp::TravelTime >::iterator)\n"
    "    std::list< Seiscomp::TravelTime >::erase(std::list< Seiscomp::TravelTime >::iterator,std::list< Seiscomp::TravelTime >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_TravelTimeList_internal__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime >::size_type arg1 ;
  std::list< Seiscomp::TravelTime >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::list< Seiscomp::TravelTime > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TravelTimeList_internal" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime >::size_type""'");
  } 
  arg1 = static_cast< std::list< Seiscomp::TravelTime >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TravelTimeList_internal" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_TravelTimeList_internal" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp2);
  {
    try {
      result = (std::list< Seiscomp::TravelTime > *)new std::list< Seiscomp::TravelTime >(SWIG_STD_MOVE(arg1),(std::list< Seiscomp::TravelTime >::value_type const &)*arg2);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TravelTimeList_internal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_TravelTimeList_internal", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_TravelTimeList_internal__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TravelTimeList_internal__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TravelTimeList_internal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TravelTimeList_internal__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TravelTimeList_internal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::list()\n"
    "    std::list< Seiscomp::TravelTime >::list(std::list< Seiscomp::TravelTime > const &)\n"
    "    std::list< Seiscomp::TravelTime >::list(std::list< Seiscomp::TravelTime >::size_type)\n"
    "    std::list< Seiscomp::TravelTime >::list(std::list< Seiscomp::TravelTime >::size_type,std::list< Seiscomp::TravelTime >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_push_back" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeList_internal_push_back" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_push_back" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::list< Seiscomp::TravelTime >::value_type const &)*arg2);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_front" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (std::list< Seiscomp::TravelTime >::value_type *) &((std::list< Seiscomp::TravelTime > const *)arg1)->front();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::list< Seiscomp::TravelTime >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< Seiscomp::TravelTime >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_back" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      result = (std::list< Seiscomp::TravelTime >::value_type *) &((std::list< Seiscomp::TravelTime > const *)arg1)->back();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::list< Seiscomp::TravelTime >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::size_type arg2 ;
  std::list< Seiscomp::TravelTime >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_assign" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal_assign" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::size_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TravelTimeList_internal_assign" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_assign" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(SWIG_STD_MOVE(arg2),(std::list< Seiscomp::TravelTime >::value_type const &)*arg3);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::size_type arg2 ;
  std::list< Seiscomp::TravelTime >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_resize" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_internal_resize" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::size_type""'");
  } 
  arg2 = static_cast< std::list< Seiscomp::TravelTime >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TravelTimeList_internal_resize" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_resize" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(SWIG_STD_MOVE(arg2),(std::list< Seiscomp::TravelTime >::value_type const &)*arg3);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TravelTimeList_internal_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TravelTimeList_internal_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeList_internal_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::resize(std::list< Seiscomp::TravelTime >::size_type)\n"
    "    std::list< Seiscomp::TravelTime >::resize(std::list< Seiscomp::TravelTime >::size_type,std::list< Seiscomp::TravelTime >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::iterator arg2 ;
  std::list< Seiscomp::TravelTime >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::list< Seiscomp::TravelTime >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_insert" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_insert" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_insert" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TravelTimeList_internal_insert" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_insert" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp3);
  {
    try {
      result = std_list_Sl_Seiscomp_TravelTime_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Seiscomp::TravelTime const &)*arg3);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< Seiscomp::TravelTime >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::iterator arg2 ;
  std::list< Seiscomp::TravelTime >::size_type arg3 ;
  std::list< Seiscomp::TravelTime >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_insert" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_insert" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TravelTimeList_internal_insert" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeList_internal_insert" "', argument " "3"" of type '" "std::list< Seiscomp::TravelTime >::size_type""'");
  } 
  arg3 = static_cast< std::list< Seiscomp::TravelTime >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TravelTimeList_internal_insert" "', argument " "4"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_insert" "', argument " "4"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp4);
  {
    try {
      std_list_Sl_Seiscomp_TravelTime_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Seiscomp::TravelTime const &)*arg4);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TravelTimeList_internal_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< Seiscomp::TravelTime >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TravelTimeList_internal_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeList_internal_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< Seiscomp::TravelTime >::insert(std::list< Seiscomp::TravelTime >::iterator,std::list< Seiscomp::TravelTime >::value_type const &)\n"
    "    std::list< Seiscomp::TravelTime >::insert(std::list< Seiscomp::TravelTime >::iterator,std::list< Seiscomp::TravelTime >::size_type,std::list< Seiscomp::TravelTime >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_pop_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_pop_front" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      (arg1)->pop_front();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_push_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  std::list< Seiscomp::TravelTime >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_internal_push_front", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_push_front" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeList_internal_push_front" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeList_internal_push_front" "', argument " "2"" of type '" "std::list< Seiscomp::TravelTime >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< Seiscomp::TravelTime >::value_type * >(argp2);
  {
    try {
      (arg1)->push_front((std::list< Seiscomp::TravelTime >::value_type const &)*arg2);
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_internal_reverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_internal_reverse" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      (arg1)->reverse();
    }
    catch ( const Seiscomp::Config::OptionNotFoundException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TravelTimeList_internal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::list< Seiscomp::TravelTime > *arg1 = (std::list< Seiscomp::TravelTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TravelTimeList_internal" "', argument " "1"" of type '" "std::list< Seiscomp::TravelTime > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< Seiscomp::TravelTime > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TravelTimeList_internal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_Seiscomp__TravelTime_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TravelTimeList_internal_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Regions_getFlinnEngdahlRegion__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int *arg3 = (int *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::string result;
  
  arg3 = &temp3;
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Regions_getFlinnEngdahlRegion" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Regions_getFlinnEngdahlRegion" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = Seiscomp::Regions::getFlinnEngdahlRegion(arg1,arg2,arg3);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)), 0);
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags), 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Regions_getFlinnEngdahlRegion__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Regions_getFlinnEngdahlRegion" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Regions_getFlinnEngdahlRegion" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = Seiscomp::Regions::getFlinnEngdahlRegion(arg1,arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Regions_getFlinnEngdahlRegion(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Regions_getFlinnEngdahlRegion", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Regions_getFlinnEngdahlRegion__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Regions_getFlinnEngdahlRegion__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Regions_getFlinnEngdahlRegion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::Regions::getFlinnEngdahlRegion(double,double,int *)\n"
    "    Seiscomp::Regions::getFlinnEngdahlRegion(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Regions_getFlinnEngdahlRegionsCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Regions_getFlinnEngdahlRegionsCount", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (int)Seiscomp::Regions::getFlinnEngdahlRegionsCount();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Regions_getFlinnEngdahlRegionById(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Regions_getFlinnEngdahlRegionById" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = Seiscomp::Regions::getFlinnEngdahlRegionById(arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Regions_load(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Regions_load", 0, 0, 0)) SWIG_fail;
  {
    try {
      Seiscomp::Regions::load();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Regions_getRegionName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Regions_getRegionName", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Regions_getRegionName" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Regions_getRegionName" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = Seiscomp::Regions::getRegionName(arg1,arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Regions_polyRegions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Geo::PolyRegions *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Regions_polyRegions", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::Geo::PolyRegions *) &Seiscomp::Regions::polyRegions();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Geo__PolyRegions, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Regions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Regions *arg1 = (Seiscomp::Regions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Regions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Regions" "', argument " "1"" of type '" "Seiscomp::Regions *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Regions * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Regions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__Regions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SensorLocationDelegate_getSensorLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::SensorLocationDelegate *arg1 = (Seiscomp::Seismology::SensorLocationDelegate *) 0 ;
  Seiscomp::DataModel::Pick *arg2 = (Seiscomp::DataModel::Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Seiscomp::DataModel::SensorLocation *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SensorLocationDelegate_getSensorLocation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__SensorLocationDelegate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorLocationDelegate_getSensorLocation" "', argument " "1"" of type '" "Seiscomp::Seismology::SensorLocationDelegate const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::SensorLocationDelegate * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Seiscomp__DataModel__Pick, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SensorLocationDelegate_getSensorLocation" "', argument " "2"" of type '" "Seiscomp::DataModel::Pick *""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::DataModel::Pick * >(argp2);
  {
    try {
      result = (Seiscomp::DataModel::SensorLocation *)((Seiscomp::Seismology::SensorLocationDelegate const *)arg1)->getSensorLocation(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__DataModel__SensorLocation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SensorLocationDelegate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::SensorLocationDelegate *arg1 = (Seiscomp::Seismology::SensorLocationDelegate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__SensorLocationDelegate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SensorLocationDelegate" "', argument " "1"" of type '" "Seiscomp::Seismology::SensorLocationDelegate *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::SensorLocationDelegate * >(argp1);
  {
    try {
      if (arg1) arg1->decrementReferenceCount();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SensorLocationDelegate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__Seismology__SensorLocationDelegate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_LocatorInterface(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocatorInterface" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      if (arg1) arg1->decrementReferenceCount();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  Seiscomp::Seismology::LocatorInterface *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_Create" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (Seiscomp::Seismology::LocatorInterface *)Seiscomp::Seismology::LocatorInterface::Create((char const *)arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (result) result->incrementReferenceCount();
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_name" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      result = (std::string *) &((Seiscomp::Seismology::LocatorInterface const *)arg1)->name();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setSensorLocationDelegate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::Seismology::SensorLocationDelegate *arg2 = (Seiscomp::Seismology::SensorLocationDelegate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_setSensorLocationDelegate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_setSensorLocationDelegate" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Seiscomp__Seismology__SensorLocationDelegate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_setSensorLocationDelegate" "', argument " "2"" of type '" "Seiscomp::Seismology::SensorLocationDelegate *""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::Seismology::SensorLocationDelegate * >(argp2);
  {
    try {
      (arg1)->setSensorLocationDelegate(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_init(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::Config::Config *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_init", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_init" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Seiscomp__Config__Config,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_init" "', argument " "2"" of type '" "Seiscomp::Config::Config const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_init" "', argument " "2"" of type '" "Seiscomp::Config::Config const &""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::Config::Config * >(argp2);
  {
    try {
      result = (bool)(arg1)->init((Seiscomp::Config::Config const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_parameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Seiscomp::Seismology::LocatorInterface::IDList result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_parameters" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      result = ((Seiscomp::Seismology::LocatorInterface const *)arg1)->parameters();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_parameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_parameter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_parameter" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_parameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_parameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((Seiscomp::Seismology::LocatorInterface const *)arg1)->parameter((std::string const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_setParameter", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_setParameter" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_setParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_setParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocatorInterface_setParameter" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_setParameter" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->setParameter((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_profiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Seiscomp::Seismology::LocatorInterface::IDList result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_profiles" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      result = ((Seiscomp::Seismology::LocatorInterface const *)arg1)->profiles();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setProfile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_setProfile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_setProfile" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_setProfile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_setProfile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setProfile((std::string const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_capabilities(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_capabilities" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      result = (int)((Seiscomp::Seismology::LocatorInterface const *)arg1)->capabilities();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_locate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::Seismology::LocatorInterface::PickList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Seiscomp::DataModel::Origin *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_locate" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_locate" "', argument " "2"" of type '" "Seiscomp::Seismology::LocatorInterface::PickList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_locate" "', argument " "2"" of type '" "Seiscomp::Seismology::LocatorInterface::PickList &""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface::PickList * >(argp2);
  {
    try {
      result = (Seiscomp::DataModel::Origin *)(arg1)->locate(*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__DataModel__Origin, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_locate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::Seismology::LocatorInterface::PickList *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  Seiscomp::Core::Time *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  Seiscomp::DataModel::Origin *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_locate" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_locate" "', argument " "2"" of type '" "Seiscomp::Seismology::LocatorInterface::PickList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_locate" "', argument " "2"" of type '" "Seiscomp::Seismology::LocatorInterface::PickList &""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface::PickList * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocatorInterface_locate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LocatorInterface_locate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LocatorInterface_locate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_Seiscomp__Core__Time,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LocatorInterface_locate" "', argument " "6"" of type '" "Seiscomp::Core::Time const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LocatorInterface_locate" "', argument " "6"" of type '" "Seiscomp::Core::Time const &""'"); 
  }
  arg6 = reinterpret_cast< Seiscomp::Core::Time * >(argp6);
  {
    try {
      result = (Seiscomp::DataModel::Origin *)(arg1)->locate(*arg2,arg3,arg4,arg5,(Seiscomp::Core::Time const &)*arg6);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__DataModel__Origin, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_locate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocatorInterface_locate", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LocatorInterface_locate__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_Seiscomp__Core__Time, SWIG_POINTER_NO_NULL | 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_LocatorInterface_locate__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocatorInterface_locate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::Seismology::LocatorInterface::locate(Seiscomp::Seismology::LocatorInterface::PickList &)\n"
    "    Seiscomp::Seismology::LocatorInterface::locate(Seiscomp::Seismology::LocatorInterface::PickList &,double,double,double,Seiscomp::Core::Time const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_relocate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::DataModel::Origin *arg2 = (Seiscomp::DataModel::Origin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Seiscomp::DataModel::Origin *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_relocate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_relocate" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Seiscomp__DataModel__Origin, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_relocate" "', argument " "2"" of type '" "Seiscomp::DataModel::Origin const *""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::DataModel::Origin * >(argp2);
  {
    try {
      result = (Seiscomp::DataModel::Origin *)(arg1)->relocate((Seiscomp::DataModel::Origin const *)arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__DataModel__Origin, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_lastMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::Seismology::LocatorInterface::MessageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_lastMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_lastMessage" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocatorInterface_lastMessage" "', argument " "2"" of type '" "Seiscomp::Seismology::LocatorInterface::MessageType""'");
  } 
  arg2 = static_cast< Seiscomp::Seismology::LocatorInterface::MessageType >(val2);
  {
    try {
      result = ((Seiscomp::Seismology::LocatorInterface const *)arg1)->lastMessage(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_supports(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::Seismology::LocatorInterface::Capability arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_supports", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_supports" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocatorInterface_supports" "', argument " "2"" of type '" "Seiscomp::Seismology::LocatorInterface::Capability""'");
  } 
  arg2 = static_cast< Seiscomp::Seismology::LocatorInterface::Capability >(val2);
  {
    try {
      result = (bool)((Seiscomp::Seismology::LocatorInterface const *)arg1)->supports(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setFixedDepth__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_setFixedDepth" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocatorInterface_setFixedDepth" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocatorInterface_setFixedDepth" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFixedDepth(arg2,arg3);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setFixedDepth__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_setFixedDepth" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocatorInterface_setFixedDepth" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFixedDepth(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setFixedDepth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocatorInterface_setFixedDepth", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocatorInterface_setFixedDepth__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LocatorInterface_setFixedDepth__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocatorInterface_setFixedDepth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::Seismology::LocatorInterface::setFixedDepth(double,bool)\n"
    "    Seiscomp::Seismology::LocatorInterface::setFixedDepth(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_useFixedDepth__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_useFixedDepth" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocatorInterface_useFixedDepth" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->useFixedDepth(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_useFixedDepth__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_useFixedDepth" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      (arg1)->useFixedDepth();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_useFixedDepth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocatorInterface_useFixedDepth", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LocatorInterface_useFixedDepth__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocatorInterface_useFixedDepth__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocatorInterface_useFixedDepth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::Seismology::LocatorInterface::useFixedDepth(bool)\n"
    "    Seiscomp::Seismology::LocatorInterface::useFixedDepth()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_fixedDepth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_fixedDepth" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      result = (double)((Seiscomp::Seismology::LocatorInterface const *)arg1)->fixedDepth();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_usingFixedDepth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_usingFixedDepth" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      result = (bool)((Seiscomp::Seismology::LocatorInterface const *)arg1)->usingFixedDepth();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_releaseDepth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_releaseDepth" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      (arg1)->releaseDepth();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setDistanceCutOff(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_setDistanceCutOff", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_setDistanceCutOff" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocatorInterface_setDistanceCutOff" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDistanceCutOff(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_releaseDistanceCutOff(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_releaseDistanceCutOff" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      (arg1)->releaseDistanceCutOff();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_isInitialLocationIgnored(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_isInitialLocationIgnored" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  {
    try {
      result = (bool)((Seiscomp::Seismology::LocatorInterface const *)arg1)->isInitialLocationIgnored();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_setIgnoreInitialLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_setIgnoreInitialLocation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_setIgnoreInitialLocation" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocatorInterface_setIgnoreInitialLocation" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setIgnoreInitialLocation(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_getPick(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::DataModel::Arrival *arg2 = (Seiscomp::DataModel::Arrival *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Seiscomp::DataModel::Pick *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_getPick", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_getPick" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Seiscomp__DataModel__Arrival, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_getPick" "', argument " "2"" of type '" "Seiscomp::DataModel::Arrival *""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::DataModel::Arrival * >(argp2);
  {
    try {
      result = (Seiscomp::DataModel::Pick *)((Seiscomp::Seismology::LocatorInterface const *)arg1)->getPick(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__DataModel__Pick, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocatorInterface_getSensorLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorInterface *arg1 = (Seiscomp::Seismology::LocatorInterface *) 0 ;
  Seiscomp::DataModel::Pick *arg2 = (Seiscomp::DataModel::Pick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Seiscomp::DataModel::SensorLocation *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocatorInterface_getSensorLocation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocatorInterface_getSensorLocation" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorInterface * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Seiscomp__DataModel__Pick, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocatorInterface_getSensorLocation" "', argument " "2"" of type '" "Seiscomp::DataModel::Pick *""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::DataModel::Pick * >(argp2);
  {
    try {
      result = (Seiscomp::DataModel::SensorLocation *)((Seiscomp::Seismology::LocatorInterface const *)arg1)->getSensorLocation(arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__DataModel__SensorLocation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocatorInterface_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__Seismology__LocatorInterface, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PickNotFoundException__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::PickNotFoundException *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::Seismology::PickNotFoundException *)new Seiscomp::Seismology::PickNotFoundException();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Seismology__PickNotFoundException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PickNotFoundException__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Seiscomp::Seismology::PickNotFoundException *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PickNotFoundException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_PickNotFoundException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Seiscomp::Seismology::PickNotFoundException *)new Seiscomp::Seismology::PickNotFoundException((std::string const &)*arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Seismology__PickNotFoundException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PickNotFoundException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PickNotFoundException", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PickNotFoundException__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PickNotFoundException__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PickNotFoundException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::Seismology::PickNotFoundException::PickNotFoundException()\n"
    "    Seiscomp::Seismology::PickNotFoundException::PickNotFoundException(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PickNotFoundException(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::PickNotFoundException *arg1 = (Seiscomp::Seismology::PickNotFoundException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__PickNotFoundException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PickNotFoundException" "', argument " "1"" of type '" "Seiscomp::Seismology::PickNotFoundException *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::PickNotFoundException * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PickNotFoundException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__Seismology__PickNotFoundException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PickNotFoundException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LocatorException__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorException *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::Seismology::LocatorException *)new Seiscomp::Seismology::LocatorException();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Seismology__LocatorException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocatorException__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Seiscomp::Seismology::LocatorException *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LocatorException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_LocatorException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Seiscomp::Seismology::LocatorException *)new Seiscomp::Seismology::LocatorException((std::string const &)*arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Seismology__LocatorException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocatorException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LocatorException", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LocatorException__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LocatorException__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LocatorException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::Seismology::LocatorException::LocatorException()\n"
    "    Seiscomp::Seismology::LocatorException::LocatorException(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LocatorException(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::LocatorException *arg1 = (Seiscomp::Seismology::LocatorException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__LocatorException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocatorException" "', argument " "1"" of type '" "Seiscomp::Seismology::LocatorException *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::LocatorException * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocatorException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__Seismology__LocatorException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LocatorException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StationNotFoundException__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::StationNotFoundException *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::Seismology::StationNotFoundException *)new Seiscomp::Seismology::StationNotFoundException();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Seismology__StationNotFoundException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StationNotFoundException__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Seiscomp::Seismology::StationNotFoundException *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StationNotFoundException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_StationNotFoundException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Seiscomp::Seismology::StationNotFoundException *)new Seiscomp::Seismology::StationNotFoundException((std::string const &)*arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Seismology__StationNotFoundException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StationNotFoundException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_StationNotFoundException", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_StationNotFoundException__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StationNotFoundException__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StationNotFoundException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::Seismology::StationNotFoundException::StationNotFoundException()\n"
    "    Seiscomp::Seismology::StationNotFoundException::StationNotFoundException(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_StationNotFoundException(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::Seismology::StationNotFoundException *arg1 = (Seiscomp::Seismology::StationNotFoundException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__Seismology__StationNotFoundException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StationNotFoundException" "', argument " "1"" of type '" "Seiscomp::Seismology::StationNotFoundException *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::Seismology::StationNotFoundException * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StationNotFoundException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__Seismology__StationNotFoundException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StationNotFoundException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_arrivalToFlags(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::DataModel::Arrival *arg1 = (Seiscomp::DataModel::Arrival *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__DataModel__Arrival, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrivalToFlags" "', argument " "1"" of type '" "Seiscomp::DataModel::Arrival const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::DataModel::Arrival * >(argp1);
  {
    try {
      result = (int)Seiscomp::Seismology::arrivalToFlags((Seiscomp::DataModel::Arrival const *)arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flagsToArrival(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::DataModel::Arrival *arg1 = (Seiscomp::DataModel::Arrival *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "flagsToArrival", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__DataModel__Arrival, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flagsToArrival" "', argument " "1"" of type '" "Seiscomp::DataModel::Arrival *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::DataModel::Arrival * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "flagsToArrival" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      Seiscomp::Seismology::flagsToArrival(arg1,arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileNotFoundError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Seiscomp::FileNotFoundError *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileNotFoundError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_FileNotFoundError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Seiscomp::FileNotFoundError *)new Seiscomp::FileNotFoundError((std::string const &)*arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__FileNotFoundError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileNotFoundError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::FileNotFoundError *arg1 = (Seiscomp::FileNotFoundError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__FileNotFoundError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileNotFoundError" "', argument " "1"" of type '" "Seiscomp::FileNotFoundError *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::FileNotFoundError * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileNotFoundError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__FileNotFoundError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FileNotFoundError_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MultipleModelsError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Seiscomp::MultipleModelsError *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultipleModelsError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_MultipleModelsError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Seiscomp::MultipleModelsError *)new Seiscomp::MultipleModelsError((std::string const &)*arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__MultipleModelsError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultipleModelsError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::MultipleModelsError *arg1 = (Seiscomp::MultipleModelsError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__MultipleModelsError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultipleModelsError" "', argument " "1"" of type '" "Seiscomp::MultipleModelsError *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::MultipleModelsError * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultipleModelsError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__MultipleModelsError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MultipleModelsError_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NoPhaseError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::NoPhaseError *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_NoPhaseError", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::NoPhaseError *)new Seiscomp::NoPhaseError();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__NoPhaseError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NoPhaseError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::NoPhaseError *arg1 = (Seiscomp::NoPhaseError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__NoPhaseError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoPhaseError" "', argument " "1"" of type '" "Seiscomp::NoPhaseError *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::NoPhaseError * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NoPhaseError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__NoPhaseError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NoPhaseError_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TravelTime__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::TravelTime *)new Seiscomp::TravelTime();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TravelTime__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  Seiscomp::TravelTime *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TravelTime" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_TravelTime" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TravelTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TravelTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TravelTime" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TravelTime" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TravelTime" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (Seiscomp::TravelTime *)new Seiscomp::TravelTime((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TravelTime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_TravelTime", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_TravelTime__SWIG_0(self, argc, argv);
  }
  if (argc == 6) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_TravelTime__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TravelTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::TravelTime::TravelTime()\n"
    "    Seiscomp::TravelTime::TravelTime(std::string const &,double,double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTime___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  Seiscomp::TravelTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime___eq__" "', argument " "1"" of type '" "Seiscomp::TravelTime const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTime___eq__" "', argument " "2"" of type '" "Seiscomp::TravelTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTime___eq__" "', argument " "2"" of type '" "Seiscomp::TravelTime const &""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::TravelTime * >(argp2);
  {
    try {
      result = (bool)((Seiscomp::TravelTime const *)arg1)->operator ==((Seiscomp::TravelTime const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_TravelTime___lt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  Seiscomp::TravelTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime___lt__" "', argument " "1"" of type '" "Seiscomp::TravelTime const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Seiscomp__TravelTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTime___lt__" "', argument " "2"" of type '" "Seiscomp::TravelTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTime___lt__" "', argument " "2"" of type '" "Seiscomp::TravelTime const &""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::TravelTime * >(argp2);
  {
    try {
      result = (bool)((Seiscomp::TravelTime const *)arg1)->operator <((Seiscomp::TravelTime const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_TravelTime_phase_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime_phase_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_phase_set" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTime_phase_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTime_phase_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->phase = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_phase_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_phase_get" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  result = (std::string *) & ((arg1)->phase);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_time_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime_time_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_time_set" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTime_time_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_time_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_time_get" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  result = (double) ((arg1)->time);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_dtdd_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime_dtdd_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_dtdd_set" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTime_dtdd_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dtdd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_dtdd_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_dtdd_get" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  result = (double) ((arg1)->dtdd);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_dtdh_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime_dtdh_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_dtdh_set" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTime_dtdh_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dtdh = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_dtdh_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_dtdh_get" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  result = (double) ((arg1)->dtdh);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_dddp_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime_dddp_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_dddp_set" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTime_dddp_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dddp = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_dddp_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_dddp_get" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  result = (double) ((arg1)->dddp);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_takeoff_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime_takeoff_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_takeoff_set" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTime_takeoff_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->takeoff = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_takeoff_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_takeoff_get" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  result = (double) ((arg1)->takeoff);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_azi_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  Seiscomp::Core::Optional< double > *arg2 = (Seiscomp::Core::Optional< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTime_azi_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_azi_set" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Seiscomp__Core__OptionalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTime_azi_set" "', argument " "2"" of type '" "Seiscomp::Core::Optional< double > *""'"); 
  }
  arg2 = reinterpret_cast< Seiscomp::Core::Optional< double > * >(argp2);
  if (arg1) (arg1)->azi = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTime_azi_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Seiscomp::Core::Optional< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTime_azi_get" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  result = (Seiscomp::Core::Optional< double > *)& ((arg1)->azi);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__Core__OptionalT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TravelTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTime *arg1 = (Seiscomp::TravelTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TravelTime" "', argument " "1"" of type '" "Seiscomp::TravelTime *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTime * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TravelTime_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__TravelTime, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TravelTime_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_TravelTimeList_isEmpty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_isEmpty" "', argument " "1"" of type '" "Seiscomp::TravelTimeList *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  {
    try {
      result = (bool)(arg1)->isEmpty();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_sortByTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_sortByTime" "', argument " "1"" of type '" "Seiscomp::TravelTimeList *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  {
    try {
      (arg1)->sortByTime();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_depth_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_depth_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_depth_set" "', argument " "1"" of type '" "Seiscomp::TravelTimeList *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_depth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->depth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_depth_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_depth_get" "', argument " "1"" of type '" "Seiscomp::TravelTimeList *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  result = (double) ((arg1)->depth);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_delta_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeList_delta_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_delta_set" "', argument " "1"" of type '" "Seiscomp::TravelTimeList *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeList_delta_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->delta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeList_delta_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeList_delta_get" "', argument " "1"" of type '" "Seiscomp::TravelTimeList *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  result = (double) ((arg1)->delta);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TravelTimeList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_TravelTimeList", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::TravelTimeList *)new Seiscomp::TravelTimeList();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TravelTimeList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TravelTimeList" "', argument " "1"" of type '" "Seiscomp::TravelTimeList *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  {
    try {
      delete arg1;
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TravelTimeList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TravelTimeList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_TravelTimeTableInterface(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TravelTimeTableInterface" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  {
    try {
      if (arg1) arg1->decrementReferenceCount();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  Seiscomp::TravelTimeTableInterface *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_Create" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (Seiscomp::TravelTimeTableInterface *)Seiscomp::TravelTimeTableInterface::Create((char const *)arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (result) result->incrementReferenceCount();
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_setModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeTableInterface_setModel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_setModel" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTableInterface_setModel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeTableInterface_setModel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->setModel((std::string const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_model(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_model" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  {
    try {
      result = (std::string *) &((Seiscomp::TravelTimeTableInterface const *)arg1)->model();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_compute__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  Seiscomp::TravelTimeList *result = 0 ;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTableInterface_compute" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTableInterface_compute" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (Seiscomp::TravelTimeList *)(arg1)->compute(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_compute__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  Seiscomp::TravelTimeList *result = 0 ;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTableInterface_compute" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (Seiscomp::TravelTimeList *)(arg1)->compute(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_compute__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  Seiscomp::TravelTimeList *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTableInterface_compute" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (Seiscomp::TravelTimeList *)(arg1)->compute(arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_compute__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTableInterface_compute" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTableInterface_compute" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "TravelTimeTableInterface_compute" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (arg1)->compute((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_compute__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTableInterface_compute" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTableInterface_compute" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (arg1)->compute((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_compute__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTableInterface_compute" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (arg1)->compute((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_compute(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeTableInterface_compute", 0, 9, argv))) SWIG_fail;
  --argc;
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TravelTimeTableInterface_compute__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TravelTimeTableInterface_compute__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TravelTimeTableInterface_compute__SWIG_5(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TravelTimeTableInterface_compute__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TravelTimeTableInterface_compute__SWIG_4(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_TravelTimeTableInterface_compute__SWIG_3(self, argc, argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeTableInterface_compute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::TravelTimeTableInterface::compute(double,double,double,double,double,double,int)\n"
    "    Seiscomp::TravelTimeTableInterface::compute(double,double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTableInterface::compute(double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTableInterface::compute(char const *,double,double,double,double,double,double,int)\n"
    "    Seiscomp::TravelTimeTableInterface::compute(char const *,double,double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTableInterface::compute(char const *,double,double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeFirst__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (arg1)->computeFirst(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeFirst__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (arg1)->computeFirst(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeFirst__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_computeFirst" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (arg1)->computeFirst(arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeFirst(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeTableInterface_computeFirst", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TravelTimeTableInterface_computeFirst__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TravelTimeTableInterface_computeFirst__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TravelTimeTableInterface_computeFirst__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeTableInterface_computeFirst'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::TravelTimeTableInterface::computeFirst(double,double,double,double,double,double,int)\n"
    "    Seiscomp::TravelTimeTableInterface::computeFirst(double,double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTableInterface::computeFirst(double,double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeTime__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (double)(arg1)->computeTime((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeTime__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (double)(arg1)->computeTime((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeTime__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTableInterface *arg1 = (Seiscomp::TravelTimeTableInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "1"" of type '" "Seiscomp::TravelTimeTableInterface *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTableInterface * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTableInterface_computeTime" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (double)(arg1)->computeTime((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTableInterface_computeTime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeTableInterface_computeTime", 0, 9, argv))) SWIG_fail;
  --argc;
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TravelTimeTableInterface_computeTime__SWIG_2(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TravelTimeTableInterface_computeTime__SWIG_1(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_TravelTimeTableInterface_computeTime__SWIG_0(self, argc, argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeTableInterface_computeTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::TravelTimeTableInterface::computeTime(char const *,double,double,double,double,double,double,int)\n"
    "    Seiscomp::TravelTimeTableInterface::computeTime(char const *,double,double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTableInterface::computeTime(char const *,double,double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *TravelTimeTableInterface_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__TravelTimeTableInterface, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TravelTimeTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_TravelTimeTable", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Seiscomp::TravelTimeTable *)new Seiscomp::TravelTimeTable();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeTable, SWIG_POINTER_NEW |  0 );
  if (result) result->incrementReferenceCount();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_setModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TravelTimeTable_setModel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_setModel" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTable_setModel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TravelTimeTable_setModel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->setModel((std::string const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_model(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_model" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  {
    try {
      result = (std::string *) &((Seiscomp::TravelTimeTable const *)arg1)->model();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_compute__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  Seiscomp::TravelTimeList *result = 0 ;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTable_compute" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTable_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTable_compute" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (Seiscomp::TravelTimeList *)(arg1)->compute(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_compute__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  Seiscomp::TravelTimeList *result = 0 ;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTable_compute" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTable_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (Seiscomp::TravelTimeList *)(arg1)->compute(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_compute__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  Seiscomp::TravelTimeList *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTable_compute" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (Seiscomp::TravelTimeList *)(arg1)->compute(arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTimeList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_compute__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTable_compute" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTable_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTable_compute" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "TravelTimeTable_compute" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (arg1)->compute((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_compute__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTable_compute" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTable_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTable_compute" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (arg1)->compute((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_compute__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_compute" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TravelTimeTable_compute" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_compute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_compute" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_compute" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_compute" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTable_compute" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (arg1)->compute((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_compute(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeTable_compute", 0, 9, argv))) SWIG_fail;
  --argc;
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TravelTimeTable_compute__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TravelTimeTable_compute__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TravelTimeTable_compute__SWIG_5(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TravelTimeTable_compute__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TravelTimeTable_compute__SWIG_4(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_TravelTimeTable_compute__SWIG_3(self, argc, argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeTable_compute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::TravelTimeTable::compute(double,double,double,double,double,double,int)\n"
    "    Seiscomp::TravelTimeTable::compute(double,double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTable::compute(double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTable::compute(char const *,double,double,double,double,double,double,int)\n"
    "    Seiscomp::TravelTimeTable::compute(char const *,double,double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTable::compute(char const *,double,double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_computeFirst__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_computeFirst" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTable_computeFirst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_computeFirst" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_computeFirst" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_computeFirst" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_computeFirst" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTable_computeFirst" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TravelTimeTable_computeFirst" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (arg1)->computeFirst(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_computeFirst__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_computeFirst" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTable_computeFirst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_computeFirst" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_computeFirst" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_computeFirst" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_computeFirst" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TravelTimeTable_computeFirst" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (arg1)->computeFirst(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_computeFirst__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  Seiscomp::TravelTime result;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TravelTimeTable_computeFirst" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TravelTimeTable_computeFirst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TravelTimeTable_computeFirst" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TravelTimeTable_computeFirst" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TravelTimeTable_computeFirst" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TravelTimeTable_computeFirst" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (arg1)->computeFirst(arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Seiscomp::TravelTime(result)), SWIGTYPE_p_Seiscomp__TravelTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TravelTimeTable_computeFirst(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TravelTimeTable_computeFirst", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TravelTimeTable_computeFirst__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TravelTimeTable_computeFirst__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Seiscomp__TravelTimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TravelTimeTable_computeFirst__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TravelTimeTable_computeFirst'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Seiscomp::TravelTimeTable::computeFirst(double,double,double,double,double,double,int)\n"
    "    Seiscomp::TravelTimeTable::computeFirst(double,double,double,double,double,double)\n"
    "    Seiscomp::TravelTimeTable::computeFirst(double,double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TravelTimeTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeTable *arg1 = (Seiscomp::TravelTimeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TravelTimeTable" "', argument " "1"" of type '" "Seiscomp::TravelTimeTable *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeTable * >(argp1);
  {
    try {
      if (arg1) arg1->decrementReferenceCount();
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TravelTimeTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Seiscomp__TravelTimeTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TravelTimeTable_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ellipcorr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject *swig_obj[7] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ellipcorr", 7, 7, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ellipcorr" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ellipcorr" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ellipcorr" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ellipcorr" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ellipcorr" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ellipcorr" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ellipcorr" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ellipcorr" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ellipcorr" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      result = (bool)Seiscomp::ellipcorr((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,*arg7);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getPhase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  Seiscomp::TravelTime *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "getPhase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPhase" "', argument " "1"" of type '" "Seiscomp::TravelTimeList const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getPhase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "getPhase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Seiscomp::TravelTime *)Seiscomp::getPhase((Seiscomp::TravelTimeList const *)arg1,(std::string const &)*arg2);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_firstArrivalP(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Seiscomp::TravelTimeList *arg1 = (Seiscomp::TravelTimeList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Seiscomp::TravelTime *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Seiscomp__TravelTimeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "firstArrivalP" "', argument " "1"" of type '" "Seiscomp::TravelTimeList const *""'"); 
  }
  arg1 = reinterpret_cast< Seiscomp::TravelTimeList * >(argp1);
  {
    try {
      result = (Seiscomp::TravelTime *)Seiscomp::firstArrivalP((Seiscomp::TravelTimeList const *)arg1);
    }
    catch ( const Seiscomp::Core::ValueException &e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch ( const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch ( ... ) {
      SWIG_exception(SWIG_UnknownError, "C++ anonymous exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Seiscomp__TravelTime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "TravelTimeList_internal_iterator", _wrap_TravelTimeList_internal_iterator, METH_O, "TravelTimeList_internal_iterator(TravelTimeList_internal self) -> SwigPyIterator"},
	 { "TravelTimeList_internal___nonzero__", _wrap_TravelTimeList_internal___nonzero__, METH_O, "TravelTimeList_internal___nonzero__(TravelTimeList_internal self) -> bool"},
	 { "TravelTimeList_internal___bool__", _wrap_TravelTimeList_internal___bool__, METH_O, "TravelTimeList_internal___bool__(TravelTimeList_internal self) -> bool"},
	 { "TravelTimeList_internal___len__", _wrap_TravelTimeList_internal___len__, METH_O, "TravelTimeList_internal___len__(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::size_type"},
	 { "TravelTimeList_internal___getslice__", _wrap_TravelTimeList_internal___getslice__, METH_VARARGS, "TravelTimeList_internal___getslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j) -> TravelTimeList_internal"},
	 { "TravelTimeList_internal___setslice__", _wrap_TravelTimeList_internal___setslice__, METH_VARARGS, "\n"
		"TravelTimeList_internal___setslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j)\n"
		"TravelTimeList_internal___setslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j, TravelTimeList_internal v)\n"
		""},
	 { "TravelTimeList_internal___delslice__", _wrap_TravelTimeList_internal___delslice__, METH_VARARGS, "TravelTimeList_internal___delslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j)"},
	 { "TravelTimeList_internal___delitem__", _wrap_TravelTimeList_internal___delitem__, METH_VARARGS, "\n"
		"TravelTimeList_internal___delitem__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i)\n"
		"TravelTimeList_internal___delitem__(TravelTimeList_internal self, SWIGPY_SLICEOBJECT * slice)\n"
		""},
	 { "TravelTimeList_internal___getitem__", _wrap_TravelTimeList_internal___getitem__, METH_VARARGS, "\n"
		"TravelTimeList_internal___getitem__(TravelTimeList_internal self, SWIGPY_SLICEOBJECT * slice) -> TravelTimeList_internal\n"
		"TravelTimeList_internal___getitem__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i) -> TravelTime\n"
		""},
	 { "TravelTimeList_internal___setitem__", _wrap_TravelTimeList_internal___setitem__, METH_VARARGS, "\n"
		"TravelTimeList_internal___setitem__(TravelTimeList_internal self, SWIGPY_SLICEOBJECT * slice, TravelTimeList_internal v)\n"
		"TravelTimeList_internal___setitem__(TravelTimeList_internal self, SWIGPY_SLICEOBJECT * slice)\n"
		"TravelTimeList_internal___setitem__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, TravelTime x)\n"
		""},
	 { "TravelTimeList_internal_pop", _wrap_TravelTimeList_internal_pop, METH_O, "TravelTimeList_internal_pop(TravelTimeList_internal self) -> TravelTime"},
	 { "TravelTimeList_internal_append", _wrap_TravelTimeList_internal_append, METH_VARARGS, "TravelTimeList_internal_append(TravelTimeList_internal self, TravelTime x)"},
	 { "TravelTimeList_internal_empty", _wrap_TravelTimeList_internal_empty, METH_O, "TravelTimeList_internal_empty(TravelTimeList_internal self) -> bool"},
	 { "TravelTimeList_internal_size", _wrap_TravelTimeList_internal_size, METH_O, "TravelTimeList_internal_size(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::size_type"},
	 { "TravelTimeList_internal_swap", _wrap_TravelTimeList_internal_swap, METH_VARARGS, "TravelTimeList_internal_swap(TravelTimeList_internal self, TravelTimeList_internal v)"},
	 { "TravelTimeList_internal_begin", _wrap_TravelTimeList_internal_begin, METH_O, "TravelTimeList_internal_begin(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::iterator"},
	 { "TravelTimeList_internal_end", _wrap_TravelTimeList_internal_end, METH_O, "TravelTimeList_internal_end(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::iterator"},
	 { "TravelTimeList_internal_rbegin", _wrap_TravelTimeList_internal_rbegin, METH_O, "TravelTimeList_internal_rbegin(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::reverse_iterator"},
	 { "TravelTimeList_internal_rend", _wrap_TravelTimeList_internal_rend, METH_O, "TravelTimeList_internal_rend(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::reverse_iterator"},
	 { "TravelTimeList_internal_clear", _wrap_TravelTimeList_internal_clear, METH_O, "TravelTimeList_internal_clear(TravelTimeList_internal self)"},
	 { "TravelTimeList_internal_get_allocator", _wrap_TravelTimeList_internal_get_allocator, METH_O, "TravelTimeList_internal_get_allocator(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::allocator_type"},
	 { "TravelTimeList_internal_pop_back", _wrap_TravelTimeList_internal_pop_back, METH_O, "TravelTimeList_internal_pop_back(TravelTimeList_internal self)"},
	 { "TravelTimeList_internal_erase", _wrap_TravelTimeList_internal_erase, METH_VARARGS, "\n"
		"TravelTimeList_internal_erase(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator pos) -> std::list< Seiscomp::TravelTime >::iterator\n"
		"TravelTimeList_internal_erase(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator first, std::list< Seiscomp::TravelTime >::iterator last) -> std::list< Seiscomp::TravelTime >::iterator\n"
		""},
	 { "new_TravelTimeList_internal", _wrap_new_TravelTimeList_internal, METH_VARARGS, "\n"
		"TravelTimeList_internal()\n"
		"TravelTimeList_internal(TravelTimeList_internal other)\n"
		"TravelTimeList_internal(std::list< Seiscomp::TravelTime >::size_type size)\n"
		"new_TravelTimeList_internal(std::list< Seiscomp::TravelTime >::size_type size, TravelTime value) -> TravelTimeList_internal\n"
		""},
	 { "TravelTimeList_internal_push_back", _wrap_TravelTimeList_internal_push_back, METH_VARARGS, "TravelTimeList_internal_push_back(TravelTimeList_internal self, TravelTime x)"},
	 { "TravelTimeList_internal_front", _wrap_TravelTimeList_internal_front, METH_O, "TravelTimeList_internal_front(TravelTimeList_internal self) -> TravelTime"},
	 { "TravelTimeList_internal_back", _wrap_TravelTimeList_internal_back, METH_O, "TravelTimeList_internal_back(TravelTimeList_internal self) -> TravelTime"},
	 { "TravelTimeList_internal_assign", _wrap_TravelTimeList_internal_assign, METH_VARARGS, "TravelTimeList_internal_assign(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::size_type n, TravelTime x)"},
	 { "TravelTimeList_internal_resize", _wrap_TravelTimeList_internal_resize, METH_VARARGS, "\n"
		"TravelTimeList_internal_resize(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::size_type new_size)\n"
		"TravelTimeList_internal_resize(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::size_type new_size, TravelTime x)\n"
		""},
	 { "TravelTimeList_internal_insert", _wrap_TravelTimeList_internal_insert, METH_VARARGS, "\n"
		"TravelTimeList_internal_insert(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator pos, TravelTime x) -> std::list< Seiscomp::TravelTime >::iterator\n"
		"TravelTimeList_internal_insert(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator pos, std::list< Seiscomp::TravelTime >::size_type n, TravelTime x)\n"
		""},
	 { "TravelTimeList_internal_pop_front", _wrap_TravelTimeList_internal_pop_front, METH_O, "TravelTimeList_internal_pop_front(TravelTimeList_internal self)"},
	 { "TravelTimeList_internal_push_front", _wrap_TravelTimeList_internal_push_front, METH_VARARGS, "TravelTimeList_internal_push_front(TravelTimeList_internal self, TravelTime x)"},
	 { "TravelTimeList_internal_reverse", _wrap_TravelTimeList_internal_reverse, METH_O, "TravelTimeList_internal_reverse(TravelTimeList_internal self)"},
	 { "delete_TravelTimeList_internal", _wrap_delete_TravelTimeList_internal, METH_O, "delete_TravelTimeList_internal(TravelTimeList_internal self)"},
	 { "TravelTimeList_internal_swigregister", TravelTimeList_internal_swigregister, METH_O, NULL},
	 { "TravelTimeList_internal_swiginit", TravelTimeList_internal_swiginit, METH_VARARGS, NULL},
	 { "Regions_getFlinnEngdahlRegion", _wrap_Regions_getFlinnEngdahlRegion, METH_VARARGS, "Regions_getFlinnEngdahlRegion(double lat, double lon) -> std::string"},
	 { "Regions_getFlinnEngdahlRegionsCount", _wrap_Regions_getFlinnEngdahlRegionsCount, METH_NOARGS, "Regions_getFlinnEngdahlRegionsCount() -> int"},
	 { "Regions_getFlinnEngdahlRegionById", _wrap_Regions_getFlinnEngdahlRegionById, METH_O, "Regions_getFlinnEngdahlRegionById(int id) -> std::string"},
	 { "Regions_load", _wrap_Regions_load, METH_NOARGS, "Regions_load()"},
	 { "Regions_getRegionName", _wrap_Regions_getRegionName, METH_VARARGS, "Regions_getRegionName(double lat, double lon) -> std::string"},
	 { "Regions_polyRegions", _wrap_Regions_polyRegions, METH_NOARGS, "Regions_polyRegions() -> Seiscomp::Geo::PolyRegions &"},
	 { "delete_Regions", _wrap_delete_Regions, METH_O, "delete_Regions(Regions self)"},
	 { "Regions_swigregister", Regions_swigregister, METH_O, NULL},
	 { "SensorLocationDelegate_getSensorLocation", _wrap_SensorLocationDelegate_getSensorLocation, METH_VARARGS, "SensorLocationDelegate_getSensorLocation(SensorLocationDelegate self, Pick pick) -> SensorLocation"},
	 { "delete_SensorLocationDelegate", _wrap_delete_SensorLocationDelegate, METH_O, "delete_SensorLocationDelegate(SensorLocationDelegate self)"},
	 { "SensorLocationDelegate_swigregister", SensorLocationDelegate_swigregister, METH_O, NULL},
	 { "delete_LocatorInterface", _wrap_delete_LocatorInterface, METH_O, "delete_LocatorInterface(LocatorInterface self)"},
	 { "LocatorInterface_Create", _wrap_LocatorInterface_Create, METH_O, "LocatorInterface_Create(char const * algo) -> LocatorInterface"},
	 { "LocatorInterface_name", _wrap_LocatorInterface_name, METH_O, "LocatorInterface_name(LocatorInterface self) -> std::string const &"},
	 { "LocatorInterface_setSensorLocationDelegate", _wrap_LocatorInterface_setSensorLocationDelegate, METH_VARARGS, "LocatorInterface_setSensorLocationDelegate(LocatorInterface self, SensorLocationDelegate delegate)"},
	 { "LocatorInterface_init", _wrap_LocatorInterface_init, METH_VARARGS, "LocatorInterface_init(LocatorInterface self, Config config) -> bool"},
	 { "LocatorInterface_parameters", _wrap_LocatorInterface_parameters, METH_O, "LocatorInterface_parameters(LocatorInterface self) -> VectorStr"},
	 { "LocatorInterface_parameter", _wrap_LocatorInterface_parameter, METH_VARARGS, "LocatorInterface_parameter(LocatorInterface self, std::string const & name) -> std::string"},
	 { "LocatorInterface_setParameter", _wrap_LocatorInterface_setParameter, METH_VARARGS, "LocatorInterface_setParameter(LocatorInterface self, std::string const & name, std::string const & value) -> bool"},
	 { "LocatorInterface_profiles", _wrap_LocatorInterface_profiles, METH_O, "LocatorInterface_profiles(LocatorInterface self) -> VectorStr"},
	 { "LocatorInterface_setProfile", _wrap_LocatorInterface_setProfile, METH_VARARGS, "LocatorInterface_setProfile(LocatorInterface self, std::string const & name)"},
	 { "LocatorInterface_capabilities", _wrap_LocatorInterface_capabilities, METH_O, "LocatorInterface_capabilities(LocatorInterface self) -> int"},
	 { "LocatorInterface_locate", _wrap_LocatorInterface_locate, METH_VARARGS, "\n"
		"LocatorInterface_locate(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::PickList & pickList) -> Origin\n"
		"LocatorInterface_locate(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::PickList & pickList, double initLat, double initLon, double initDepth, Time initTime) -> Origin\n"
		""},
	 { "LocatorInterface_relocate", _wrap_LocatorInterface_relocate, METH_VARARGS, "LocatorInterface_relocate(LocatorInterface self, Origin origin) -> Origin"},
	 { "LocatorInterface_lastMessage", _wrap_LocatorInterface_lastMessage, METH_VARARGS, "LocatorInterface_lastMessage(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::MessageType arg2) -> std::string"},
	 { "LocatorInterface_supports", _wrap_LocatorInterface_supports, METH_VARARGS, "LocatorInterface_supports(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::Capability arg2) -> bool"},
	 { "LocatorInterface_setFixedDepth", _wrap_LocatorInterface_setFixedDepth, METH_VARARGS, "LocatorInterface_setFixedDepth(LocatorInterface self, double depth, bool use=True)"},
	 { "LocatorInterface_useFixedDepth", _wrap_LocatorInterface_useFixedDepth, METH_VARARGS, "LocatorInterface_useFixedDepth(LocatorInterface self, bool use=True)"},
	 { "LocatorInterface_fixedDepth", _wrap_LocatorInterface_fixedDepth, METH_O, "LocatorInterface_fixedDepth(LocatorInterface self) -> double"},
	 { "LocatorInterface_usingFixedDepth", _wrap_LocatorInterface_usingFixedDepth, METH_O, "LocatorInterface_usingFixedDepth(LocatorInterface self) -> bool"},
	 { "LocatorInterface_releaseDepth", _wrap_LocatorInterface_releaseDepth, METH_O, "LocatorInterface_releaseDepth(LocatorInterface self)"},
	 { "LocatorInterface_setDistanceCutOff", _wrap_LocatorInterface_setDistanceCutOff, METH_VARARGS, "LocatorInterface_setDistanceCutOff(LocatorInterface self, double distance)"},
	 { "LocatorInterface_releaseDistanceCutOff", _wrap_LocatorInterface_releaseDistanceCutOff, METH_O, "LocatorInterface_releaseDistanceCutOff(LocatorInterface self)"},
	 { "LocatorInterface_isInitialLocationIgnored", _wrap_LocatorInterface_isInitialLocationIgnored, METH_O, "LocatorInterface_isInitialLocationIgnored(LocatorInterface self) -> bool"},
	 { "LocatorInterface_setIgnoreInitialLocation", _wrap_LocatorInterface_setIgnoreInitialLocation, METH_VARARGS, "LocatorInterface_setIgnoreInitialLocation(LocatorInterface self, bool f)"},
	 { "LocatorInterface_getPick", _wrap_LocatorInterface_getPick, METH_VARARGS, "LocatorInterface_getPick(LocatorInterface self, Arrival arrival) -> Pick"},
	 { "LocatorInterface_getSensorLocation", _wrap_LocatorInterface_getSensorLocation, METH_VARARGS, "LocatorInterface_getSensorLocation(LocatorInterface self, Pick pick) -> SensorLocation"},
	 { "LocatorInterface_swigregister", LocatorInterface_swigregister, METH_O, NULL},
	 { "new_PickNotFoundException", _wrap_new_PickNotFoundException, METH_VARARGS, "\n"
		"PickNotFoundException()\n"
		"new_PickNotFoundException(std::string const & str) -> PickNotFoundException\n"
		""},
	 { "delete_PickNotFoundException", _wrap_delete_PickNotFoundException, METH_O, "delete_PickNotFoundException(PickNotFoundException self)"},
	 { "PickNotFoundException_swigregister", PickNotFoundException_swigregister, METH_O, NULL},
	 { "PickNotFoundException_swiginit", PickNotFoundException_swiginit, METH_VARARGS, NULL},
	 { "new_LocatorException", _wrap_new_LocatorException, METH_VARARGS, "\n"
		"LocatorException()\n"
		"new_LocatorException(std::string const & str) -> LocatorException\n"
		""},
	 { "delete_LocatorException", _wrap_delete_LocatorException, METH_O, "delete_LocatorException(LocatorException self)"},
	 { "LocatorException_swigregister", LocatorException_swigregister, METH_O, NULL},
	 { "LocatorException_swiginit", LocatorException_swiginit, METH_VARARGS, NULL},
	 { "new_StationNotFoundException", _wrap_new_StationNotFoundException, METH_VARARGS, "\n"
		"StationNotFoundException()\n"
		"new_StationNotFoundException(std::string const & str) -> StationNotFoundException\n"
		""},
	 { "delete_StationNotFoundException", _wrap_delete_StationNotFoundException, METH_O, "delete_StationNotFoundException(StationNotFoundException self)"},
	 { "StationNotFoundException_swigregister", StationNotFoundException_swigregister, METH_O, NULL},
	 { "StationNotFoundException_swiginit", StationNotFoundException_swiginit, METH_VARARGS, NULL},
	 { "arrivalToFlags", _wrap_arrivalToFlags, METH_O, "arrivalToFlags(Arrival arrival) -> int"},
	 { "flagsToArrival", _wrap_flagsToArrival, METH_VARARGS, "flagsToArrival(Arrival arrival, int flags)"},
	 { "new_FileNotFoundError", _wrap_new_FileNotFoundError, METH_O, "new_FileNotFoundError(std::string const & filename) -> FileNotFoundError"},
	 { "delete_FileNotFoundError", _wrap_delete_FileNotFoundError, METH_O, "delete_FileNotFoundError(FileNotFoundError self)"},
	 { "FileNotFoundError_swigregister", FileNotFoundError_swigregister, METH_O, NULL},
	 { "FileNotFoundError_swiginit", FileNotFoundError_swiginit, METH_VARARGS, NULL},
	 { "new_MultipleModelsError", _wrap_new_MultipleModelsError, METH_O, "new_MultipleModelsError(std::string const & model) -> MultipleModelsError"},
	 { "delete_MultipleModelsError", _wrap_delete_MultipleModelsError, METH_O, "delete_MultipleModelsError(MultipleModelsError self)"},
	 { "MultipleModelsError_swigregister", MultipleModelsError_swigregister, METH_O, NULL},
	 { "MultipleModelsError_swiginit", MultipleModelsError_swiginit, METH_VARARGS, NULL},
	 { "new_NoPhaseError", _wrap_new_NoPhaseError, METH_NOARGS, "new_NoPhaseError() -> NoPhaseError"},
	 { "delete_NoPhaseError", _wrap_delete_NoPhaseError, METH_O, "delete_NoPhaseError(NoPhaseError self)"},
	 { "NoPhaseError_swigregister", NoPhaseError_swigregister, METH_O, NULL},
	 { "NoPhaseError_swiginit", NoPhaseError_swiginit, METH_VARARGS, NULL},
	 { "new_TravelTime", _wrap_new_TravelTime, METH_VARARGS, "\n"
		"TravelTime()\n"
		"new_TravelTime(std::string const & _phase, double _time, double _dtdd, double _dtdh, double _dddp, double _takeoff) -> TravelTime\n"
		""},
	 { "TravelTime___eq__", _wrap_TravelTime___eq__, METH_VARARGS, "TravelTime___eq__(TravelTime self, TravelTime other) -> bool"},
	 { "TravelTime___lt__", _wrap_TravelTime___lt__, METH_VARARGS, "TravelTime___lt__(TravelTime self, TravelTime other) -> bool"},
	 { "TravelTime_phase_set", _wrap_TravelTime_phase_set, METH_VARARGS, "TravelTime_phase_set(TravelTime self, std::string const & phase)"},
	 { "TravelTime_phase_get", _wrap_TravelTime_phase_get, METH_O, "TravelTime_phase_get(TravelTime self) -> std::string const &"},
	 { "TravelTime_time_set", _wrap_TravelTime_time_set, METH_VARARGS, "TravelTime_time_set(TravelTime self, double time)"},
	 { "TravelTime_time_get", _wrap_TravelTime_time_get, METH_O, "TravelTime_time_get(TravelTime self) -> double"},
	 { "TravelTime_dtdd_set", _wrap_TravelTime_dtdd_set, METH_VARARGS, "TravelTime_dtdd_set(TravelTime self, double dtdd)"},
	 { "TravelTime_dtdd_get", _wrap_TravelTime_dtdd_get, METH_O, "TravelTime_dtdd_get(TravelTime self) -> double"},
	 { "TravelTime_dtdh_set", _wrap_TravelTime_dtdh_set, METH_VARARGS, "TravelTime_dtdh_set(TravelTime self, double dtdh)"},
	 { "TravelTime_dtdh_get", _wrap_TravelTime_dtdh_get, METH_O, "TravelTime_dtdh_get(TravelTime self) -> double"},
	 { "TravelTime_dddp_set", _wrap_TravelTime_dddp_set, METH_VARARGS, "TravelTime_dddp_set(TravelTime self, double dddp)"},
	 { "TravelTime_dddp_get", _wrap_TravelTime_dddp_get, METH_O, "TravelTime_dddp_get(TravelTime self) -> double"},
	 { "TravelTime_takeoff_set", _wrap_TravelTime_takeoff_set, METH_VARARGS, "TravelTime_takeoff_set(TravelTime self, double takeoff)"},
	 { "TravelTime_takeoff_get", _wrap_TravelTime_takeoff_get, METH_O, "TravelTime_takeoff_get(TravelTime self) -> double"},
	 { "TravelTime_azi_set", _wrap_TravelTime_azi_set, METH_VARARGS, "TravelTime_azi_set(TravelTime self, Seiscomp::Core::Optional< double > * azi)"},
	 { "TravelTime_azi_get", _wrap_TravelTime_azi_get, METH_O, "TravelTime_azi_get(TravelTime self) -> Seiscomp::Core::Optional< double > *"},
	 { "delete_TravelTime", _wrap_delete_TravelTime, METH_O, "delete_TravelTime(TravelTime self)"},
	 { "TravelTime_swigregister", TravelTime_swigregister, METH_O, NULL},
	 { "TravelTime_swiginit", TravelTime_swiginit, METH_VARARGS, NULL},
	 { "TravelTimeList_isEmpty", _wrap_TravelTimeList_isEmpty, METH_O, "TravelTimeList_isEmpty(TravelTimeList self) -> bool"},
	 { "TravelTimeList_sortByTime", _wrap_TravelTimeList_sortByTime, METH_O, "TravelTimeList_sortByTime(TravelTimeList self)"},
	 { "TravelTimeList_depth_set", _wrap_TravelTimeList_depth_set, METH_VARARGS, "TravelTimeList_depth_set(TravelTimeList self, double depth)"},
	 { "TravelTimeList_depth_get", _wrap_TravelTimeList_depth_get, METH_O, "TravelTimeList_depth_get(TravelTimeList self) -> double"},
	 { "TravelTimeList_delta_set", _wrap_TravelTimeList_delta_set, METH_VARARGS, "TravelTimeList_delta_set(TravelTimeList self, double delta)"},
	 { "TravelTimeList_delta_get", _wrap_TravelTimeList_delta_get, METH_O, "TravelTimeList_delta_get(TravelTimeList self) -> double"},
	 { "new_TravelTimeList", _wrap_new_TravelTimeList, METH_NOARGS, "new_TravelTimeList() -> TravelTimeList"},
	 { "delete_TravelTimeList", _wrap_delete_TravelTimeList, METH_O, "delete_TravelTimeList(TravelTimeList self)"},
	 { "TravelTimeList_swigregister", TravelTimeList_swigregister, METH_O, NULL},
	 { "TravelTimeList_swiginit", TravelTimeList_swiginit, METH_VARARGS, NULL},
	 { "delete_TravelTimeTableInterface", _wrap_delete_TravelTimeTableInterface, METH_O, "delete_TravelTimeTableInterface(TravelTimeTableInterface self)"},
	 { "TravelTimeTableInterface_Create", _wrap_TravelTimeTableInterface_Create, METH_O, "TravelTimeTableInterface_Create(char const * name) -> TravelTimeTableInterface"},
	 { "TravelTimeTableInterface_setModel", _wrap_TravelTimeTableInterface_setModel, METH_VARARGS, "TravelTimeTableInterface_setModel(TravelTimeTableInterface self, std::string const & model) -> bool"},
	 { "TravelTimeTableInterface_model", _wrap_TravelTimeTableInterface_model, METH_O, "TravelTimeTableInterface_model(TravelTimeTableInterface self) -> std::string const &"},
	 { "TravelTimeTableInterface_compute", _wrap_TravelTimeTableInterface_compute, METH_VARARGS, "\n"
		"TravelTimeTableInterface_compute(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2, double elev2=0., int ellc=1) -> TravelTimeList\n"
		"TravelTimeTableInterface_compute(TravelTimeTableInterface self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2, double elev2=0., int ellc=1) -> TravelTime\n"
		""},
	 { "TravelTimeTableInterface_computeFirst", _wrap_TravelTimeTableInterface_computeFirst, METH_VARARGS, "TravelTimeTableInterface_computeFirst(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2, double elev2=0., int ellc=1) -> TravelTime"},
	 { "TravelTimeTableInterface_computeTime", _wrap_TravelTimeTableInterface_computeTime, METH_VARARGS, "TravelTimeTableInterface_computeTime(TravelTimeTableInterface self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2, double elev2=0., int ellc=1) -> double"},
	 { "TravelTimeTableInterface_swigregister", TravelTimeTableInterface_swigregister, METH_O, NULL},
	 { "new_TravelTimeTable", _wrap_new_TravelTimeTable, METH_NOARGS, "new_TravelTimeTable() -> TravelTimeTable"},
	 { "TravelTimeTable_setModel", _wrap_TravelTimeTable_setModel, METH_VARARGS, "TravelTimeTable_setModel(TravelTimeTable self, std::string const & model) -> bool"},
	 { "TravelTimeTable_model", _wrap_TravelTimeTable_model, METH_O, "TravelTimeTable_model(TravelTimeTable self) -> std::string const &"},
	 { "TravelTimeTable_compute", _wrap_TravelTimeTable_compute, METH_VARARGS, "\n"
		"TravelTimeTable_compute(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2, double elev2=0., int ellc=1) -> TravelTimeList\n"
		"TravelTimeTable_compute(TravelTimeTable self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2, double elev2=0., int ellc=1) -> TravelTime\n"
		""},
	 { "TravelTimeTable_computeFirst", _wrap_TravelTimeTable_computeFirst, METH_VARARGS, "TravelTimeTable_computeFirst(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2, double elev2=0., int ellc=1) -> TravelTime"},
	 { "delete_TravelTimeTable", _wrap_delete_TravelTimeTable, METH_O, "delete_TravelTimeTable(TravelTimeTable self)"},
	 { "TravelTimeTable_swigregister", TravelTimeTable_swigregister, METH_O, NULL},
	 { "TravelTimeTable_swiginit", TravelTimeTable_swiginit, METH_VARARGS, NULL},
	 { "ellipcorr", _wrap_ellipcorr, METH_VARARGS, "ellipcorr(std::string const & phase, double lat1, double lon1, double lat2, double lon2, double depth, double & corr) -> bool"},
	 { "getPhase", _wrap_getPhase, METH_VARARGS, "getPhase(TravelTimeList arg1, std::string const & phaseCode) -> TravelTime"},
	 { "firstArrivalP", _wrap_firstArrivalP, METH_O, "firstArrivalP(TravelTimeList arg1) -> TravelTime"},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Seiscomp__ArrayTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Array *) x));
}
static void *_p_Seiscomp__BitSetTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::BitSet *) x));
}
static void *_p_Seiscomp__Core__DataMessageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *)(Seiscomp::Core::GenericMessage< Seiscomp::Core::BaseObject > *) ((Seiscomp::Core::DataMessage *) x));
}
static void *_p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *) ((Seiscomp::Core::GenericMessage< Seiscomp::Core::BaseObject > *) x));
}
static void *_p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *) ((Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier > *) x));
}
static void *_p_Seiscomp__Core__GreensFunctionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Core::GreensFunction *) x));
}
static void *_p_Seiscomp__Core__InterruptibleObjectTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Core::InterruptibleObject *) x));
}
static void *_p_Seiscomp__Core__MessageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Core::Message *) x));
}
static void *_p_Seiscomp__DataModel__AccessTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::Access *) x));
}
static void *_p_Seiscomp__DataModel__AmplitudeTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Amplitude *) x));
}
static void *_p_Seiscomp__DataModel__AmplitudeReferenceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::AmplitudeReference *) x));
}
static void *_p_Seiscomp__DataModel__ArclinkLogTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ArclinkLog *) x));
}
static void *_p_Seiscomp__DataModel__ArclinkRequestTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ArclinkRequest *) x));
}
static void *_p_Seiscomp__DataModel__ArclinkRequestLineTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::ArclinkRequestLine *) x));
}
static void *_p_Seiscomp__DataModel__ArclinkRequestSummaryTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::ArclinkRequestSummary *) x));
}
static void *_p_Seiscomp__DataModel__ArclinkStatusLineTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::ArclinkStatusLine *) x));
}
static void *_p_Seiscomp__DataModel__ArclinkUserTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ArclinkUser *) x));
}
static void *_p_Seiscomp__DataModel__ArrivalTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::Arrival *) x));
}
static void *_p_Seiscomp__DataModel__ArtificialEventParametersMessageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *) ((Seiscomp::DataModel::ArtificialEventParametersMessage *) x));
}
static void *_p_Seiscomp__DataModel__ArtificialOriginMessageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *) ((Seiscomp::DataModel::ArtificialOriginMessage *) x));
}
static void *_p_Seiscomp__DataModel__AuxDeviceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::AuxDevice *) x));
}
static void *_p_Seiscomp__DataModel__AuxSourceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::AuxSource *) x));
}
static void *_p_Seiscomp__DataModel__AuxStreamTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::AuxStream *) x));
}
static void *_p_Seiscomp__DataModel__AxisTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::Axis *) x));
}
static void *_p_Seiscomp__DataModel__BlobTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::Blob *) x));
}
static void *_p_Seiscomp__DataModel__CommentTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::Comment *) x));
}
static void *_p_Seiscomp__DataModel__ComplexArrayTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::ComplexArray *) x));
}
static void *_p_Seiscomp__DataModel__CompositeTimeTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::CompositeTime *) x));
}
static void *_p_Seiscomp__DataModel__ConfidenceEllipsoidTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::ConfidenceEllipsoid *) x));
}
static void *_p_Seiscomp__DataModel__ConfigTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Config *) x));
}
static void *_p_Seiscomp__DataModel__ConfigModuleTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ConfigModule *) x));
}
static void *_p_Seiscomp__DataModel__ConfigStationTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ConfigStation *) x));
}
static void *_p_Seiscomp__DataModel__ConfigSyncMessageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *) ((Seiscomp::DataModel::ConfigSyncMessage *) x));
}
static void *_p_Seiscomp__DataModel__CreationInfoTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::CreationInfo *) x));
}
static void *_p_Seiscomp__DataModel__DataAttributeExtentTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::DataAttributeExtent *) x));
}
static void *_p_Seiscomp__DataModel__DataAvailabilityTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::DataAvailability *) x));
}
static void *_p_Seiscomp__DataModel__DataExtentTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::DataExtent *) x));
}
static void *_p_Seiscomp__DataModel__DataSegmentTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::DataSegment *) x));
}
static void *_p_Seiscomp__DataModel__DataUsedTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::DataUsed *) x));
}
static void *_p_Seiscomp__DataModel__DatabaseArchiveTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Observer *) ((Seiscomp::DataModel::DatabaseArchive *) x));
}
static void *_p_Seiscomp__DataModel__DatabaseIteratorTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::DatabaseIterator *) x));
}
static void *_p_Seiscomp__DataModel__DatabaseQueryTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Observer *)(Seiscomp::DataModel::DatabaseArchive *)(Seiscomp::DataModel::DatabaseReader *) ((Seiscomp::DataModel::DatabaseQuery *) x));
}
static void *_p_Seiscomp__DataModel__DatabaseReaderTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Observer *)(Seiscomp::DataModel::DatabaseArchive *) ((Seiscomp::DataModel::DatabaseReader *) x));
}
static void *_p_Seiscomp__DataModel__DataloggerTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Datalogger *) x));
}
static void *_p_Seiscomp__DataModel__DataloggerCalibrationTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::DataloggerCalibration *) x));
}
static void *_p_Seiscomp__DataModel__DecimationTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::Decimation *) x));
}
static void *_p_Seiscomp__DataModel__EventTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Event *) x));
}
static void *_p_Seiscomp__DataModel__EventDescriptionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::EventDescription *) x));
}
static void *_p_Seiscomp__DataModel__EventParametersTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::EventParameters *) x));
}
static void *_p_Seiscomp__DataModel__FocalMechanismTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::FocalMechanism *) x));
}
static void *_p_Seiscomp__DataModel__FocalMechanismReferenceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::FocalMechanismReference *) x));
}
static void *_p_Seiscomp__DataModel__IntegerQuantityTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::IntegerQuantity *) x));
}
static void *_p_Seiscomp__DataModel__InventoryTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Inventory *) x));
}
static void *_p_Seiscomp__DataModel__InventorySyncMessageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *) ((Seiscomp::DataModel::InventorySyncMessage *) x));
}
static void *_p_Seiscomp__DataModel__JournalEntryTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::JournalEntry *) x));
}
static void *_p_Seiscomp__DataModel__JournalingTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Journaling *) x));
}
static void *_p_Seiscomp__DataModel__MagnitudeTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Magnitude *) x));
}
static void *_p_Seiscomp__DataModel__MomentTensorTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::MomentTensor *) x));
}
static void *_p_Seiscomp__DataModel__MomentTensorComponentContributionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::MomentTensorComponentContribution *) x));
}
static void *_p_Seiscomp__DataModel__MomentTensorPhaseSettingTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::MomentTensorPhaseSetting *) x));
}
static void *_p_Seiscomp__DataModel__MomentTensorStationContributionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::MomentTensorStationContribution *) x));
}
static void *_p_Seiscomp__DataModel__NetworkTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Network *) x));
}
static void *_p_Seiscomp__DataModel__NodalPlaneTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::NodalPlane *) x));
}
static void *_p_Seiscomp__DataModel__NodalPlanesTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::NodalPlanes *) x));
}
static void *_p_Seiscomp__DataModel__NotifierTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::Notifier *) x));
}
static void *_p_Seiscomp__DataModel__NotifierMessageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::Message *)(Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier > *) ((Seiscomp::DataModel::NotifierMessage *) x));
}
static void *_p_Seiscomp__DataModel__ObjectTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::Object *) x));
}
static void *_p_Seiscomp__DataModel__ObserverTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::Observer *) x));
}
static void *_p_Seiscomp__DataModel__OriginTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Origin *) x));
}
static void *_p_Seiscomp__DataModel__OriginQualityTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::OriginQuality *) x));
}
static void *_p_Seiscomp__DataModel__OriginReferenceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::OriginReference *) x));
}
static void *_p_Seiscomp__DataModel__OriginUncertaintyTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::OriginUncertainty *) x));
}
static void *_p_Seiscomp__DataModel__OutageTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::Outage *) x));
}
static void *_p_Seiscomp__DataModel__ParameterTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Parameter *) x));
}
static void *_p_Seiscomp__DataModel__ParameterSetTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ParameterSet *) x));
}
static void *_p_Seiscomp__DataModel__PhaseTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::Phase *) x));
}
static void *_p_Seiscomp__DataModel__PickTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Pick *) x));
}
static void *_p_Seiscomp__DataModel__PickReferenceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::PickReference *) x));
}
static void *_p_Seiscomp__DataModel__PrincipalAxesTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::PrincipalAxes *) x));
}
static void *_p_Seiscomp__DataModel__PublicObjectTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::PublicObject *) x));
}
static void *_p_Seiscomp__DataModel__PublicObjectCacheTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::PublicObjectCache *) x));
}
static void *_p_Seiscomp__DataModel__PublicObjectRingBufferTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::PublicObjectCache *) ((Seiscomp::DataModel::PublicObjectRingBuffer *) x));
}
static void *_p_Seiscomp__DataModel__PublicObjectTimeSpanBufferTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::PublicObjectCache *) ((Seiscomp::DataModel::PublicObjectTimeSpanBuffer *) x));
}
static void *_p_Seiscomp__DataModel__QCLogTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::QCLog *) x));
}
static void *_p_Seiscomp__DataModel__QualityControlTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::QualityControl *) x));
}
static void *_p_Seiscomp__DataModel__ReadingTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Reading *) x));
}
static void *_p_Seiscomp__DataModel__RealArrayTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::RealArray *) x));
}
static void *_p_Seiscomp__DataModel__RealPDF1DTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::RealPDF1D *) x));
}
static void *_p_Seiscomp__DataModel__RealQuantityTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::RealQuantity *) x));
}
static void *_p_Seiscomp__DataModel__ResponseFAPTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ResponseFAP *) x));
}
static void *_p_Seiscomp__DataModel__ResponseFIRTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ResponseFIR *) x));
}
static void *_p_Seiscomp__DataModel__ResponseIIRTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ResponseIIR *) x));
}
static void *_p_Seiscomp__DataModel__ResponsePAZTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ResponsePAZ *) x));
}
static void *_p_Seiscomp__DataModel__ResponsePolynomialTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::ResponsePolynomial *) x));
}
static void *_p_Seiscomp__DataModel__RouteTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Route *) x));
}
static void *_p_Seiscomp__DataModel__RouteArclinkTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::RouteArclink *) x));
}
static void *_p_Seiscomp__DataModel__RouteSeedlinkTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::RouteSeedlink *) x));
}
static void *_p_Seiscomp__DataModel__RoutingTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Routing *) x));
}
static void *_p_Seiscomp__DataModel__SensorTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Sensor *) x));
}
static void *_p_Seiscomp__DataModel__SensorCalibrationTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::SensorCalibration *) x));
}
static void *_p_Seiscomp__DataModel__SensorLocationTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::SensorLocation *) x));
}
static void *_p_Seiscomp__DataModel__SetupTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::Setup *) x));
}
static void *_p_Seiscomp__DataModel__SourceTimeFunctionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::SourceTimeFunction *) x));
}
static void *_p_Seiscomp__DataModel__StationTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Station *) x));
}
static void *_p_Seiscomp__DataModel__StationGroupTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::StationGroup *) x));
}
static void *_p_Seiscomp__DataModel__StationMagnitudeTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::StationMagnitude *) x));
}
static void *_p_Seiscomp__DataModel__StationMagnitudeContributionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::StationMagnitudeContribution *) x));
}
static void *_p_Seiscomp__DataModel__StationReferenceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::StationReference *) x));
}
static void *_p_Seiscomp__DataModel__StreamTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *)(Seiscomp::DataModel::PublicObject *) ((Seiscomp::DataModel::Stream *) x));
}
static void *_p_Seiscomp__DataModel__TensorTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::Tensor *) x));
}
static void *_p_Seiscomp__DataModel__TimeArrayTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::TimeArray *) x));
}
static void *_p_Seiscomp__DataModel__TimePDF1DTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::TimePDF1D *) x));
}
static void *_p_Seiscomp__DataModel__TimeQuantityTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::TimeQuantity *) x));
}
static void *_p_Seiscomp__DataModel__TimeWindowTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::TimeWindow *) x));
}
static void *_p_Seiscomp__DataModel__WaveformQualityTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::DataModel::Object *) ((Seiscomp::DataModel::WaveformQuality *) x));
}
static void *_p_Seiscomp__DataModel__WaveformStreamIDTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::DataModel::WaveformStreamID *) x));
}
static void *_p_Seiscomp__GenericRecordTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Record *) ((Seiscomp::GenericRecord *) x));
}
static void *_p_Seiscomp__Geo__GeoFeatureTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Geo::GeoFeature *) x));
}
static void *_p_Seiscomp__Geo__GeoFeatureSetTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Geo::GeoFeatureSet *) x));
}
static void *_p_Seiscomp__IO__CropperTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *) ((Seiscomp::IO::Cropper *) x));
}
static void *_p_Seiscomp__IO__DatabaseInterfaceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::IO::DatabaseInterface *) x));
}
static void *_p_Seiscomp__IO__ExporterTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::IO::Exporter *) x));
}
static void *_p_Seiscomp__IO__GFArchiveTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::IO::GFArchive *) x));
}
static void *_p_Seiscomp__IO__GFReceiverTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Geo::Coord< double > *) ((Seiscomp::IO::GFReceiver *) x));
}
static void *_p_Seiscomp__IO__GFSourceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Geo::Coord< double > *) ((Seiscomp::IO::GFSource *) x));
}
static void *_p_Seiscomp__IO__ImporterTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::IO::Importer *) x));
}
static void *_p_Seiscomp__IO__MSeedEncoderTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *) ((Seiscomp::IO::MSeedEncoder *) x));
}
static void *_p_Seiscomp__IO__MSeedRecordTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Record *) ((Seiscomp::IO::MSeedRecord *) x));
}
static void *_p_Seiscomp__IO__PipeFilterTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *) ((Seiscomp::IO::PipeFilter *) x));
}
static void *_p_Seiscomp__IO__RecordDemuxFilterTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *) ((Seiscomp::IO::RecordDemuxFilter *) x));
}
static void *_p_Seiscomp__IO__RecordFilterInterfaceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::IO::RecordFilterInterface *) x));
}
static void *_p_Seiscomp__IO__RecordIIRFilterT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *) ((Seiscomp::IO::RecordIIRFilter< double > *) x));
}
static void *_p_Seiscomp__IO__RecordIIRFilterT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *) ((Seiscomp::IO::RecordIIRFilter< float > *) x));
}
static void *_p_Seiscomp__IO__RecordInputTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::IO::RecordInput *) x));
}
static void *_p_Seiscomp__IO__RecordResamplerT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *)(Seiscomp::IO::RecordResamplerBase *) ((Seiscomp::IO::RecordResampler< double > *) x));
}
static void *_p_Seiscomp__IO__RecordResamplerT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *)(Seiscomp::IO::RecordResamplerBase *) ((Seiscomp::IO::RecordResampler< float > *) x));
}
static void *_p_Seiscomp__IO__RecordResamplerT_int_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *)(Seiscomp::IO::RecordResamplerBase *) ((Seiscomp::IO::RecordResampler< int > *) x));
}
static void *_p_Seiscomp__IO__RecordResamplerBaseTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::IO::RecordFilterInterface *) ((Seiscomp::IO::RecordResamplerBase *) x));
}
static void *_p_Seiscomp__IO__RecordStreamTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::InterruptibleObject *) ((Seiscomp::IO::RecordStream *) x));
}
static void *_p_Seiscomp__Math__Filtering__AverageT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::Average< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__AverageT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::Average< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__ChainFilterT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::ChainFilter< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__ChainFilterT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::ChainFilter< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::IIR::BiquadCascade< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::IIR::BiquadCascade< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< double > *) ((Seiscomp::Math::Filtering::IIR::ButterworthBandpass< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< float > *) ((Seiscomp::Math::Filtering::IIR::ButterworthBandpass< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< double > *) ((Seiscomp::Math::Filtering::IIR::ButterworthBandstop< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< float > *) ((Seiscomp::Math::Filtering::IIR::ButterworthBandstop< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< double > *) ((Seiscomp::Math::Filtering::IIR::ButterworthHighLowpass< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< float > *) ((Seiscomp::Math::Filtering::IIR::ButterworthHighLowpass< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< double > *) ((Seiscomp::Math::Filtering::IIR::ButterworthHighpass< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< float > *) ((Seiscomp::Math::Filtering::IIR::ButterworthHighpass< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< double > *) ((Seiscomp::Math::Filtering::IIR::ButterworthLowpass< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::BiquadCascade< float > *) ((Seiscomp::Math::Filtering::IIR::ButterworthLowpass< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__FilterT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::IIR::Filter< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__FilterT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::IIR::Filter< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::Filter< double > *) ((Seiscomp::Math::Filtering::IIR::GenericSeismometer< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::Filter< float > *) ((Seiscomp::Math::Filtering::IIR::GenericSeismometer< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::Filter< double > *) ((Seiscomp::Math::Filtering::IIR::WWSSN_LP_Filter< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::Filter< float > *) ((Seiscomp::Math::Filtering::IIR::WWSSN_LP_Filter< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::Filter< double > *) ((Seiscomp::Math::Filtering::IIR::WWSSN_SP_Filter< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::Filter< float > *) ((Seiscomp::Math::Filtering::IIR::WWSSN_SP_Filter< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::IIR::Filter< double > *) ((Seiscomp::Math::Filtering::IIR::WoodAndersonFilter< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::IIR::Filter< float > *) ((Seiscomp::Math::Filtering::IIR::WoodAndersonFilter< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__InPlaceFilterT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Math::Filtering::InPlaceFilter< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__InPlaceFilterT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Math::Filtering::InPlaceFilter< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__InitialTaperT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::InitialTaper< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__InitialTaperT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::InitialTaper< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__RunningMeanT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::RunningMean< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__RunningMeanT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::RunningMean< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *)(Seiscomp::Math::Filtering::RunningMean< double > *) ((Seiscomp::Math::Filtering::RunningMeanHighPass< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *)(Seiscomp::Math::Filtering::RunningMean< float > *) ((Seiscomp::Math::Filtering::RunningMeanHighPass< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__STALTA2T_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::STALTA2< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__STALTA2T_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::STALTA2< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__STALTAT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::STALTA< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__STALTAT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::STALTA< float > *) x));
}
static void *_p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< double > *) ((Seiscomp::Math::Filtering::STALTA_Classic< double > *) x));
}
static void *_p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Filtering::InPlaceFilter< float > *) ((Seiscomp::Math::Filtering::STALTA_Classic< float > *) x));
}
static void *_p_Seiscomp__Math__Geo__CityT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Geo::Coord< double > *)(Seiscomp::Math::Geo::NamedCoord< double > *) ((Seiscomp::Math::Geo::City< double > *) x));
}
static void *_p_Seiscomp__Math__Geo__CityT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Geo::Coord< float > *)(Seiscomp::Math::Geo::NamedCoord< float > *) ((Seiscomp::Math::Geo::City< float > *) x));
}
static void *_p_Seiscomp__Math__Geo__CoordT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Math::Geo::Coord< double > *) x));
}
static void *_p_Seiscomp__Math__Geo__CoordT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Math::Geo::Coord< float > *) x));
}
static void *_p_Seiscomp__Math__Geo__NamedCoordT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Geo::Coord< double > *) ((Seiscomp::Math::Geo::NamedCoord< double > *) x));
}
static void *_p_Seiscomp__Math__Geo__NamedCoordT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Geo::Coord< float > *) ((Seiscomp::Math::Geo::NamedCoord< float > *) x));
}
static void *_p_Seiscomp__Math__Restitution__FFT__PolesAndZerosTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Restitution::FFT::TransferFunction *) ((Seiscomp::Math::Restitution::FFT::PolesAndZeros *) x));
}
static void *_p_Seiscomp__Math__Restitution__FFT__ResponseListTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Math::Restitution::FFT::TransferFunction *) ((Seiscomp::Math::Restitution::FFT::ResponseList *) x));
}
static void *_p_Seiscomp__Math__Restitution__FFT__TransferFunctionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Math::Restitution::FFT::TransferFunction *) x));
}
static void *_p_Seiscomp__NumericArrayT_char_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *)(Seiscomp::TypedArray< char > *) ((Seiscomp::NumericArray< char > *) x));
}
static void *_p_Seiscomp__NumericArrayT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *)(Seiscomp::TypedArray< double > *) ((Seiscomp::NumericArray< double > *) x));
}
static void *_p_Seiscomp__NumericArrayT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *)(Seiscomp::TypedArray< float > *) ((Seiscomp::NumericArray< float > *) x));
}
static void *_p_Seiscomp__NumericArrayT_int_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *)(Seiscomp::TypedArray< int > *) ((Seiscomp::NumericArray< int > *) x));
}
static void *_p_Seiscomp__RecordTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Record *) x));
}
static void *_p_Seiscomp__RecordStream__Arclink__ArclinkConnectionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::InterruptibleObject *)(Seiscomp::IO::RecordStream *) ((Seiscomp::RecordStream::Arclink::ArclinkConnection *) x));
}
static void *_p_Seiscomp__RecordStream__CombinedConnectionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::InterruptibleObject *)(Seiscomp::IO::RecordStream *) ((Seiscomp::RecordStream::CombinedConnection *) x));
}
static void *_p_Seiscomp__RecordStream__FileTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::InterruptibleObject *)(Seiscomp::IO::RecordStream *) ((Seiscomp::RecordStream::File *) x));
}
static void *_p_Seiscomp__RecordStream__SLConnectionTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Core::InterruptibleObject *)(Seiscomp::IO::RecordStream *) ((Seiscomp::RecordStream::SLConnection *) x));
}
static void *_p_Seiscomp__Seismology__LocatorInterfaceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Seismology::LocatorInterface *) x));
}
static void *_p_Seiscomp__Seismology__SensorLocationDelegateTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::Seismology::SensorLocationDelegate *) x));
}
static void *_p_Seiscomp__TravelTimeTableTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::TravelTimeTableInterface *) ((Seiscomp::TravelTimeTable *) x));
}
static void *_p_Seiscomp__TravelTimeTableInterfaceTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *)  ((Seiscomp::TravelTimeTableInterface *) x));
}
static void *_p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< Seiscomp::Core::Time > *) x));
}
static void *_p_Seiscomp__TypedArrayT_char_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< char > *) x));
}
static void *_p_Seiscomp__TypedArrayT_double_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< double > *) x));
}
static void *_p_Seiscomp__TypedArrayT_float_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< float > *) x));
}
static void *_p_Seiscomp__TypedArrayT_int_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< int > *) x));
}
static void *_p_Seiscomp__TypedArrayT_std__complexT_double_t_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< std::complex< double > > *) x));
}
static void *_p_Seiscomp__TypedArrayT_std__complexT_float_t_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< std::complex< float > > *) x));
}
static void *_p_Seiscomp__TypedArrayT_std__string_tTo_p_Seiscomp__Core__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::BaseObject *) (Seiscomp::Array *) ((Seiscomp::TypedArray< std::string > *) x));
}
static void *_p_Seiscomp__Core__ClassNotFoundTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::ClassNotFound *) x));
}
static void *_p_Seiscomp__Core__DuplicateClassnameTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::DuplicateClassname *) x));
}
static void *_p_Seiscomp__Core__EndOfStreamExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *) (Seiscomp::Core::StreamException *) ((Seiscomp::Core::EndOfStreamException *) x));
}
static void *_p_Seiscomp__Core__MemoryExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::MemoryException *) x));
}
static void *_p_Seiscomp__Core__OperationInterruptedTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::OperationInterrupted *) x));
}
static void *_p_Seiscomp__Core__OverflowExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::OverflowException *) x));
}
static void *_p_Seiscomp__Core__StreamExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::StreamException *) x));
}
static void *_p_Seiscomp__Core__TypeConversionExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::TypeConversionException *) x));
}
static void *_p_Seiscomp__Core__TypeExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::TypeException *) x));
}
static void *_p_Seiscomp__Core__UnderflowExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::UnderflowException *) x));
}
static void *_p_Seiscomp__Core__ValueExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Core::ValueException *) x));
}
static void *_p_Seiscomp__FileNotFoundErrorTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::FileNotFoundError *) x));
}
static void *_p_Seiscomp__IO__LibmseedExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *) (Seiscomp::Core::StreamException *) ((Seiscomp::IO::LibmseedException *) x));
}
static void *_p_Seiscomp__IO__RecordStreamExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *) (Seiscomp::Core::StreamException *) ((Seiscomp::IO::RecordStreamException *) x));
}
static void *_p_Seiscomp__IO__RecordStreamTimeoutTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *) (Seiscomp::Core::StreamException *)(Seiscomp::IO::RecordStreamException *) ((Seiscomp::IO::RecordStreamTimeout *) x));
}
static void *_p_Seiscomp__MultipleModelsErrorTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::MultipleModelsError *) x));
}
static void *_p_Seiscomp__NoPhaseErrorTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::NoPhaseError *) x));
}
static void *_p_Seiscomp__RecordStream__SeedlinkCommandExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *) (Seiscomp::Core::StreamException *)(Seiscomp::IO::RecordStreamException *)(Seiscomp::RecordStream::SeedlinkException *) ((Seiscomp::RecordStream::SeedlinkCommandException *) x));
}
static void *_p_Seiscomp__RecordStream__SeedlinkExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *) (Seiscomp::Core::StreamException *)(Seiscomp::IO::RecordStreamException *) ((Seiscomp::RecordStream::SeedlinkException *) x));
}
static void *_p_Seiscomp__Seismology__LocatorExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Seismology::LocatorException *) x));
}
static void *_p_Seiscomp__Seismology__PickNotFoundExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Seismology::PickNotFoundException *) x));
}
static void *_p_Seiscomp__Seismology__StationNotFoundExceptionTo_p_Seiscomp__Core__GeneralException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::GeneralException *)  ((Seiscomp::Seismology::StationNotFoundException *) x));
}
static void *_p_Seiscomp__DataModel__DatabaseArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::Generic::Archive< Seiscomp::Core::BaseObject > *)  ((Seiscomp::DataModel::DatabaseArchive *) x));
}
static void *_p_Seiscomp__IO__BinaryArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::Generic::Archive< Seiscomp::Core::BaseObject > *)  ((Seiscomp::IO::BinaryArchive *) x));
}
static void *_p_Seiscomp__IO__VBinaryArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::Generic::Archive< Seiscomp::Core::BaseObject > *) (Seiscomp::IO::BinaryArchive *) ((Seiscomp::IO::VBinaryArchive *) x));
}
static void *_p_Seiscomp__IO__XMLArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Core::Generic::Archive< Seiscomp::Core::BaseObject > *)  ((Seiscomp::IO::XMLArchive *) x));
}
static void *_p_Seiscomp__IO__GFReceiverTo_p_Seiscomp__Math__Geo__CoordT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::Coord< double > *)  ((Seiscomp::IO::GFReceiver *) x));
}
static void *_p_Seiscomp__IO__GFSourceTo_p_Seiscomp__Math__Geo__CoordT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::Coord< double > *)  ((Seiscomp::IO::GFSource *) x));
}
static void *_p_Seiscomp__Math__Geo__CityT_double_tTo_p_Seiscomp__Math__Geo__CoordT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::Coord< double > *) (Seiscomp::Math::Geo::NamedCoord< double > *) ((Seiscomp::Math::Geo::City< double > *) x));
}
static void *_p_Seiscomp__Math__Geo__NamedCoordT_double_tTo_p_Seiscomp__Math__Geo__CoordT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::Coord< double > *)  ((Seiscomp::Math::Geo::NamedCoord< double > *) x));
}
static void *_p_Seiscomp__Math__Geo__CityT_float_tTo_p_Seiscomp__Math__Geo__CoordT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::Coord< float > *) (Seiscomp::Math::Geo::NamedCoord< float > *) ((Seiscomp::Math::Geo::City< float > *) x));
}
static void *_p_Seiscomp__Math__Geo__NamedCoordT_float_tTo_p_Seiscomp__Math__Geo__CoordT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::Coord< float > *)  ((Seiscomp::Math::Geo::NamedCoord< float > *) x));
}
static void *_p_Seiscomp__Math__Geo__CityT_double_tTo_p_Seiscomp__Math__Geo__NamedCoordT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::NamedCoord< double > *)  ((Seiscomp::Math::Geo::City< double > *) x));
}
static void *_p_Seiscomp__Math__Geo__CityT_float_tTo_p_Seiscomp__Math__Geo__NamedCoordT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::Math::Geo::NamedCoord< float > *)  ((Seiscomp::Math::Geo::City< float > *) x));
}
static void *_p_Seiscomp__TravelTimeTableTo_p_Seiscomp__TravelTimeTableInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Seiscomp::TravelTimeTableInterface *)  ((Seiscomp::TravelTimeTable *) x));
}
static void *_p_Seiscomp__Config__CaseSensitivityExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Config::Exception *) ((Seiscomp::Config::CaseSensitivityException *) x));
}
static void *_p_Seiscomp__Config__ExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Seiscomp::Config::Exception *) x));
}
static void *_p_Seiscomp__Config__OptionNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Config::Exception *) ((Seiscomp::Config::OptionNotFoundException *) x));
}
static void *_p_Seiscomp__Config__SyntaxExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Config::Exception *) ((Seiscomp::Config::SyntaxException *) x));
}
static void *_p_Seiscomp__Config__TypeConversionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Config::Exception *) ((Seiscomp::Config::TypeConversionException *) x));
}
static void *_p_Seiscomp__Core__ClassNotFoundTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::ClassNotFound *) x));
}
static void *_p_Seiscomp__Core__DuplicateClassnameTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::DuplicateClassname *) x));
}
static void *_p_Seiscomp__Core__EndOfStreamExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *)(Seiscomp::Core::StreamException *) ((Seiscomp::Core::EndOfStreamException *) x));
}
static void *_p_Seiscomp__Core__GeneralExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Seiscomp::Core::GeneralException *) x));
}
static void *_p_Seiscomp__Core__MemoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::MemoryException *) x));
}
static void *_p_Seiscomp__Core__OperationInterruptedTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::OperationInterrupted *) x));
}
static void *_p_Seiscomp__Core__OverflowExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::OverflowException *) x));
}
static void *_p_Seiscomp__Core__StreamExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::StreamException *) x));
}
static void *_p_Seiscomp__Core__TypeConversionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::TypeConversionException *) x));
}
static void *_p_Seiscomp__Core__TypeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::TypeException *) x));
}
static void *_p_Seiscomp__Core__UnderflowExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::UnderflowException *) x));
}
static void *_p_Seiscomp__Core__ValueErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Seiscomp::Core::ValueError *) x));
}
static void *_p_Seiscomp__Core__ValueExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Core::ValueException *) x));
}
static void *_p_Seiscomp__FileNotFoundErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::FileNotFoundError *) x));
}
static void *_p_Seiscomp__IO__LibmseedExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *)(Seiscomp::Core::StreamException *) ((Seiscomp::IO::LibmseedException *) x));
}
static void *_p_Seiscomp__IO__RecordStreamExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *)(Seiscomp::Core::StreamException *) ((Seiscomp::IO::RecordStreamException *) x));
}
static void *_p_Seiscomp__IO__RecordStreamTimeoutTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *)(Seiscomp::Core::StreamException *)(Seiscomp::IO::RecordStreamException *) ((Seiscomp::IO::RecordStreamTimeout *) x));
}
static void *_p_Seiscomp__Math__Filtering__AlignmentErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Seiscomp::Math::Filtering::AlignmentError *) x));
}
static void *_p_Seiscomp__MultipleModelsErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::MultipleModelsError *) x));
}
static void *_p_Seiscomp__NoPhaseErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::NoPhaseError *) x));
}
static void *_p_Seiscomp__RecordStream__SeedlinkCommandExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *)(Seiscomp::Core::StreamException *)(Seiscomp::IO::RecordStreamException *)(Seiscomp::RecordStream::SeedlinkException *) ((Seiscomp::RecordStream::SeedlinkCommandException *) x));
}
static void *_p_Seiscomp__RecordStream__SeedlinkExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *)(Seiscomp::Core::StreamException *)(Seiscomp::IO::RecordStreamException *) ((Seiscomp::RecordStream::SeedlinkException *) x));
}
static void *_p_Seiscomp__Seismology__LocatorExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Seismology::LocatorException *) x));
}
static void *_p_Seiscomp__Seismology__PickNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Seismology::PickNotFoundException *) x));
}
static void *_p_Seiscomp__Seismology__StationNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Seiscomp::Core::GeneralException *) ((Seiscomp::Seismology::StationNotFoundException *) x));
}
static void *_p_Seiscomp__TravelTimeListTo_p_std__listT_Seiscomp__TravelTime_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *)  ((Seiscomp::TravelTimeList *) x));
}
static swig_type_info _swigt__p_Archive = {"_p_Archive", "Archive *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AttachmentList = {"_p_AttachmentList", "AttachmentList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AttachmentType = {"_p_AttachmentType", "AttachmentType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Attributes = {"_p_Attributes", "Attributes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Backend = {"_p_Backend", "Backend *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataArray = {"_p_DataArray", "DataArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Days = {"_p_Days", "Days *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Duration = {"_p_Duration", "Duration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F1 = {"_p_F1", "F1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F2 = {"_p_F2", "F2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F3 = {"_p_F3", "F3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F4 = {"_p_F4", "F4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F5 = {"_p_F5", "F5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F6 = {"_p_F6", "F6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Flags = {"_p_Flags", "Flags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Hours = {"_p_Hours", "Hours *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IDList = {"_p_IDList", "IDList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImplType = {"_p_ImplType", "ImplType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IncludedFiles = {"_p_IncludedFiles", "IncludedFiles *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InplaceFilterType = {"_p_InplaceFilterType", "InplaceFilterType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Iterator = {"_p_Iterator", "Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LogNodeCPtr = {"_p_LogNodeCPtr", "LogNodeCPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LogNodePtr = {"_p_LogNodePtr", "LogNodePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MSRecord_s = {"_p_MSRecord_s", "MSRecord *|MSRecord_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MajorType = {"_p_MajorType", "MajorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MicroSeconds = {"_p_MicroSeconds", "MicroSeconds *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MilliSeconds = {"_p_MilliSeconds", "MilliSeconds *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MinorType = {"_p_MinorType", "MinorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Minutes = {"_p_Minutes", "Minutes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Notifiers = {"_p_Notifiers", "Notifiers *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OID = {"_p_OID", "OID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PackType = {"_p_PackType", "PackType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterMap = {"_p_ParameterMap", "ParameterMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PatchType = {"_p_PatchType", "PatchType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PickList = {"_p_PickList", "PickList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PopCallback = {"_p_PopCallback", "PopCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Properties = {"_p_Properties", "Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropertyIndex = {"_p_PropertyIndex", "PropertyIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropertyValue = {"_p_PropertyValue", "PropertyValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PublicObjectMap = {"_p_PublicObjectMap", "PublicObjectMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PushCallback = {"_p_PushCallback", "PushCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReferenceType = {"_p_ReferenceType", "ReferenceType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RootType = {"_p_RootType", "RootType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seconds = {"_p_Seconds", "Seconds *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Config__Config = {"_p_Seiscomp__Config__Config", "Seiscomp::Config::Config *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__BaseObject = {"_p_Seiscomp__Core__BaseObject", "Seiscomp::Core::BaseObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Array = {"_p_Seiscomp__Array", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__BitSet = {"_p_Seiscomp__BitSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__DataMessage = {"_p_Seiscomp__Core__DataMessage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t = {"_p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t = {"_p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__GreensFunction = {"_p_Seiscomp__Core__GreensFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__InterruptibleObject = {"_p_Seiscomp__Core__InterruptibleObject", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__Message = {"_p_Seiscomp__Core__Message", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Access = {"_p_Seiscomp__DataModel__Access", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Amplitude = {"_p_Seiscomp__DataModel__Amplitude", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__AmplitudeReference = {"_p_Seiscomp__DataModel__AmplitudeReference", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArclinkLog = {"_p_Seiscomp__DataModel__ArclinkLog", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArclinkRequest = {"_p_Seiscomp__DataModel__ArclinkRequest", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArclinkRequestLine = {"_p_Seiscomp__DataModel__ArclinkRequestLine", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArclinkStatusLine = {"_p_Seiscomp__DataModel__ArclinkStatusLine", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArclinkUser = {"_p_Seiscomp__DataModel__ArclinkUser", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArtificialEventParametersMessage = {"_p_Seiscomp__DataModel__ArtificialEventParametersMessage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArtificialOriginMessage = {"_p_Seiscomp__DataModel__ArtificialOriginMessage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__AuxDevice = {"_p_Seiscomp__DataModel__AuxDevice", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__AuxSource = {"_p_Seiscomp__DataModel__AuxSource", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__AuxStream = {"_p_Seiscomp__DataModel__AuxStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Comment = {"_p_Seiscomp__DataModel__Comment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__CompositeTime = {"_p_Seiscomp__DataModel__CompositeTime", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Config = {"_p_Seiscomp__DataModel__Config", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ConfigModule = {"_p_Seiscomp__DataModel__ConfigModule", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ConfigStation = {"_p_Seiscomp__DataModel__ConfigStation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ConfigSyncMessage = {"_p_Seiscomp__DataModel__ConfigSyncMessage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DataAttributeExtent = {"_p_Seiscomp__DataModel__DataAttributeExtent", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DataAvailability = {"_p_Seiscomp__DataModel__DataAvailability", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DataExtent = {"_p_Seiscomp__DataModel__DataExtent", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DataSegment = {"_p_Seiscomp__DataModel__DataSegment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DataUsed = {"_p_Seiscomp__DataModel__DataUsed", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DatabaseArchive = {"_p_Seiscomp__DataModel__DatabaseArchive", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DatabaseIterator = {"_p_Seiscomp__DataModel__DatabaseIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DatabaseQuery = {"_p_Seiscomp__DataModel__DatabaseQuery", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DatabaseReader = {"_p_Seiscomp__DataModel__DatabaseReader", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Datalogger = {"_p_Seiscomp__DataModel__Datalogger", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__DataloggerCalibration = {"_p_Seiscomp__DataModel__DataloggerCalibration", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Decimation = {"_p_Seiscomp__DataModel__Decimation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Event = {"_p_Seiscomp__DataModel__Event", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__EventDescription = {"_p_Seiscomp__DataModel__EventDescription", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__EventParameters = {"_p_Seiscomp__DataModel__EventParameters", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__FocalMechanism = {"_p_Seiscomp__DataModel__FocalMechanism", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__FocalMechanismReference = {"_p_Seiscomp__DataModel__FocalMechanismReference", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Inventory = {"_p_Seiscomp__DataModel__Inventory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__InventorySyncMessage = {"_p_Seiscomp__DataModel__InventorySyncMessage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__JournalEntry = {"_p_Seiscomp__DataModel__JournalEntry", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Journaling = {"_p_Seiscomp__DataModel__Journaling", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Magnitude = {"_p_Seiscomp__DataModel__Magnitude", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__MomentTensor = {"_p_Seiscomp__DataModel__MomentTensor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__MomentTensorComponentContribution = {"_p_Seiscomp__DataModel__MomentTensorComponentContribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__MomentTensorPhaseSetting = {"_p_Seiscomp__DataModel__MomentTensorPhaseSetting", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__MomentTensorStationContribution = {"_p_Seiscomp__DataModel__MomentTensorStationContribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Network = {"_p_Seiscomp__DataModel__Network", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Notifier = {"_p_Seiscomp__DataModel__Notifier", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__NotifierMessage = {"_p_Seiscomp__DataModel__NotifierMessage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Object = {"_p_Seiscomp__DataModel__Object", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Observer = {"_p_Seiscomp__DataModel__Observer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__OriginReference = {"_p_Seiscomp__DataModel__OriginReference", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Outage = {"_p_Seiscomp__DataModel__Outage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Parameter = {"_p_Seiscomp__DataModel__Parameter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ParameterSet = {"_p_Seiscomp__DataModel__ParameterSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__PickReference = {"_p_Seiscomp__DataModel__PickReference", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__PublicObject = {"_p_Seiscomp__DataModel__PublicObject", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__PublicObjectCache = {"_p_Seiscomp__DataModel__PublicObjectCache", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__PublicObjectRingBuffer = {"_p_Seiscomp__DataModel__PublicObjectRingBuffer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer = {"_p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__QCLog = {"_p_Seiscomp__DataModel__QCLog", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__QualityControl = {"_p_Seiscomp__DataModel__QualityControl", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Reading = {"_p_Seiscomp__DataModel__Reading", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ResponseFAP = {"_p_Seiscomp__DataModel__ResponseFAP", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ResponseFIR = {"_p_Seiscomp__DataModel__ResponseFIR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ResponseIIR = {"_p_Seiscomp__DataModel__ResponseIIR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ResponsePAZ = {"_p_Seiscomp__DataModel__ResponsePAZ", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ResponsePolynomial = {"_p_Seiscomp__DataModel__ResponsePolynomial", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Route = {"_p_Seiscomp__DataModel__Route", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__RouteArclink = {"_p_Seiscomp__DataModel__RouteArclink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__RouteSeedlink = {"_p_Seiscomp__DataModel__RouteSeedlink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Routing = {"_p_Seiscomp__DataModel__Routing", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Sensor = {"_p_Seiscomp__DataModel__Sensor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__SensorCalibration = {"_p_Seiscomp__DataModel__SensorCalibration", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Setup = {"_p_Seiscomp__DataModel__Setup", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Station = {"_p_Seiscomp__DataModel__Station", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__StationGroup = {"_p_Seiscomp__DataModel__StationGroup", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__StationMagnitude = {"_p_Seiscomp__DataModel__StationMagnitude", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__StationMagnitudeContribution = {"_p_Seiscomp__DataModel__StationMagnitudeContribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__StationReference = {"_p_Seiscomp__DataModel__StationReference", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Stream = {"_p_Seiscomp__DataModel__Stream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__WaveformQuality = {"_p_Seiscomp__DataModel__WaveformQuality", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__GenericRecord = {"_p_Seiscomp__GenericRecord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Geo__GeoFeature = {"_p_Seiscomp__Geo__GeoFeature", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Geo__GeoFeatureSet = {"_p_Seiscomp__Geo__GeoFeatureSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__Cropper = {"_p_Seiscomp__IO__Cropper", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__DatabaseInterface = {"_p_Seiscomp__IO__DatabaseInterface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__Exporter = {"_p_Seiscomp__IO__Exporter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__GFArchive = {"_p_Seiscomp__IO__GFArchive", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__GFReceiver = {"_p_Seiscomp__IO__GFReceiver", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__GFSource = {"_p_Seiscomp__IO__GFSource", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__Importer = {"_p_Seiscomp__IO__Importer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__MSeedEncoder = {"_p_Seiscomp__IO__MSeedEncoder", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__MSeedRecord = {"_p_Seiscomp__IO__MSeedRecord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__PipeFilter = {"_p_Seiscomp__IO__PipeFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordDemuxFilter = {"_p_Seiscomp__IO__RecordDemuxFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordFilterInterface = {"_p_Seiscomp__IO__RecordFilterInterface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordIIRFilterT_double_t = {"_p_Seiscomp__IO__RecordIIRFilterT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordIIRFilterT_float_t = {"_p_Seiscomp__IO__RecordIIRFilterT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordInput = {"_p_Seiscomp__IO__RecordInput", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordResamplerBase = {"_p_Seiscomp__IO__RecordResamplerBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordResamplerT_double_t = {"_p_Seiscomp__IO__RecordResamplerT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordResamplerT_float_t = {"_p_Seiscomp__IO__RecordResamplerT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordResamplerT_int_t = {"_p_Seiscomp__IO__RecordResamplerT_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordStream = {"_p_Seiscomp__IO__RecordStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__AverageT_double_t = {"_p_Seiscomp__Math__Filtering__AverageT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__AverageT_float_t = {"_p_Seiscomp__Math__Filtering__AverageT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__ChainFilterT_double_t = {"_p_Seiscomp__Math__Filtering__ChainFilterT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__ChainFilterT_float_t = {"_p_Seiscomp__Math__Filtering__ChainFilterT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__FilterT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__FilterT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t = {"_p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t = {"_p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t = {"_p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t = {"_p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__InitialTaperT_double_t = {"_p_Seiscomp__Math__Filtering__InitialTaperT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__InitialTaperT_float_t = {"_p_Seiscomp__Math__Filtering__InitialTaperT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t = {"_p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t = {"_p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__RunningMeanT_double_t = {"_p_Seiscomp__Math__Filtering__RunningMeanT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__RunningMeanT_float_t = {"_p_Seiscomp__Math__Filtering__RunningMeanT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__STALTA2T_double_t = {"_p_Seiscomp__Math__Filtering__STALTA2T_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__STALTA2T_float_t = {"_p_Seiscomp__Math__Filtering__STALTA2T_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__STALTAT_double_t = {"_p_Seiscomp__Math__Filtering__STALTAT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__STALTAT_float_t = {"_p_Seiscomp__Math__Filtering__STALTAT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t = {"_p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t = {"_p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Restitution__FFT__PolesAndZeros = {"_p_Seiscomp__Math__Restitution__FFT__PolesAndZeros", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Restitution__FFT__ResponseList = {"_p_Seiscomp__Math__Restitution__FFT__ResponseList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Restitution__FFT__TransferFunction = {"_p_Seiscomp__Math__Restitution__FFT__TransferFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Record = {"_p_Seiscomp__Record", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__RecordStream__Arclink__ArclinkConnection = {"_p_Seiscomp__RecordStream__Arclink__ArclinkConnection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__RecordStream__CombinedConnection = {"_p_Seiscomp__RecordStream__CombinedConnection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__RecordStream__File = {"_p_Seiscomp__RecordStream__File", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__RecordStream__SLConnection = {"_p_Seiscomp__RecordStream__SLConnection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_char_t = {"_p_Seiscomp__TypedArrayT_char_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_double_t = {"_p_Seiscomp__TypedArrayT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_float_t = {"_p_Seiscomp__TypedArrayT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_int_t = {"_p_Seiscomp__TypedArrayT_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EDataUsedWaveType_Seiscomp__DataModel__EDataUsedWaveTypeQuantity_Seiscomp__DataModel__EDataUsedWaveTypeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EDataUsedWaveType_Seiscomp__DataModel__EDataUsedWaveTypeQuantity_Seiscomp__DataModel__EDataUsedWaveTypeNames_t", "Seiscomp::DataModel::DataUsedWaveType *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EDataUsedWaveType,Seiscomp::DataModel::EDataUsedWaveTypeQuantity,Seiscomp::DataModel::EDataUsedWaveTypeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationMode_Seiscomp__DataModel__EEvaluationModeQuantity_Seiscomp__DataModel__EEvaluationModeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationMode_Seiscomp__DataModel__EEvaluationModeQuantity_Seiscomp__DataModel__EEvaluationModeNames_t", "Seiscomp::DataModel::EvaluationMode *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EEvaluationMode,Seiscomp::DataModel::EEvaluationModeQuantity,Seiscomp::DataModel::EEvaluationModeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationStatus_Seiscomp__DataModel__EEvaluationStatusQuantity_Seiscomp__DataModel__EEvaluationStatusNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationStatus_Seiscomp__DataModel__EEvaluationStatusQuantity_Seiscomp__DataModel__EEvaluationStatusNames_t", "Seiscomp::DataModel::EvaluationStatus *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EEvaluationStatus,Seiscomp::DataModel::EEvaluationStatusQuantity,Seiscomp::DataModel::EEvaluationStatusNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventDescriptionType_Seiscomp__DataModel__EEventDescriptionTypeQuantity_Seiscomp__DataModel__EEventDescriptionTypeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventDescriptionType_Seiscomp__DataModel__EEventDescriptionTypeQuantity_Seiscomp__DataModel__EEventDescriptionTypeNames_t", "Seiscomp::DataModel::EventDescriptionType *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EEventDescriptionType,Seiscomp::DataModel::EEventDescriptionTypeQuantity,Seiscomp::DataModel::EEventDescriptionTypeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventTypeCertainty_Seiscomp__DataModel__EEventTypeCertaintyQuantity_Seiscomp__DataModel__EEventTypeCertaintyNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventTypeCertainty_Seiscomp__DataModel__EEventTypeCertaintyQuantity_Seiscomp__DataModel__EEventTypeCertaintyNames_t", "Seiscomp::DataModel::EventTypeCertainty *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EEventTypeCertainty,Seiscomp::DataModel::EEventTypeCertaintyQuantity,Seiscomp::DataModel::EEventTypeCertaintyNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventType_Seiscomp__DataModel__EEventTypeQuantity_Seiscomp__DataModel__EEventTypeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventType_Seiscomp__DataModel__EEventTypeQuantity_Seiscomp__DataModel__EEventTypeNames_t", "Seiscomp::DataModel::EventType *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EEventType,Seiscomp::DataModel::EEventTypeQuantity,Seiscomp::DataModel::EEventTypeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EInventoryError_Seiscomp__DataModel__EInventoryErrorQuantity_Seiscomp__DataModel__EInventoryErrorNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EInventoryError_Seiscomp__DataModel__EInventoryErrorQuantity_Seiscomp__DataModel__EInventoryErrorNames_t", "Seiscomp::DataModel::InventoryError *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EInventoryError,Seiscomp::DataModel::EInventoryErrorQuantity,Seiscomp::DataModel::EInventoryErrorNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorMethod_Seiscomp__DataModel__EMomentTensorMethodQuantity_Seiscomp__DataModel__EMomentTensorMethodNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorMethod_Seiscomp__DataModel__EMomentTensorMethodQuantity_Seiscomp__DataModel__EMomentTensorMethodNames_t", "Seiscomp::DataModel::MomentTensorMethod *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EMomentTensorMethod,Seiscomp::DataModel::EMomentTensorMethodQuantity,Seiscomp::DataModel::EMomentTensorMethodNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorStatus_Seiscomp__DataModel__EMomentTensorStatusQuantity_Seiscomp__DataModel__EMomentTensorStatusNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorStatus_Seiscomp__DataModel__EMomentTensorStatusQuantity_Seiscomp__DataModel__EMomentTensorStatusNames_t", "Seiscomp::DataModel::MomentTensorStatus *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EMomentTensorStatus,Seiscomp::DataModel::EMomentTensorStatusQuantity,Seiscomp::DataModel::EMomentTensorStatusNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOperation_Seiscomp__DataModel__EOperationQuantity_Seiscomp__DataModel__EOperationNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOperation_Seiscomp__DataModel__EOperationQuantity_Seiscomp__DataModel__EOperationNames_t", "Seiscomp::DataModel::Operation *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EOperation,Seiscomp::DataModel::EOperationQuantity,Seiscomp::DataModel::EOperationNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginDepthType_Seiscomp__DataModel__EOriginDepthTypeQuantity_Seiscomp__DataModel__EOriginDepthTypeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginDepthType_Seiscomp__DataModel__EOriginDepthTypeQuantity_Seiscomp__DataModel__EOriginDepthTypeNames_t", "Seiscomp::DataModel::OriginDepthType *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EOriginDepthType,Seiscomp::DataModel::EOriginDepthTypeQuantity,Seiscomp::DataModel::EOriginDepthTypeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginType_Seiscomp__DataModel__EOriginTypeQuantity_Seiscomp__DataModel__EOriginTypeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginType_Seiscomp__DataModel__EOriginTypeQuantity_Seiscomp__DataModel__EOriginTypeNames_t", "Seiscomp::DataModel::OriginType *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EOriginType,Seiscomp::DataModel::EOriginTypeQuantity,Seiscomp::DataModel::EOriginTypeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginUncertaintyDescription_Seiscomp__DataModel__EOriginUncertaintyDescriptionQuantity_Seiscomp__DataModel__EOriginUncertaintyDescriptionNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginUncertaintyDescription_Seiscomp__DataModel__EOriginUncertaintyDescriptionQuantity_Seiscomp__DataModel__EOriginUncertaintyDescriptionNames_t", "Seiscomp::DataModel::OriginUncertaintyDescription *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EOriginUncertaintyDescription,Seiscomp::DataModel::EOriginUncertaintyDescriptionQuantity,Seiscomp::DataModel::EOriginUncertaintyDescriptionNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickOnset_Seiscomp__DataModel__EPickOnsetQuantity_Seiscomp__DataModel__EPickOnsetNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickOnset_Seiscomp__DataModel__EPickOnsetQuantity_Seiscomp__DataModel__EPickOnsetNames_t", "Seiscomp::DataModel::PickOnset *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EPickOnset,Seiscomp::DataModel::EPickOnsetQuantity,Seiscomp::DataModel::EPickOnsetNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickPolarity_Seiscomp__DataModel__EPickPolarityQuantity_Seiscomp__DataModel__EPickPolarityNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickPolarity_Seiscomp__DataModel__EPickPolarityQuantity_Seiscomp__DataModel__EPickPolarityNames_t", "Seiscomp::DataModel::PickPolarity *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EPickPolarity,Seiscomp::DataModel::EPickPolarityQuantity,Seiscomp::DataModel::EPickPolarityNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__ESourceTimeFunctionType_Seiscomp__DataModel__ESourceTimeFunctionTypeQuantity_Seiscomp__DataModel__ESourceTimeFunctionTypeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__ESourceTimeFunctionType_Seiscomp__DataModel__ESourceTimeFunctionTypeQuantity_Seiscomp__DataModel__ESourceTimeFunctionTypeNames_t", "Seiscomp::DataModel::SourceTimeFunctionType *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::ESourceTimeFunctionType,Seiscomp::DataModel::ESourceTimeFunctionTypeQuantity,Seiscomp::DataModel::ESourceTimeFunctionTypeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EStationGroupType_Seiscomp__DataModel__EStationGroupTypeQuantity_Seiscomp__DataModel__EStationGroupTypeNames_t = {"_p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EStationGroupType_Seiscomp__DataModel__EStationGroupTypeQuantity_Seiscomp__DataModel__EStationGroupTypeNames_t", "Seiscomp::DataModel::StationGroupType *|Seiscomp::Core::Enum< enum Seiscomp::DataModel::EStationGroupType,Seiscomp::DataModel::EStationGroupTypeQuantity,Seiscomp::DataModel::EStationGroupTypeNames > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__GeneralException = {"_p_Seiscomp__Core__GeneralException", "Seiscomp::Core::GeneralException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__ClassNotFound = {"_p_Seiscomp__Core__ClassNotFound", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__DuplicateClassname = {"_p_Seiscomp__Core__DuplicateClassname", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__EndOfStreamException = {"_p_Seiscomp__Core__EndOfStreamException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__MemoryException = {"_p_Seiscomp__Core__MemoryException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__OperationInterrupted = {"_p_Seiscomp__Core__OperationInterrupted", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__OverflowException = {"_p_Seiscomp__Core__OverflowException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__StreamException = {"_p_Seiscomp__Core__StreamException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__TypeConversionException = {"_p_Seiscomp__Core__TypeConversionException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__TypeException = {"_p_Seiscomp__Core__TypeException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__UnderflowException = {"_p_Seiscomp__Core__UnderflowException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__ValueException = {"_p_Seiscomp__Core__ValueException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__LibmseedException = {"_p_Seiscomp__IO__LibmseedException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordStreamException = {"_p_Seiscomp__IO__RecordStreamException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__RecordStreamTimeout = {"_p_Seiscomp__IO__RecordStreamTimeout", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__RecordStream__SeedlinkCommandException = {"_p_Seiscomp__RecordStream__SeedlinkCommandException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__RecordStream__SeedlinkException = {"_p_Seiscomp__RecordStream__SeedlinkException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t = {"_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t", "Seiscomp::Core::Archive *|Seiscomp::Core::Generic::Archive< Seiscomp::Core::BaseObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__BinaryArchive = {"_p_Seiscomp__IO__BinaryArchive", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__VBinaryArchive = {"_p_Seiscomp__IO__VBinaryArchive", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__IO__XMLArchive = {"_p_Seiscomp__IO__XMLArchive", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__Generic__ClassFactoryInterfaceT_Seiscomp__Core__BaseObject_t = {"_p_Seiscomp__Core__Generic__ClassFactoryInterfaceT_Seiscomp__Core__BaseObject_t", "Seiscomp::Core::ClassFactory *|Seiscomp::Core::Generic::ClassFactoryInterface< Seiscomp::Core::BaseObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__OptionalT_double_t = {"_p_Seiscomp__Core__OptionalT_double_t", "Seiscomp::Core::Optional< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_const_t", "Seiscomp::ArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Array const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_t", "Seiscomp::ArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Array > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_const_t", "Seiscomp::BitSetCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::BitSet const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_t", "Seiscomp::BitSetPtr *|Seiscomp::Core::SmartPointer< Seiscomp::BitSet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_const_t", "Seiscomp::DataModel::ConfigCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Config const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_t", "Seiscomp::DataModel::ConfigPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Config > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_const_t", "Seiscomp::Core::BaseObjectCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::BaseObject const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_t", "Seiscomp::Core::BaseObjectPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::BaseObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__DataMessage_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__DataMessage_t", "Seiscomp::Core::DataMessagePtr *|::Seiscomp::Core::SmartPointer< Seiscomp::Core::DataMessage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_const_t", "Seiscomp::Core::GreensFunctionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::GreensFunction const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_t", "Seiscomp::Core::GreensFunctionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::GreensFunction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_const_t", "Seiscomp::Core::InterruptibleObjectCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::InterruptibleObject const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_t", "Seiscomp::Core::InterruptibleObjectPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::InterruptibleObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_const_t", "Seiscomp::Core::MessageCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::Message const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_t", "Seiscomp::Core::MessagePtr *|Seiscomp::Core::SmartPointer< Seiscomp::Core::Message > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_const_t", "Seiscomp::DataModel::AccessCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Access const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_t", "Seiscomp::DataModel::AccessPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Access > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_const_t", "Seiscomp::DataModel::AmplitudeReferenceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AmplitudeReference const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_t", "Seiscomp::DataModel::AmplitudeReferencePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AmplitudeReference > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_const_t", "Seiscomp::DataModel::AmplitudeCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Amplitude const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_t", "Seiscomp::DataModel::AmplitudePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Amplitude > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_const_t", "Seiscomp::DataModel::ArclinkLogCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkLog const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_t", "Seiscomp::DataModel::ArclinkLogPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkLog > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_const_t", "Seiscomp::DataModel::ArclinkRequestLineCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkRequestLine const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_t", "Seiscomp::DataModel::ArclinkRequestLinePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkRequestLine > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_const_t", "Seiscomp::DataModel::ArclinkRequestSummaryCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkRequestSummary const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_t", "Seiscomp::DataModel::ArclinkRequestSummaryPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkRequestSummary > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_const_t", "Seiscomp::DataModel::ArclinkRequestCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkRequest const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_t", "Seiscomp::DataModel::ArclinkRequestPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkRequest > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_const_t", "Seiscomp::DataModel::ArclinkStatusLineCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkStatusLine const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_t", "Seiscomp::DataModel::ArclinkStatusLinePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkStatusLine > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_const_t", "Seiscomp::DataModel::ArclinkUserCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkUser const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_t", "Seiscomp::DataModel::ArclinkUserPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArclinkUser > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_const_t", "Seiscomp::DataModel::ArrivalCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Arrival const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_t", "Seiscomp::DataModel::ArrivalPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Arrival > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_const_t", "Seiscomp::DataModel::ArtificialEventParametersMessageCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArtificialEventParametersMessage const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_t", "Seiscomp::DataModel::ArtificialEventParametersMessagePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArtificialEventParametersMessage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_const_t", "Seiscomp::DataModel::ArtificialOriginMessageCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArtificialOriginMessage const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_t", "Seiscomp::DataModel::ArtificialOriginMessagePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ArtificialOriginMessage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_const_t", "Seiscomp::DataModel::AuxDeviceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AuxDevice const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_t", "Seiscomp::DataModel::AuxDevicePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AuxDevice > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_const_t", "Seiscomp::DataModel::AuxSourceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AuxSource const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_t", "Seiscomp::DataModel::AuxSourcePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AuxSource > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_const_t", "Seiscomp::DataModel::AuxStreamCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AuxStream const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_t", "Seiscomp::DataModel::AuxStreamPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::AuxStream > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_const_t", "Seiscomp::DataModel::AxisCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Axis const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_t", "Seiscomp::DataModel::AxisPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Axis > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_const_t", "Seiscomp::DataModel::BlobCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Blob const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_t", "Seiscomp::DataModel::BlobPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Blob > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_const_t", "Seiscomp::DataModel::CommentCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Comment const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_t", "Seiscomp::DataModel::CommentPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Comment > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_const_t", "Seiscomp::DataModel::ComplexArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ComplexArray const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_t", "Seiscomp::DataModel::ComplexArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ComplexArray > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_const_t", "Seiscomp::DataModel::CompositeTimeCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::CompositeTime const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_t", "Seiscomp::DataModel::CompositeTimePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::CompositeTime > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_const_t", "Seiscomp::DataModel::ConfidenceEllipsoidCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfidenceEllipsoid const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_t", "Seiscomp::DataModel::ConfidenceEllipsoidPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfidenceEllipsoid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_const_t", "Seiscomp::DataModel::ConfigModuleCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfigModule const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_t", "Seiscomp::DataModel::ConfigModulePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfigModule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_const_t", "Seiscomp::DataModel::ConfigStationCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfigStation const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_t", "Seiscomp::DataModel::ConfigStationPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfigStation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_const_t", "Seiscomp::DataModel::ConfigSyncMessageCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfigSyncMessage const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_t", "Seiscomp::DataModel::ConfigSyncMessagePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ConfigSyncMessage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_const_t", "Seiscomp::DataModel::CreationInfoCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::CreationInfo const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_t", "Seiscomp::DataModel::CreationInfoPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::CreationInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_const_t", "Seiscomp::DataModel::DataAttributeExtentCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataAttributeExtent const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_t", "Seiscomp::DataModel::DataAttributeExtentPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataAttributeExtent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_const_t", "Seiscomp::DataModel::DataAvailabilityCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataAvailability const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_t", "Seiscomp::DataModel::DataAvailabilityPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataAvailability > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_const_t", "Seiscomp::DataModel::DataExtentCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataExtent const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_t", "Seiscomp::DataModel::DataExtentPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataExtent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_const_t", "Seiscomp::DataModel::DataSegmentCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataSegment const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_t", "Seiscomp::DataModel::DataSegmentPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataSegment > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_const_t", "Seiscomp::DataModel::DataUsedCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataUsed const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_t", "Seiscomp::DataModel::DataUsedPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataUsed > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_const_t", "Seiscomp::DataModel::DatabaseArchiveCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DatabaseArchive const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_t", "Seiscomp::DataModel::DatabaseArchivePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DatabaseArchive > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_const_t", "Seiscomp::DataModel::DatabaseQueryCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DatabaseQuery const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_t", "Seiscomp::DataModel::DatabaseQueryPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DatabaseQuery > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_const_t", "Seiscomp::DataModel::DatabaseReaderCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DatabaseReader const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_t", "Seiscomp::DataModel::DatabaseReaderPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DatabaseReader > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_const_t", "Seiscomp::DataModel::DataloggerCalibrationCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataloggerCalibration const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_t", "Seiscomp::DataModel::DataloggerCalibrationPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::DataloggerCalibration > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_const_t", "Seiscomp::DataModel::DataloggerCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Datalogger const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_t", "Seiscomp::DataModel::DataloggerPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Datalogger > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_const_t", "Seiscomp::DataModel::DecimationCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Decimation const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_t", "Seiscomp::DataModel::DecimationPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Decimation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_const_t", "Seiscomp::DataModel::EventDescriptionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::EventDescription const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_t", "Seiscomp::DataModel::EventDescriptionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::EventDescription > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_const_t", "Seiscomp::DataModel::EventParametersCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::EventParameters const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_t", "Seiscomp::DataModel::EventParametersPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::EventParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_const_t", "Seiscomp::DataModel::EventCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Event const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_t", "Seiscomp::DataModel::EventPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Event > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_const_t", "Seiscomp::DataModel::FocalMechanismReferenceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::FocalMechanismReference const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_t", "Seiscomp::DataModel::FocalMechanismReferencePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::FocalMechanismReference > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_const_t", "Seiscomp::DataModel::FocalMechanismCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::FocalMechanism const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_t", "Seiscomp::DataModel::FocalMechanismPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::FocalMechanism > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_const_t", "Seiscomp::DataModel::IntegerQuantityCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::IntegerQuantity const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_t", "Seiscomp::DataModel::IntegerQuantityPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::IntegerQuantity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_const_t", "Seiscomp::DataModel::InventorySyncMessageCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::InventorySyncMessage const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_t", "Seiscomp::DataModel::InventorySyncMessagePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::InventorySyncMessage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_const_t", "Seiscomp::DataModel::InventoryCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Inventory const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_t", "Seiscomp::DataModel::InventoryPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Inventory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_const_t", "Seiscomp::DataModel::JournalEntryCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::JournalEntry const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_t", "Seiscomp::DataModel::JournalEntryPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::JournalEntry > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_const_t", "Seiscomp::DataModel::JournalingCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Journaling const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_t", "Seiscomp::DataModel::JournalingPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Journaling > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_const_t", "Seiscomp::DataModel::MagnitudeCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Magnitude const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_t", "Seiscomp::DataModel::MagnitudePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Magnitude > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_const_t", "Seiscomp::DataModel::MomentTensorComponentContributionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensorComponentContribution const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_t", "Seiscomp::DataModel::MomentTensorComponentContributionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensorComponentContribution > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_const_t", "Seiscomp::DataModel::MomentTensorPhaseSettingCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensorPhaseSetting const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_t", "Seiscomp::DataModel::MomentTensorPhaseSettingPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensorPhaseSetting > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_const_t", "Seiscomp::DataModel::MomentTensorStationContributionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensorStationContribution const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_t", "Seiscomp::DataModel::MomentTensorStationContributionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensorStationContribution > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_const_t", "Seiscomp::DataModel::MomentTensorCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensor const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_t", "Seiscomp::DataModel::MomentTensorPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::MomentTensor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_const_t", "Seiscomp::DataModel::NetworkCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Network const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_t", "Seiscomp::DataModel::NetworkPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Network > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_const_t", "Seiscomp::DataModel::NodalPlaneCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::NodalPlane const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_t", "Seiscomp::DataModel::NodalPlanePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::NodalPlane > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_const_t", "Seiscomp::DataModel::NodalPlanesCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::NodalPlanes const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_t", "Seiscomp::DataModel::NodalPlanesPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::NodalPlanes > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NotifierMessage_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NotifierMessage_t", "Seiscomp::DataModel::NotifierMessagePtr *|::Seiscomp::Core::SmartPointer< Seiscomp::DataModel::NotifierMessage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_const_t", "Seiscomp::DataModel::NotifierCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Notifier const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_t", "Seiscomp::DataModel::NotifierPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Notifier > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_const_t", "Seiscomp::DataModel::ObjectCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Object const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_t", "Seiscomp::DataModel::ObjectPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Object > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_const_t", "Seiscomp::DataModel::ObserverCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Observer const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_t", "Seiscomp::DataModel::ObserverPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Observer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_const_t", "Seiscomp::DataModel::OriginQualityCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::OriginQuality const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_t", "Seiscomp::DataModel::OriginQualityPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::OriginQuality > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_const_t", "Seiscomp::DataModel::OriginReferenceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::OriginReference const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_t", "Seiscomp::DataModel::OriginReferencePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::OriginReference > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_const_t", "Seiscomp::DataModel::OriginUncertaintyCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::OriginUncertainty const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_t", "Seiscomp::DataModel::OriginUncertaintyPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::OriginUncertainty > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_const_t", "Seiscomp::DataModel::OriginCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Origin const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_t", "Seiscomp::DataModel::OriginPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Origin > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_const_t", "Seiscomp::DataModel::OutageCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Outage const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_t", "Seiscomp::DataModel::OutagePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Outage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_const_t", "Seiscomp::DataModel::ParameterSetCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ParameterSet const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_t", "Seiscomp::DataModel::ParameterSetPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ParameterSet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_const_t", "Seiscomp::DataModel::ParameterCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Parameter const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_t", "Seiscomp::DataModel::ParameterPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Parameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_const_t", "Seiscomp::DataModel::PhaseCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Phase const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_t", "Seiscomp::DataModel::PhasePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Phase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_const_t", "Seiscomp::DataModel::PickReferenceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::PickReference const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_t", "Seiscomp::DataModel::PickReferencePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::PickReference > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_const_t", "Seiscomp::DataModel::PickCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Pick const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_t", "Seiscomp::DataModel::PickPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Pick > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_const_t", "Seiscomp::DataModel::PrincipalAxesCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::PrincipalAxes const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_t", "Seiscomp::DataModel::PrincipalAxesPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::PrincipalAxes > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_const_t", "Seiscomp::DataModel::PublicObjectCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::PublicObject const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_t", "Seiscomp::DataModel::PublicObjectPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::PublicObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_const_t", "Seiscomp::DataModel::QCLogCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::QCLog const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_t", "Seiscomp::DataModel::QCLogPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::QCLog > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_const_t", "Seiscomp::DataModel::QualityControlCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::QualityControl const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_t", "Seiscomp::DataModel::QualityControlPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::QualityControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_const_t", "Seiscomp::DataModel::ReadingCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Reading const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_t", "Seiscomp::DataModel::ReadingPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Reading > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_const_t", "Seiscomp::DataModel::RealArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RealArray const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_t", "Seiscomp::DataModel::RealArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RealArray > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_const_t", "Seiscomp::DataModel::RealPDF1DCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RealPDF1D const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_t", "Seiscomp::DataModel::RealPDF1DPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RealPDF1D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_const_t", "Seiscomp::DataModel::RealQuantityCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RealQuantity const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_t", "Seiscomp::DataModel::RealQuantityPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RealQuantity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_const_t", "Seiscomp::DataModel::ResponseFAPCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponseFAP const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_t", "Seiscomp::DataModel::ResponseFAPPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponseFAP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_const_t", "Seiscomp::DataModel::ResponseFIRCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponseFIR const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_t", "Seiscomp::DataModel::ResponseFIRPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponseFIR > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_const_t", "Seiscomp::DataModel::ResponseIIRCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponseIIR const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_t", "Seiscomp::DataModel::ResponseIIRPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponseIIR > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_const_t", "Seiscomp::DataModel::ResponsePAZCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponsePAZ const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_t", "Seiscomp::DataModel::ResponsePAZPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponsePAZ > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_const_t", "Seiscomp::DataModel::ResponsePolynomialCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponsePolynomial const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_t", "Seiscomp::DataModel::ResponsePolynomialPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::ResponsePolynomial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_const_t", "Seiscomp::DataModel::RouteArclinkCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RouteArclink const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_t", "Seiscomp::DataModel::RouteArclinkPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RouteArclink > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_const_t", "Seiscomp::DataModel::RouteSeedlinkCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RouteSeedlink const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_t", "Seiscomp::DataModel::RouteSeedlinkPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::RouteSeedlink > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_const_t", "Seiscomp::DataModel::RouteCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Route const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_t", "Seiscomp::DataModel::RoutePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Route > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_const_t", "Seiscomp::DataModel::RoutingCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Routing const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_t", "Seiscomp::DataModel::RoutingPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Routing > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_const_t", "Seiscomp::DataModel::SensorCalibrationCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::SensorCalibration const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_t", "Seiscomp::DataModel::SensorCalibrationPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::SensorCalibration > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_const_t", "Seiscomp::DataModel::SensorLocationCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::SensorLocation const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_t", "Seiscomp::DataModel::SensorLocationPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::SensorLocation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_const_t", "Seiscomp::DataModel::SensorCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Sensor const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_t", "Seiscomp::DataModel::SensorPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Sensor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_const_t", "Seiscomp::DataModel::SetupCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Setup const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_t", "Seiscomp::DataModel::SetupPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Setup > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_const_t", "Seiscomp::DataModel::SourceTimeFunctionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::SourceTimeFunction const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_t", "Seiscomp::DataModel::SourceTimeFunctionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::SourceTimeFunction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_const_t", "Seiscomp::DataModel::StationGroupCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationGroup const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_t", "Seiscomp::DataModel::StationGroupPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationGroup > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_const_t", "Seiscomp::DataModel::StationMagnitudeContributionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationMagnitudeContribution const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_t", "Seiscomp::DataModel::StationMagnitudeContributionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationMagnitudeContribution > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_const_t", "Seiscomp::DataModel::StationMagnitudeCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationMagnitude const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_t", "Seiscomp::DataModel::StationMagnitudePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationMagnitude > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_const_t", "Seiscomp::DataModel::StationReferenceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationReference const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_t", "Seiscomp::DataModel::StationReferencePtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::StationReference > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_const_t", "Seiscomp::DataModel::StationCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Station const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_t", "Seiscomp::DataModel::StationPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Station > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_const_t", "Seiscomp::DataModel::StreamCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Stream const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_t", "Seiscomp::DataModel::StreamPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Stream > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_const_t", "Seiscomp::DataModel::TensorCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Tensor const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_t", "Seiscomp::DataModel::TensorPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Tensor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_const_t", "Seiscomp::DataModel::TimeArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimeArray const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_t", "Seiscomp::DataModel::TimeArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimeArray > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_const_t", "Seiscomp::DataModel::TimePDF1DCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimePDF1D const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_t", "Seiscomp::DataModel::TimePDF1DPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimePDF1D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_const_t", "Seiscomp::DataModel::TimeQuantityCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimeQuantity const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_t", "Seiscomp::DataModel::TimeQuantityPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimeQuantity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_const_t", "Seiscomp::DataModel::TimeWindowCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimeWindow const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_t", "Seiscomp::DataModel::TimeWindowPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::TimeWindow > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_const_t", "Seiscomp::DataModel::VisitorCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Visitor const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_t", "Seiscomp::DataModel::VisitorPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::Visitor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_const_t", "Seiscomp::DataModel::WaveformQualityCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::WaveformQuality const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_t", "Seiscomp::DataModel::WaveformQualityPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::WaveformQuality > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_const_t", "Seiscomp::DataModel::WaveformStreamIDCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::WaveformStreamID const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_t", "Seiscomp::DataModel::WaveformStreamIDPtr *|Seiscomp::Core::SmartPointer< Seiscomp::DataModel::WaveformStreamID > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_const_t", "Seiscomp::GenericRecordCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::GenericRecord const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_t", "Seiscomp::GenericRecordPtr *|Seiscomp::Core::SmartPointer< Seiscomp::GenericRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_const_t", "Seiscomp::Geo::CategoryCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Geo::Category const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_t", "Seiscomp::Geo::CategoryPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Geo::Category > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_const_t", "Seiscomp::Geo::GeoFeatureCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Geo::GeoFeature const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_t", "Seiscomp::Geo::GeoFeaturePtr *|Seiscomp::Core::SmartPointer< Seiscomp::Geo::GeoFeature > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_const_t", "Seiscomp::IO::CropperCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::Cropper const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_t", "Seiscomp::IO::CropperPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::Cropper > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_const_t", "Seiscomp::IO::DatabaseInterfaceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::DatabaseInterface const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_t", "Seiscomp::IO::DatabaseInterfacePtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::DatabaseInterface > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_const_t", "Seiscomp::IO::ExporterCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::Exporter const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_t", "Seiscomp::IO::ExporterPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::Exporter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_const_t", "Seiscomp::IO::GFArchiveCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::GFArchive const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_t", "Seiscomp::IO::GFArchivePtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::GFArchive > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_const_t", "Seiscomp::IO::ImporterCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::Importer const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_t", "Seiscomp::IO::ImporterPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::Importer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_const_t", "Seiscomp::IO::MSeedRecordCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::MSeedRecord const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_t", "Seiscomp::IO::MSeedRecordPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::MSeedRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_const_t", "Seiscomp::IO::RecordFilterInterfaceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::RecordFilterInterface const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_t", "Seiscomp::IO::RecordFilterInterfacePtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::RecordFilterInterface > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_const_t", "Seiscomp::IO::RecordInputCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::RecordInput const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_t", "Seiscomp::IO::RecordInputPtr *|Seiscomp::Core::SmartPointer< Seiscomp::IO::RecordInput > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_const_t", "Seiscomp::Math::Restitution::FFT::TransferFunctionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Math::Restitution::FFT::TransferFunction const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_t", "Seiscomp::Math::Restitution::FFT::TransferFunctionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Math::Restitution::FFT::TransferFunction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_const_t", "Seiscomp::CharArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< char > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_t", "Seiscomp::CharArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_const_t", "Seiscomp::DoubleArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< double > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_t", "Seiscomp::DoubleArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_const_t", "Seiscomp::FloatArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< float > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_t", "Seiscomp::FloatArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_const_t", "Seiscomp::Int32ArrayCPtr *|Seiscomp::IntArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< int > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_t", "Seiscomp::Int32ArrayPtr *|Seiscomp::IntArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::NumericArray< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_const_t", "Seiscomp::RecordStream::Arclink::ArclinkConnectionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::Arclink::ArclinkConnection const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_t", "Seiscomp::RecordStream::Arclink::ArclinkConnectionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::Arclink::ArclinkConnection > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_const_t", "Seiscomp::RecordStream::CombinedConnectionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::CombinedConnection const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_t", "Seiscomp::RecordStream::CombinedConnectionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::CombinedConnection > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_const_t", "Seiscomp::RecordStream::FileCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::File const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_t", "Seiscomp::RecordStream::FilePtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::File > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_const_t", "Seiscomp::RecordStream::SLConnectionCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::SLConnection const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_t", "Seiscomp::RecordStream::SLConnectionPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream::SLConnection > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_const_t", "Seiscomp::IO::RecordStreamCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_t", "Seiscomp::IO::RecordStreamPtr *|Seiscomp::Core::SmartPointer< Seiscomp::RecordStream > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_const_t", "Seiscomp::RecordCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Record const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_t", "Seiscomp::RecordPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Record > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_const_t", "Seiscomp::Seismology::LocatorInterfaceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Seismology::LocatorInterface const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_t", "Seiscomp::Seismology::LocatorInterfacePtr *|Seiscomp::Core::SmartPointer< Seiscomp::Seismology::LocatorInterface > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_const_t", "Seiscomp::Seismology::SensorLocationDelegateCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::Seismology::SensorLocationDelegate const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_t", "Seiscomp::Seismology::SensorLocationDelegatePtr *|Seiscomp::Core::SmartPointer< Seiscomp::Seismology::SensorLocationDelegate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_const_t", "Seiscomp::TravelTimeTableInterfaceCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TravelTimeTableInterface const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_t", "Seiscomp::TravelTimeTableInterfacePtr *|Seiscomp::Core::SmartPointer< Seiscomp::TravelTimeTableInterface > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_const_t", "Seiscomp::DateTimeArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< Seiscomp::Core::Time > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_t", "Seiscomp::DateTimeArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< Seiscomp::Core::Time > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_const_t", "Seiscomp::ComplexDoubleArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< std::complex< double > > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_t", "Seiscomp::ComplexDoubleArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_const_t", "Seiscomp::ComplexFloatArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< std::complex< float > > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_t", "Seiscomp::ComplexFloatArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< std::complex< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_const_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_const_t", "Seiscomp::StringArrayCPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< std::string > const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_t = {"_p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_t", "Seiscomp::StringArrayPtr *|Seiscomp::Core::SmartPointer< Seiscomp::TypedArray< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__Time = {"_p_Seiscomp__Core__Time", "Seiscomp::Core::Time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ArclinkRequestSummary = {"_p_Seiscomp__DataModel__ArclinkRequestSummary", "Seiscomp::DataModel::ArclinkRequestSummary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Arrival = {"_p_Seiscomp__DataModel__Arrival", "Seiscomp::DataModel::Arrival *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Axis = {"_p_Seiscomp__DataModel__Axis", "Seiscomp::DataModel::Axis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Blob = {"_p_Seiscomp__DataModel__Blob", "Seiscomp::DataModel::Blob *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ComplexArray = {"_p_Seiscomp__DataModel__ComplexArray", "Seiscomp::DataModel::ComplexArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__ConfidenceEllipsoid = {"_p_Seiscomp__DataModel__ConfidenceEllipsoid", "Seiscomp::DataModel::ConfidenceEllipsoid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__CreationInfo = {"_p_Seiscomp__DataModel__CreationInfo", "Seiscomp::DataModel::CreationInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__IntegerQuantity = {"_p_Seiscomp__DataModel__IntegerQuantity", "Seiscomp::DataModel::IntegerQuantity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__NodalPlane = {"_p_Seiscomp__DataModel__NodalPlane", "Seiscomp::DataModel::NodalPlane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__NodalPlanes = {"_p_Seiscomp__DataModel__NodalPlanes", "Seiscomp::DataModel::NodalPlanes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Origin = {"_p_Seiscomp__DataModel__Origin", "Seiscomp::DataModel::Origin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__OriginQuality = {"_p_Seiscomp__DataModel__OriginQuality", "Seiscomp::DataModel::OriginQuality *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__OriginUncertainty = {"_p_Seiscomp__DataModel__OriginUncertainty", "Seiscomp::DataModel::OriginUncertainty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Phase = {"_p_Seiscomp__DataModel__Phase", "Seiscomp::DataModel::Phase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Pick = {"_p_Seiscomp__DataModel__Pick", "Seiscomp::DataModel::Pick *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__PrincipalAxes = {"_p_Seiscomp__DataModel__PrincipalAxes", "Seiscomp::DataModel::PrincipalAxes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__RealArray = {"_p_Seiscomp__DataModel__RealArray", "Seiscomp::DataModel::RealArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__RealPDF1D = {"_p_Seiscomp__DataModel__RealPDF1D", "Seiscomp::DataModel::RealPDF1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__RealQuantity = {"_p_Seiscomp__DataModel__RealQuantity", "Seiscomp::DataModel::RealQuantity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__SensorLocation = {"_p_Seiscomp__DataModel__SensorLocation", "Seiscomp::DataModel::SensorLocation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__SourceTimeFunction = {"_p_Seiscomp__DataModel__SourceTimeFunction", "Seiscomp::DataModel::SourceTimeFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__Tensor = {"_p_Seiscomp__DataModel__Tensor", "Seiscomp::DataModel::Tensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__TimeArray = {"_p_Seiscomp__DataModel__TimeArray", "Seiscomp::DataModel::TimeArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__TimePDF1D = {"_p_Seiscomp__DataModel__TimePDF1D", "Seiscomp::DataModel::TimePDF1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__TimeQuantity = {"_p_Seiscomp__DataModel__TimeQuantity", "Seiscomp::DataModel::TimeQuantity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__TimeWindow = {"_p_Seiscomp__DataModel__TimeWindow", "Seiscomp::DataModel::TimeWindow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__DataModel__WaveformStreamID = {"_p_Seiscomp__DataModel__WaveformStreamID", "Seiscomp::DataModel::WaveformStreamID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__FileNotFoundError = {"_p_Seiscomp__FileNotFoundError", "Seiscomp::FileNotFoundError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Geo__GeoCoordinate = {"_p_Seiscomp__Geo__GeoCoordinate", "Seiscomp::Geo::Vertex *|Seiscomp::Geo::GeoCoordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Geo__PolyRegions = {"_p_Seiscomp__Geo__PolyRegions", "Seiscomp::Geo::PolyRegions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Geo__CityT_double_t = {"_p_Seiscomp__Math__Geo__CityT_double_t", "Seiscomp::Math::Geo::CityD *|Seiscomp::Math::Geo::City< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Geo__CityT_float_t = {"_p_Seiscomp__Math__Geo__CityT_float_t", "Seiscomp::Math::Geo::CityF *|Seiscomp::Math::Geo::City< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Geo__CoordT_double_t = {"_p_Seiscomp__Math__Geo__CoordT_double_t", "Seiscomp::Math::Geo::CoordD *|Seiscomp::Math::Geo::Coord< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Geo__CoordT_float_t = {"_p_Seiscomp__Math__Geo__CoordT_float_t", "Seiscomp::Math::Geo::CoordF *|Seiscomp::Math::Geo::Coord< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Geo__NamedCoordT_double_t = {"_p_Seiscomp__Math__Geo__NamedCoordT_double_t", "Seiscomp::Math::Geo::NamedCoordD *|Seiscomp::Math::Geo::NamedCoord< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Geo__NamedCoordT_float_t = {"_p_Seiscomp__Math__Geo__NamedCoordT_float_t", "Seiscomp::Math::Geo::NamedCoordF *|Seiscomp::Math::Geo::NamedCoord< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__MultipleModelsError = {"_p_Seiscomp__MultipleModelsError", "Seiscomp::MultipleModelsError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__NoPhaseError = {"_p_Seiscomp__NoPhaseError", "Seiscomp::NoPhaseError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__NumericArrayT_char_t = {"_p_Seiscomp__NumericArrayT_char_t", "Seiscomp::CharArray *|Seiscomp::NumericArray< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__NumericArrayT_double_t = {"_p_Seiscomp__NumericArrayT_double_t", "Seiscomp::DoubleArray *|Seiscomp::NumericArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__NumericArrayT_float_t = {"_p_Seiscomp__NumericArrayT_float_t", "Seiscomp::FloatArray *|Seiscomp::NumericArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__NumericArrayT_int_t = {"_p_Seiscomp__NumericArrayT_int_t", "Seiscomp::Int32Array *|Seiscomp::IntArray *|Seiscomp::NumericArray< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Regions = {"_p_Seiscomp__Regions", "Seiscomp::Regions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Seismology__LocatorException = {"_p_Seiscomp__Seismology__LocatorException", "Seiscomp::Seismology::LocatorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Seismology__LocatorInterface = {"_p_Seiscomp__Seismology__LocatorInterface", "Seiscomp::Seismology::LocatorInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Seismology__PickNotFoundException = {"_p_Seiscomp__Seismology__PickNotFoundException", "Seiscomp::Seismology::PickNotFoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Seismology__SensorLocationDelegate = {"_p_Seiscomp__Seismology__SensorLocationDelegate", "Seiscomp::Seismology::SensorLocationDelegate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Seismology__StationNotFoundException = {"_p_Seiscomp__Seismology__StationNotFoundException", "Seiscomp::Seismology::StationNotFoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TravelTime = {"_p_Seiscomp__TravelTime", "std::list< Seiscomp::TravelTime >::value_type *|Seiscomp::TravelTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TravelTimeList = {"_p_Seiscomp__TravelTimeList", "Seiscomp::TravelTimeList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TravelTimeTable = {"_p_Seiscomp__TravelTimeTable", "Seiscomp::TravelTimeTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TravelTimeTableInterface = {"_p_Seiscomp__TravelTimeTableInterface", "Seiscomp::TravelTimeTableInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t = {"_p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t", "Seiscomp::DateTimeArray *|Seiscomp::TypedArray< Seiscomp::Core::Time > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_std__complexT_double_t_t = {"_p_Seiscomp__TypedArrayT_std__complexT_double_t_t", "Seiscomp::ComplexDoubleArray *|Seiscomp::TypedArray< std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_std__complexT_float_t_t = {"_p_Seiscomp__TypedArrayT_std__complexT_float_t_t", "Seiscomp::ComplexFloatArray *|Seiscomp::TypedArray< std::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__TypedArrayT_std__string_t = {"_p_Seiscomp__TypedArrayT_std__string_t", "Seiscomp::StringArray *|Seiscomp::TypedArray< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Storage = {"_p_Storage", "Storage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TimePoint = {"_p_TimePoint", "TimePoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Values = {"_p_Values", "Values *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Weeks = {"_p_Weeks", "Weeks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__any = {"_p_boost__any", "Seiscomp::Core::MetaValue *|boost::any *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__bad_any_cast = {"_p_boost__bad_any_cast", "Seiscomp::Core::BadMetaValueCast *|boost::bad_any_cast *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_file_iterator = {"_p_file_iterator", "file_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_category = {"_p_iterator_category", "iterator_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ssize_t *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Seiscomp__TravelTime_t = {"_p_std__allocatorT_Seiscomp__TravelTime_t", "std::list< Seiscomp::TravelTime >::allocator_type *|std::allocator< Seiscomp::TravelTime > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_t = {"_p_std__basic_iosT_char_t", "std::ios *|std::basic_ios< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "Seiscomp::Math::Complex *|Seiscomp::Math::Restitution::Pole *|Seiscomp::Math::Restitution::Zero *|Seiscomp::Math::SeismometerResponse::Pole *|Seiscomp::Math::SeismometerResponse::Zero *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Seiscomp__Config__CaseSensitivityException = {"_p_Seiscomp__Config__CaseSensitivityException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Config__Exception = {"_p_Seiscomp__Config__Exception", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Config__OptionNotFoundException = {"_p_Seiscomp__Config__OptionNotFoundException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Config__SyntaxException = {"_p_Seiscomp__Config__SyntaxException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Config__TypeConversionException = {"_p_Seiscomp__Config__TypeConversionException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Core__ValueError = {"_p_Seiscomp__Core__ValueError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Seiscomp__Math__Filtering__AlignmentError = {"_p_Seiscomp__Math__Filtering__AlignmentError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Seiscomp__TravelTime_t = {"_p_std__listT_Seiscomp__TravelTime_t", "std::list< Seiscomp::TravelTime,std::allocator< Seiscomp::TravelTime > > *|std::list< Seiscomp::TravelTime > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "Seiscomp::Config::Variables *|std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Seiscomp__Core__MetaObject_t = {"_p_std__shared_ptrT_Seiscomp__Core__MetaObject_t", "Seiscomp::Core::MetaObjectHandle *|std::shared_ptr< Seiscomp::Core::MetaObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Seiscomp__Core__MetaProperty_t = {"_p_std__shared_ptrT_Seiscomp__Core__MetaProperty_t", "Seiscomp::Core::MetaPropertyHandle *|std::shared_ptr< Seiscomp::Core::MetaProperty > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Seiscomp__Core__BaseObject_p_t = {"_p_std__vectorT_Seiscomp__Core__BaseObject_p_t", "Seiscomp::IO::ExportObjectList *|std::vector< Seiscomp::Core::BaseObject *,std::allocator< Seiscomp::Core::BaseObject * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_std__allocatorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_t_t = {"_p_std__vectorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_std__allocatorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_t_t", "Seiscomp::Math::Filtering::IIR::Biquads *|std::vector< Seiscomp::Math::Filtering::IIR::BiquadCoefficients,std::allocator< Seiscomp::Math::Filtering::IIR::BiquadCoefficients > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Seiscomp__Math__SeismometerResponse__FAP_std__allocatorT_Seiscomp__Math__SeismometerResponse__FAP_t_t = {"_p_std__vectorT_Seiscomp__Math__SeismometerResponse__FAP_std__allocatorT_Seiscomp__Math__SeismometerResponse__FAP_t_t", "Seiscomp::Math::SeismometerResponse::FAPs *|std::vector< Seiscomp::Math::SeismometerResponse::FAP,std::allocator< Seiscomp::Math::SeismometerResponse::FAP > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t = {"_p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t", "Seiscomp::Seismology::LocatorInterface::PickList *|std::vector< Seiscomp::Seismology::LocatorInterface::PickItem,std::allocator< Seiscomp::Seismology::LocatorInterface::PickItem > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_t = {"_p_std__vectorT_std__complexT_double_t_t", "Seiscomp::Math::ComplexArray *|Seiscomp::Math::Restitution::Poles *|Seiscomp::Math::Restitution::Zeros *|Seiscomp::Math::SeismometerResponse::Poles *|Seiscomp::Math::SeismometerResponse::Zeros *|std::vector< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Archive,
  &_swigt__p_AttachmentList,
  &_swigt__p_AttachmentType,
  &_swigt__p_Attributes,
  &_swigt__p_Backend,
  &_swigt__p_DataArray,
  &_swigt__p_Days,
  &_swigt__p_Duration,
  &_swigt__p_F1,
  &_swigt__p_F2,
  &_swigt__p_F3,
  &_swigt__p_F4,
  &_swigt__p_F5,
  &_swigt__p_F6,
  &_swigt__p_Flags,
  &_swigt__p_Hours,
  &_swigt__p_IDList,
  &_swigt__p_ImplType,
  &_swigt__p_IncludedFiles,
  &_swigt__p_InplaceFilterType,
  &_swigt__p_Iterator,
  &_swigt__p_LogNodeCPtr,
  &_swigt__p_LogNodePtr,
  &_swigt__p_MSRecord_s,
  &_swigt__p_MajorType,
  &_swigt__p_MicroSeconds,
  &_swigt__p_MilliSeconds,
  &_swigt__p_MinorType,
  &_swigt__p_Minutes,
  &_swigt__p_Notifiers,
  &_swigt__p_OID,
  &_swigt__p_PackType,
  &_swigt__p_ParameterMap,
  &_swigt__p_PatchType,
  &_swigt__p_PickList,
  &_swigt__p_PopCallback,
  &_swigt__p_Properties,
  &_swigt__p_PropertyIndex,
  &_swigt__p_PropertyValue,
  &_swigt__p_PublicObjectMap,
  &_swigt__p_PushCallback,
  &_swigt__p_ReferenceType,
  &_swigt__p_RootType,
  &_swigt__p_Seconds,
  &_swigt__p_Seiscomp__Array,
  &_swigt__p_Seiscomp__BitSet,
  &_swigt__p_Seiscomp__Config__CaseSensitivityException,
  &_swigt__p_Seiscomp__Config__Config,
  &_swigt__p_Seiscomp__Config__Exception,
  &_swigt__p_Seiscomp__Config__OptionNotFoundException,
  &_swigt__p_Seiscomp__Config__SyntaxException,
  &_swigt__p_Seiscomp__Config__TypeConversionException,
  &_swigt__p_Seiscomp__Core__BaseObject,
  &_swigt__p_Seiscomp__Core__ClassNotFound,
  &_swigt__p_Seiscomp__Core__DataMessage,
  &_swigt__p_Seiscomp__Core__DuplicateClassname,
  &_swigt__p_Seiscomp__Core__EndOfStreamException,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EDataUsedWaveType_Seiscomp__DataModel__EDataUsedWaveTypeQuantity_Seiscomp__DataModel__EDataUsedWaveTypeNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationMode_Seiscomp__DataModel__EEvaluationModeQuantity_Seiscomp__DataModel__EEvaluationModeNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationStatus_Seiscomp__DataModel__EEvaluationStatusQuantity_Seiscomp__DataModel__EEvaluationStatusNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventDescriptionType_Seiscomp__DataModel__EEventDescriptionTypeQuantity_Seiscomp__DataModel__EEventDescriptionTypeNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventTypeCertainty_Seiscomp__DataModel__EEventTypeCertaintyQuantity_Seiscomp__DataModel__EEventTypeCertaintyNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventType_Seiscomp__DataModel__EEventTypeQuantity_Seiscomp__DataModel__EEventTypeNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EInventoryError_Seiscomp__DataModel__EInventoryErrorQuantity_Seiscomp__DataModel__EInventoryErrorNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorMethod_Seiscomp__DataModel__EMomentTensorMethodQuantity_Seiscomp__DataModel__EMomentTensorMethodNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorStatus_Seiscomp__DataModel__EMomentTensorStatusQuantity_Seiscomp__DataModel__EMomentTensorStatusNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOperation_Seiscomp__DataModel__EOperationQuantity_Seiscomp__DataModel__EOperationNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginDepthType_Seiscomp__DataModel__EOriginDepthTypeQuantity_Seiscomp__DataModel__EOriginDepthTypeNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginType_Seiscomp__DataModel__EOriginTypeQuantity_Seiscomp__DataModel__EOriginTypeNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginUncertaintyDescription_Seiscomp__DataModel__EOriginUncertaintyDescriptionQuantity_Seiscomp__DataModel__EOriginUncertaintyDescriptionNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickOnset_Seiscomp__DataModel__EPickOnsetQuantity_Seiscomp__DataModel__EPickOnsetNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickPolarity_Seiscomp__DataModel__EPickPolarityQuantity_Seiscomp__DataModel__EPickPolarityNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__ESourceTimeFunctionType_Seiscomp__DataModel__ESourceTimeFunctionTypeQuantity_Seiscomp__DataModel__ESourceTimeFunctionTypeNames_t,
  &_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EStationGroupType_Seiscomp__DataModel__EStationGroupTypeQuantity_Seiscomp__DataModel__EStationGroupTypeNames_t,
  &_swigt__p_Seiscomp__Core__GeneralException,
  &_swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t,
  &_swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t,
  &_swigt__p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t,
  &_swigt__p_Seiscomp__Core__Generic__ClassFactoryInterfaceT_Seiscomp__Core__BaseObject_t,
  &_swigt__p_Seiscomp__Core__GreensFunction,
  &_swigt__p_Seiscomp__Core__InterruptibleObject,
  &_swigt__p_Seiscomp__Core__MemoryException,
  &_swigt__p_Seiscomp__Core__Message,
  &_swigt__p_Seiscomp__Core__OperationInterrupted,
  &_swigt__p_Seiscomp__Core__OptionalT_double_t,
  &_swigt__p_Seiscomp__Core__OverflowException,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__DataMessage_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NotifierMessage_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_const_t,
  &_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_t,
  &_swigt__p_Seiscomp__Core__StreamException,
  &_swigt__p_Seiscomp__Core__Time,
  &_swigt__p_Seiscomp__Core__TypeConversionException,
  &_swigt__p_Seiscomp__Core__TypeException,
  &_swigt__p_Seiscomp__Core__UnderflowException,
  &_swigt__p_Seiscomp__Core__ValueError,
  &_swigt__p_Seiscomp__Core__ValueException,
  &_swigt__p_Seiscomp__DataModel__Access,
  &_swigt__p_Seiscomp__DataModel__Amplitude,
  &_swigt__p_Seiscomp__DataModel__AmplitudeReference,
  &_swigt__p_Seiscomp__DataModel__ArclinkLog,
  &_swigt__p_Seiscomp__DataModel__ArclinkRequest,
  &_swigt__p_Seiscomp__DataModel__ArclinkRequestLine,
  &_swigt__p_Seiscomp__DataModel__ArclinkRequestSummary,
  &_swigt__p_Seiscomp__DataModel__ArclinkStatusLine,
  &_swigt__p_Seiscomp__DataModel__ArclinkUser,
  &_swigt__p_Seiscomp__DataModel__Arrival,
  &_swigt__p_Seiscomp__DataModel__ArtificialEventParametersMessage,
  &_swigt__p_Seiscomp__DataModel__ArtificialOriginMessage,
  &_swigt__p_Seiscomp__DataModel__AuxDevice,
  &_swigt__p_Seiscomp__DataModel__AuxSource,
  &_swigt__p_Seiscomp__DataModel__AuxStream,
  &_swigt__p_Seiscomp__DataModel__Axis,
  &_swigt__p_Seiscomp__DataModel__Blob,
  &_swigt__p_Seiscomp__DataModel__Comment,
  &_swigt__p_Seiscomp__DataModel__ComplexArray,
  &_swigt__p_Seiscomp__DataModel__CompositeTime,
  &_swigt__p_Seiscomp__DataModel__ConfidenceEllipsoid,
  &_swigt__p_Seiscomp__DataModel__Config,
  &_swigt__p_Seiscomp__DataModel__ConfigModule,
  &_swigt__p_Seiscomp__DataModel__ConfigStation,
  &_swigt__p_Seiscomp__DataModel__ConfigSyncMessage,
  &_swigt__p_Seiscomp__DataModel__CreationInfo,
  &_swigt__p_Seiscomp__DataModel__DataAttributeExtent,
  &_swigt__p_Seiscomp__DataModel__DataAvailability,
  &_swigt__p_Seiscomp__DataModel__DataExtent,
  &_swigt__p_Seiscomp__DataModel__DataSegment,
  &_swigt__p_Seiscomp__DataModel__DataUsed,
  &_swigt__p_Seiscomp__DataModel__DatabaseArchive,
  &_swigt__p_Seiscomp__DataModel__DatabaseIterator,
  &_swigt__p_Seiscomp__DataModel__DatabaseQuery,
  &_swigt__p_Seiscomp__DataModel__DatabaseReader,
  &_swigt__p_Seiscomp__DataModel__Datalogger,
  &_swigt__p_Seiscomp__DataModel__DataloggerCalibration,
  &_swigt__p_Seiscomp__DataModel__Decimation,
  &_swigt__p_Seiscomp__DataModel__Event,
  &_swigt__p_Seiscomp__DataModel__EventDescription,
  &_swigt__p_Seiscomp__DataModel__EventParameters,
  &_swigt__p_Seiscomp__DataModel__FocalMechanism,
  &_swigt__p_Seiscomp__DataModel__FocalMechanismReference,
  &_swigt__p_Seiscomp__DataModel__IntegerQuantity,
  &_swigt__p_Seiscomp__DataModel__Inventory,
  &_swigt__p_Seiscomp__DataModel__InventorySyncMessage,
  &_swigt__p_Seiscomp__DataModel__JournalEntry,
  &_swigt__p_Seiscomp__DataModel__Journaling,
  &_swigt__p_Seiscomp__DataModel__Magnitude,
  &_swigt__p_Seiscomp__DataModel__MomentTensor,
  &_swigt__p_Seiscomp__DataModel__MomentTensorComponentContribution,
  &_swigt__p_Seiscomp__DataModel__MomentTensorPhaseSetting,
  &_swigt__p_Seiscomp__DataModel__MomentTensorStationContribution,
  &_swigt__p_Seiscomp__DataModel__Network,
  &_swigt__p_Seiscomp__DataModel__NodalPlane,
  &_swigt__p_Seiscomp__DataModel__NodalPlanes,
  &_swigt__p_Seiscomp__DataModel__Notifier,
  &_swigt__p_Seiscomp__DataModel__NotifierMessage,
  &_swigt__p_Seiscomp__DataModel__Object,
  &_swigt__p_Seiscomp__DataModel__Observer,
  &_swigt__p_Seiscomp__DataModel__Origin,
  &_swigt__p_Seiscomp__DataModel__OriginQuality,
  &_swigt__p_Seiscomp__DataModel__OriginReference,
  &_swigt__p_Seiscomp__DataModel__OriginUncertainty,
  &_swigt__p_Seiscomp__DataModel__Outage,
  &_swigt__p_Seiscomp__DataModel__Parameter,
  &_swigt__p_Seiscomp__DataModel__ParameterSet,
  &_swigt__p_Seiscomp__DataModel__Phase,
  &_swigt__p_Seiscomp__DataModel__Pick,
  &_swigt__p_Seiscomp__DataModel__PickReference,
  &_swigt__p_Seiscomp__DataModel__PrincipalAxes,
  &_swigt__p_Seiscomp__DataModel__PublicObject,
  &_swigt__p_Seiscomp__DataModel__PublicObjectCache,
  &_swigt__p_Seiscomp__DataModel__PublicObjectRingBuffer,
  &_swigt__p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer,
  &_swigt__p_Seiscomp__DataModel__QCLog,
  &_swigt__p_Seiscomp__DataModel__QualityControl,
  &_swigt__p_Seiscomp__DataModel__Reading,
  &_swigt__p_Seiscomp__DataModel__RealArray,
  &_swigt__p_Seiscomp__DataModel__RealPDF1D,
  &_swigt__p_Seiscomp__DataModel__RealQuantity,
  &_swigt__p_Seiscomp__DataModel__ResponseFAP,
  &_swigt__p_Seiscomp__DataModel__ResponseFIR,
  &_swigt__p_Seiscomp__DataModel__ResponseIIR,
  &_swigt__p_Seiscomp__DataModel__ResponsePAZ,
  &_swigt__p_Seiscomp__DataModel__ResponsePolynomial,
  &_swigt__p_Seiscomp__DataModel__Route,
  &_swigt__p_Seiscomp__DataModel__RouteArclink,
  &_swigt__p_Seiscomp__DataModel__RouteSeedlink,
  &_swigt__p_Seiscomp__DataModel__Routing,
  &_swigt__p_Seiscomp__DataModel__Sensor,
  &_swigt__p_Seiscomp__DataModel__SensorCalibration,
  &_swigt__p_Seiscomp__DataModel__SensorLocation,
  &_swigt__p_Seiscomp__DataModel__Setup,
  &_swigt__p_Seiscomp__DataModel__SourceTimeFunction,
  &_swigt__p_Seiscomp__DataModel__Station,
  &_swigt__p_Seiscomp__DataModel__StationGroup,
  &_swigt__p_Seiscomp__DataModel__StationMagnitude,
  &_swigt__p_Seiscomp__DataModel__StationMagnitudeContribution,
  &_swigt__p_Seiscomp__DataModel__StationReference,
  &_swigt__p_Seiscomp__DataModel__Stream,
  &_swigt__p_Seiscomp__DataModel__Tensor,
  &_swigt__p_Seiscomp__DataModel__TimeArray,
  &_swigt__p_Seiscomp__DataModel__TimePDF1D,
  &_swigt__p_Seiscomp__DataModel__TimeQuantity,
  &_swigt__p_Seiscomp__DataModel__TimeWindow,
  &_swigt__p_Seiscomp__DataModel__WaveformQuality,
  &_swigt__p_Seiscomp__DataModel__WaveformStreamID,
  &_swigt__p_Seiscomp__FileNotFoundError,
  &_swigt__p_Seiscomp__GenericRecord,
  &_swigt__p_Seiscomp__Geo__GeoCoordinate,
  &_swigt__p_Seiscomp__Geo__GeoFeature,
  &_swigt__p_Seiscomp__Geo__GeoFeatureSet,
  &_swigt__p_Seiscomp__Geo__PolyRegions,
  &_swigt__p_Seiscomp__IO__BinaryArchive,
  &_swigt__p_Seiscomp__IO__Cropper,
  &_swigt__p_Seiscomp__IO__DatabaseInterface,
  &_swigt__p_Seiscomp__IO__Exporter,
  &_swigt__p_Seiscomp__IO__GFArchive,
  &_swigt__p_Seiscomp__IO__GFReceiver,
  &_swigt__p_Seiscomp__IO__GFSource,
  &_swigt__p_Seiscomp__IO__Importer,
  &_swigt__p_Seiscomp__IO__LibmseedException,
  &_swigt__p_Seiscomp__IO__MSeedEncoder,
  &_swigt__p_Seiscomp__IO__MSeedRecord,
  &_swigt__p_Seiscomp__IO__PipeFilter,
  &_swigt__p_Seiscomp__IO__RecordDemuxFilter,
  &_swigt__p_Seiscomp__IO__RecordFilterInterface,
  &_swigt__p_Seiscomp__IO__RecordIIRFilterT_double_t,
  &_swigt__p_Seiscomp__IO__RecordIIRFilterT_float_t,
  &_swigt__p_Seiscomp__IO__RecordInput,
  &_swigt__p_Seiscomp__IO__RecordResamplerBase,
  &_swigt__p_Seiscomp__IO__RecordResamplerT_double_t,
  &_swigt__p_Seiscomp__IO__RecordResamplerT_float_t,
  &_swigt__p_Seiscomp__IO__RecordResamplerT_int_t,
  &_swigt__p_Seiscomp__IO__RecordStream,
  &_swigt__p_Seiscomp__IO__RecordStreamException,
  &_swigt__p_Seiscomp__IO__RecordStreamTimeout,
  &_swigt__p_Seiscomp__IO__VBinaryArchive,
  &_swigt__p_Seiscomp__IO__XMLArchive,
  &_swigt__p_Seiscomp__Math__Filtering__AlignmentError,
  &_swigt__p_Seiscomp__Math__Filtering__AverageT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__AverageT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__ChainFilterT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__ChainFilterT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__InitialTaperT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__InitialTaperT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__RunningMeanT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__RunningMeanT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__STALTA2T_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__STALTA2T_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__STALTAT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__STALTAT_float_t,
  &_swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t,
  &_swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t,
  &_swigt__p_Seiscomp__Math__Geo__CityT_double_t,
  &_swigt__p_Seiscomp__Math__Geo__CityT_float_t,
  &_swigt__p_Seiscomp__Math__Geo__CoordT_double_t,
  &_swigt__p_Seiscomp__Math__Geo__CoordT_float_t,
  &_swigt__p_Seiscomp__Math__Geo__NamedCoordT_double_t,
  &_swigt__p_Seiscomp__Math__Geo__NamedCoordT_float_t,
  &_swigt__p_Seiscomp__Math__Restitution__FFT__PolesAndZeros,
  &_swigt__p_Seiscomp__Math__Restitution__FFT__ResponseList,
  &_swigt__p_Seiscomp__Math__Restitution__FFT__TransferFunction,
  &_swigt__p_Seiscomp__MultipleModelsError,
  &_swigt__p_Seiscomp__NoPhaseError,
  &_swigt__p_Seiscomp__NumericArrayT_char_t,
  &_swigt__p_Seiscomp__NumericArrayT_double_t,
  &_swigt__p_Seiscomp__NumericArrayT_float_t,
  &_swigt__p_Seiscomp__NumericArrayT_int_t,
  &_swigt__p_Seiscomp__Record,
  &_swigt__p_Seiscomp__RecordStream__Arclink__ArclinkConnection,
  &_swigt__p_Seiscomp__RecordStream__CombinedConnection,
  &_swigt__p_Seiscomp__RecordStream__File,
  &_swigt__p_Seiscomp__RecordStream__SLConnection,
  &_swigt__p_Seiscomp__RecordStream__SeedlinkCommandException,
  &_swigt__p_Seiscomp__RecordStream__SeedlinkException,
  &_swigt__p_Seiscomp__Regions,
  &_swigt__p_Seiscomp__Seismology__LocatorException,
  &_swigt__p_Seiscomp__Seismology__LocatorInterface,
  &_swigt__p_Seiscomp__Seismology__PickNotFoundException,
  &_swigt__p_Seiscomp__Seismology__SensorLocationDelegate,
  &_swigt__p_Seiscomp__Seismology__StationNotFoundException,
  &_swigt__p_Seiscomp__TravelTime,
  &_swigt__p_Seiscomp__TravelTimeList,
  &_swigt__p_Seiscomp__TravelTimeTable,
  &_swigt__p_Seiscomp__TravelTimeTableInterface,
  &_swigt__p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t,
  &_swigt__p_Seiscomp__TypedArrayT_char_t,
  &_swigt__p_Seiscomp__TypedArrayT_double_t,
  &_swigt__p_Seiscomp__TypedArrayT_float_t,
  &_swigt__p_Seiscomp__TypedArrayT_int_t,
  &_swigt__p_Seiscomp__TypedArrayT_std__complexT_double_t_t,
  &_swigt__p_Seiscomp__TypedArrayT_std__complexT_float_t_t,
  &_swigt__p_Seiscomp__TypedArrayT_std__string_t,
  &_swigt__p_Storage,
  &_swigt__p_TimePoint,
  &_swigt__p_Type,
  &_swigt__p_ValueType,
  &_swigt__p_Values,
  &_swigt__p_Weeks,
  &_swigt__p_allocator_type,
  &_swigt__p_boost__any,
  &_swigt__p_boost__bad_any_cast,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_file_iterator,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_iterator,
  &_swigt__p_iterator_category,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_PyObject,
  &_swigt__p_pos_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__allocatorT_Seiscomp__TravelTime_t,
  &_swigt__p_std__basic_iosT_char_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__exception,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__listT_Seiscomp__TravelTime_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__shared_ptrT_Seiscomp__Core__MetaObject_t,
  &_swigt__p_std__shared_ptrT_Seiscomp__Core__MetaProperty_t,
  &_swigt__p_std__vectorT_Seiscomp__Core__BaseObject_p_t,
  &_swigt__p_std__vectorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_std__allocatorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_t_t,
  &_swigt__p_std__vectorT_Seiscomp__Math__SeismometerResponse__FAP_std__allocatorT_Seiscomp__Math__SeismometerResponse__FAP_t_t,
  &_swigt__p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Archive[] = {  {&_swigt__p_Archive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttachmentList[] = {  {&_swigt__p_AttachmentList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttachmentType[] = {  {&_swigt__p_AttachmentType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Attributes[] = {  {&_swigt__p_Attributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Backend[] = {  {&_swigt__p_Backend, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataArray[] = {  {&_swigt__p_DataArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Days[] = {  {&_swigt__p_Days, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Duration[] = {  {&_swigt__p_Duration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F1[] = {  {&_swigt__p_F1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F2[] = {  {&_swigt__p_F2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F3[] = {  {&_swigt__p_F3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F4[] = {  {&_swigt__p_F4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F5[] = {  {&_swigt__p_F5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F6[] = {  {&_swigt__p_F6, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Flags[] = {  {&_swigt__p_Flags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Hours[] = {  {&_swigt__p_Hours, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDList[] = {  {&_swigt__p_IDList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImplType[] = {  {&_swigt__p_ImplType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IncludedFiles[] = {  {&_swigt__p_IncludedFiles, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InplaceFilterType[] = {  {&_swigt__p_InplaceFilterType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Iterator[] = {  {&_swigt__p_Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LogNodeCPtr[] = {  {&_swigt__p_LogNodeCPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LogNodePtr[] = {  {&_swigt__p_LogNodePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MSRecord_s[] = {  {&_swigt__p_MSRecord_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MajorType[] = {  {&_swigt__p_MajorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MicroSeconds[] = {  {&_swigt__p_MicroSeconds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MilliSeconds[] = {  {&_swigt__p_MilliSeconds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MinorType[] = {  {&_swigt__p_MinorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Minutes[] = {  {&_swigt__p_Minutes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Notifiers[] = {  {&_swigt__p_Notifiers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OID[] = {  {&_swigt__p_OID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PackType[] = {  {&_swigt__p_PackType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterMap[] = {  {&_swigt__p_ParameterMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PatchType[] = {  {&_swigt__p_PatchType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PickList[] = {  {&_swigt__p_PickList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PopCallback[] = {  {&_swigt__p_PopCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Properties[] = {  {&_swigt__p_Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertyIndex[] = {  {&_swigt__p_PropertyIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertyValue[] = {  {&_swigt__p_PropertyValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PublicObjectMap[] = {  {&_swigt__p_PublicObjectMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PushCallback[] = {  {&_swigt__p_PushCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReferenceType[] = {  {&_swigt__p_ReferenceType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RootType[] = {  {&_swigt__p_RootType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seconds[] = {  {&_swigt__p_Seconds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Config__Config[] = {  {&_swigt__p_Seiscomp__Config__Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Array[] = {{&_swigt__p_Seiscomp__Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__BitSet[] = {{&_swigt__p_Seiscomp__BitSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__DataMessage[] = {{&_swigt__p_Seiscomp__Core__DataMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t[] = {{&_swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t[] = {{&_swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__GreensFunction[] = {{&_swigt__p_Seiscomp__Core__GreensFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__InterruptibleObject[] = {{&_swigt__p_Seiscomp__Core__InterruptibleObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__Message[] = {{&_swigt__p_Seiscomp__Core__Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Access[] = {{&_swigt__p_Seiscomp__DataModel__Access, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Amplitude[] = {{&_swigt__p_Seiscomp__DataModel__Amplitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__AmplitudeReference[] = {{&_swigt__p_Seiscomp__DataModel__AmplitudeReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArclinkLog[] = {{&_swigt__p_Seiscomp__DataModel__ArclinkLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArclinkRequest[] = {{&_swigt__p_Seiscomp__DataModel__ArclinkRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArclinkRequestLine[] = {{&_swigt__p_Seiscomp__DataModel__ArclinkRequestLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArclinkStatusLine[] = {{&_swigt__p_Seiscomp__DataModel__ArclinkStatusLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArclinkUser[] = {{&_swigt__p_Seiscomp__DataModel__ArclinkUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArtificialEventParametersMessage[] = {{&_swigt__p_Seiscomp__DataModel__ArtificialEventParametersMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArtificialOriginMessage[] = {{&_swigt__p_Seiscomp__DataModel__ArtificialOriginMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__AuxDevice[] = {{&_swigt__p_Seiscomp__DataModel__AuxDevice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__AuxSource[] = {{&_swigt__p_Seiscomp__DataModel__AuxSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__AuxStream[] = {{&_swigt__p_Seiscomp__DataModel__AuxStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Comment[] = {{&_swigt__p_Seiscomp__DataModel__Comment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__CompositeTime[] = {{&_swigt__p_Seiscomp__DataModel__CompositeTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Config[] = {{&_swigt__p_Seiscomp__DataModel__Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ConfigModule[] = {{&_swigt__p_Seiscomp__DataModel__ConfigModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ConfigStation[] = {{&_swigt__p_Seiscomp__DataModel__ConfigStation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ConfigSyncMessage[] = {{&_swigt__p_Seiscomp__DataModel__ConfigSyncMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DataAttributeExtent[] = {{&_swigt__p_Seiscomp__DataModel__DataAttributeExtent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DataAvailability[] = {{&_swigt__p_Seiscomp__DataModel__DataAvailability, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DataExtent[] = {{&_swigt__p_Seiscomp__DataModel__DataExtent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DataSegment[] = {{&_swigt__p_Seiscomp__DataModel__DataSegment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DataUsed[] = {{&_swigt__p_Seiscomp__DataModel__DataUsed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DatabaseArchive[] = {{&_swigt__p_Seiscomp__DataModel__DatabaseArchive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DatabaseIterator[] = {{&_swigt__p_Seiscomp__DataModel__DatabaseIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DatabaseQuery[] = {{&_swigt__p_Seiscomp__DataModel__DatabaseQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DatabaseReader[] = {{&_swigt__p_Seiscomp__DataModel__DatabaseReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Datalogger[] = {{&_swigt__p_Seiscomp__DataModel__Datalogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__DataloggerCalibration[] = {{&_swigt__p_Seiscomp__DataModel__DataloggerCalibration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Decimation[] = {{&_swigt__p_Seiscomp__DataModel__Decimation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Event[] = {{&_swigt__p_Seiscomp__DataModel__Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__EventDescription[] = {{&_swigt__p_Seiscomp__DataModel__EventDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__EventParameters[] = {{&_swigt__p_Seiscomp__DataModel__EventParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__FocalMechanism[] = {{&_swigt__p_Seiscomp__DataModel__FocalMechanism, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__FocalMechanismReference[] = {{&_swigt__p_Seiscomp__DataModel__FocalMechanismReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Inventory[] = {{&_swigt__p_Seiscomp__DataModel__Inventory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__InventorySyncMessage[] = {{&_swigt__p_Seiscomp__DataModel__InventorySyncMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__JournalEntry[] = {{&_swigt__p_Seiscomp__DataModel__JournalEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Journaling[] = {{&_swigt__p_Seiscomp__DataModel__Journaling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Magnitude[] = {{&_swigt__p_Seiscomp__DataModel__Magnitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__MomentTensor[] = {{&_swigt__p_Seiscomp__DataModel__MomentTensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__MomentTensorComponentContribution[] = {{&_swigt__p_Seiscomp__DataModel__MomentTensorComponentContribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__MomentTensorPhaseSetting[] = {{&_swigt__p_Seiscomp__DataModel__MomentTensorPhaseSetting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__MomentTensorStationContribution[] = {{&_swigt__p_Seiscomp__DataModel__MomentTensorStationContribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Network[] = {{&_swigt__p_Seiscomp__DataModel__Network, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Notifier[] = {{&_swigt__p_Seiscomp__DataModel__Notifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__NotifierMessage[] = {{&_swigt__p_Seiscomp__DataModel__NotifierMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Object[] = {{&_swigt__p_Seiscomp__DataModel__Object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Observer[] = {{&_swigt__p_Seiscomp__DataModel__Observer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__OriginReference[] = {{&_swigt__p_Seiscomp__DataModel__OriginReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Outage[] = {{&_swigt__p_Seiscomp__DataModel__Outage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Parameter[] = {{&_swigt__p_Seiscomp__DataModel__Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ParameterSet[] = {{&_swigt__p_Seiscomp__DataModel__ParameterSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__PickReference[] = {{&_swigt__p_Seiscomp__DataModel__PickReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__PublicObject[] = {{&_swigt__p_Seiscomp__DataModel__PublicObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__PublicObjectCache[] = {{&_swigt__p_Seiscomp__DataModel__PublicObjectCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__PublicObjectRingBuffer[] = {{&_swigt__p_Seiscomp__DataModel__PublicObjectRingBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer[] = {{&_swigt__p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__QCLog[] = {{&_swigt__p_Seiscomp__DataModel__QCLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__QualityControl[] = {{&_swigt__p_Seiscomp__DataModel__QualityControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Reading[] = {{&_swigt__p_Seiscomp__DataModel__Reading, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ResponseFAP[] = {{&_swigt__p_Seiscomp__DataModel__ResponseFAP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ResponseFIR[] = {{&_swigt__p_Seiscomp__DataModel__ResponseFIR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ResponseIIR[] = {{&_swigt__p_Seiscomp__DataModel__ResponseIIR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ResponsePAZ[] = {{&_swigt__p_Seiscomp__DataModel__ResponsePAZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ResponsePolynomial[] = {{&_swigt__p_Seiscomp__DataModel__ResponsePolynomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Route[] = {{&_swigt__p_Seiscomp__DataModel__Route, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__RouteArclink[] = {{&_swigt__p_Seiscomp__DataModel__RouteArclink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__RouteSeedlink[] = {{&_swigt__p_Seiscomp__DataModel__RouteSeedlink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Routing[] = {{&_swigt__p_Seiscomp__DataModel__Routing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Sensor[] = {{&_swigt__p_Seiscomp__DataModel__Sensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__SensorCalibration[] = {{&_swigt__p_Seiscomp__DataModel__SensorCalibration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Setup[] = {{&_swigt__p_Seiscomp__DataModel__Setup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Station[] = {{&_swigt__p_Seiscomp__DataModel__Station, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__StationGroup[] = {{&_swigt__p_Seiscomp__DataModel__StationGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__StationMagnitude[] = {{&_swigt__p_Seiscomp__DataModel__StationMagnitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__StationMagnitudeContribution[] = {{&_swigt__p_Seiscomp__DataModel__StationMagnitudeContribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__StationReference[] = {{&_swigt__p_Seiscomp__DataModel__StationReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Stream[] = {{&_swigt__p_Seiscomp__DataModel__Stream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__WaveformQuality[] = {{&_swigt__p_Seiscomp__DataModel__WaveformQuality, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__GenericRecord[] = {{&_swigt__p_Seiscomp__GenericRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Geo__GeoFeature[] = {{&_swigt__p_Seiscomp__Geo__GeoFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Geo__GeoFeatureSet[] = {{&_swigt__p_Seiscomp__Geo__GeoFeatureSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__Cropper[] = {{&_swigt__p_Seiscomp__IO__Cropper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__DatabaseInterface[] = {{&_swigt__p_Seiscomp__IO__DatabaseInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__Exporter[] = {{&_swigt__p_Seiscomp__IO__Exporter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__GFArchive[] = {{&_swigt__p_Seiscomp__IO__GFArchive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__GFReceiver[] = {{&_swigt__p_Seiscomp__IO__GFReceiver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__GFSource[] = {{&_swigt__p_Seiscomp__IO__GFSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__Importer[] = {{&_swigt__p_Seiscomp__IO__Importer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__MSeedEncoder[] = {{&_swigt__p_Seiscomp__IO__MSeedEncoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__MSeedRecord[] = {{&_swigt__p_Seiscomp__IO__MSeedRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__PipeFilter[] = {{&_swigt__p_Seiscomp__IO__PipeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordDemuxFilter[] = {{&_swigt__p_Seiscomp__IO__RecordDemuxFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordFilterInterface[] = {{&_swigt__p_Seiscomp__IO__RecordFilterInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordIIRFilterT_double_t[] = {{&_swigt__p_Seiscomp__IO__RecordIIRFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordIIRFilterT_float_t[] = {{&_swigt__p_Seiscomp__IO__RecordIIRFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordInput[] = {{&_swigt__p_Seiscomp__IO__RecordInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordResamplerBase[] = {{&_swigt__p_Seiscomp__IO__RecordResamplerBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordResamplerT_double_t[] = {{&_swigt__p_Seiscomp__IO__RecordResamplerT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordResamplerT_float_t[] = {{&_swigt__p_Seiscomp__IO__RecordResamplerT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordResamplerT_int_t[] = {{&_swigt__p_Seiscomp__IO__RecordResamplerT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordStream[] = {{&_swigt__p_Seiscomp__IO__RecordStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__AverageT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__AverageT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__AverageT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__AverageT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__ChainFilterT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__ChainFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__ChainFilterT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__ChainFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__FilterT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__FilterT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__InitialTaperT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__InitialTaperT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__InitialTaperT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__InitialTaperT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__RunningMeanT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__RunningMeanT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__RunningMeanT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__RunningMeanT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__STALTA2T_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__STALTA2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__STALTA2T_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__STALTA2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__STALTAT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__STALTAT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__STALTAT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__STALTAT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t[] = {{&_swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Restitution__FFT__PolesAndZeros[] = {{&_swigt__p_Seiscomp__Math__Restitution__FFT__PolesAndZeros, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Restitution__FFT__ResponseList[] = {{&_swigt__p_Seiscomp__Math__Restitution__FFT__ResponseList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Restitution__FFT__TransferFunction[] = {{&_swigt__p_Seiscomp__Math__Restitution__FFT__TransferFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Record[] = {{&_swigt__p_Seiscomp__Record, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__RecordStream__Arclink__ArclinkConnection[] = {{&_swigt__p_Seiscomp__RecordStream__Arclink__ArclinkConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__RecordStream__CombinedConnection[] = {{&_swigt__p_Seiscomp__RecordStream__CombinedConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__RecordStream__File[] = {{&_swigt__p_Seiscomp__RecordStream__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__RecordStream__SLConnection[] = {{&_swigt__p_Seiscomp__RecordStream__SLConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_char_t[] = {{&_swigt__p_Seiscomp__TypedArrayT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_double_t[] = {{&_swigt__p_Seiscomp__TypedArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_float_t[] = {{&_swigt__p_Seiscomp__TypedArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_int_t[] = {{&_swigt__p_Seiscomp__TypedArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__BaseObject[] = {  {&_swigt__p_Seiscomp__Core__BaseObject, 0, 0, 0},  {&_swigt__p_Seiscomp__Array, _p_Seiscomp__ArrayTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__BitSet, _p_Seiscomp__BitSetTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Core__DataMessage, _p_Seiscomp__Core__DataMessageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t, _p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t, _p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Core__GreensFunction, _p_Seiscomp__Core__GreensFunctionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Core__InterruptibleObject, _p_Seiscomp__Core__InterruptibleObjectTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Core__Message, _p_Seiscomp__Core__MessageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Access, _p_Seiscomp__DataModel__AccessTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Amplitude, _p_Seiscomp__DataModel__AmplitudeTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__AmplitudeReference, _p_Seiscomp__DataModel__AmplitudeReferenceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArclinkLog, _p_Seiscomp__DataModel__ArclinkLogTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArclinkRequest, _p_Seiscomp__DataModel__ArclinkRequestTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArclinkRequestLine, _p_Seiscomp__DataModel__ArclinkRequestLineTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArclinkRequestSummary, _p_Seiscomp__DataModel__ArclinkRequestSummaryTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArclinkStatusLine, _p_Seiscomp__DataModel__ArclinkStatusLineTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArclinkUser, _p_Seiscomp__DataModel__ArclinkUserTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Arrival, _p_Seiscomp__DataModel__ArrivalTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArtificialEventParametersMessage, _p_Seiscomp__DataModel__ArtificialEventParametersMessageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ArtificialOriginMessage, _p_Seiscomp__DataModel__ArtificialOriginMessageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__AuxDevice, _p_Seiscomp__DataModel__AuxDeviceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__AuxSource, _p_Seiscomp__DataModel__AuxSourceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__AuxStream, _p_Seiscomp__DataModel__AuxStreamTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Axis, _p_Seiscomp__DataModel__AxisTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Blob, _p_Seiscomp__DataModel__BlobTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Comment, _p_Seiscomp__DataModel__CommentTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ComplexArray, _p_Seiscomp__DataModel__ComplexArrayTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__CompositeTime, _p_Seiscomp__DataModel__CompositeTimeTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ConfidenceEllipsoid, _p_Seiscomp__DataModel__ConfidenceEllipsoidTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Config, _p_Seiscomp__DataModel__ConfigTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ConfigModule, _p_Seiscomp__DataModel__ConfigModuleTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ConfigStation, _p_Seiscomp__DataModel__ConfigStationTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ConfigSyncMessage, _p_Seiscomp__DataModel__ConfigSyncMessageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__CreationInfo, _p_Seiscomp__DataModel__CreationInfoTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DataAttributeExtent, _p_Seiscomp__DataModel__DataAttributeExtentTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DataAvailability, _p_Seiscomp__DataModel__DataAvailabilityTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DataExtent, _p_Seiscomp__DataModel__DataExtentTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DataSegment, _p_Seiscomp__DataModel__DataSegmentTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DataUsed, _p_Seiscomp__DataModel__DataUsedTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DatabaseArchive, _p_Seiscomp__DataModel__DatabaseArchiveTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DatabaseIterator, _p_Seiscomp__DataModel__DatabaseIteratorTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DatabaseQuery, _p_Seiscomp__DataModel__DatabaseQueryTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DatabaseReader, _p_Seiscomp__DataModel__DatabaseReaderTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Datalogger, _p_Seiscomp__DataModel__DataloggerTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DataloggerCalibration, _p_Seiscomp__DataModel__DataloggerCalibrationTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Decimation, _p_Seiscomp__DataModel__DecimationTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Event, _p_Seiscomp__DataModel__EventTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__EventDescription, _p_Seiscomp__DataModel__EventDescriptionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__EventParameters, _p_Seiscomp__DataModel__EventParametersTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__FocalMechanism, _p_Seiscomp__DataModel__FocalMechanismTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__FocalMechanismReference, _p_Seiscomp__DataModel__FocalMechanismReferenceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__IntegerQuantity, _p_Seiscomp__DataModel__IntegerQuantityTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Inventory, _p_Seiscomp__DataModel__InventoryTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__InventorySyncMessage, _p_Seiscomp__DataModel__InventorySyncMessageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__JournalEntry, _p_Seiscomp__DataModel__JournalEntryTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Journaling, _p_Seiscomp__DataModel__JournalingTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Magnitude, _p_Seiscomp__DataModel__MagnitudeTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__MomentTensor, _p_Seiscomp__DataModel__MomentTensorTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__MomentTensorComponentContribution, _p_Seiscomp__DataModel__MomentTensorComponentContributionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__MomentTensorPhaseSetting, _p_Seiscomp__DataModel__MomentTensorPhaseSettingTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__MomentTensorStationContribution, _p_Seiscomp__DataModel__MomentTensorStationContributionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Network, _p_Seiscomp__DataModel__NetworkTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__NodalPlane, _p_Seiscomp__DataModel__NodalPlaneTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__NodalPlanes, _p_Seiscomp__DataModel__NodalPlanesTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Notifier, _p_Seiscomp__DataModel__NotifierTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__NotifierMessage, _p_Seiscomp__DataModel__NotifierMessageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Object, _p_Seiscomp__DataModel__ObjectTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Observer, _p_Seiscomp__DataModel__ObserverTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Origin, _p_Seiscomp__DataModel__OriginTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__OriginQuality, _p_Seiscomp__DataModel__OriginQualityTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__OriginReference, _p_Seiscomp__DataModel__OriginReferenceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__OriginUncertainty, _p_Seiscomp__DataModel__OriginUncertaintyTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Outage, _p_Seiscomp__DataModel__OutageTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Parameter, _p_Seiscomp__DataModel__ParameterTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ParameterSet, _p_Seiscomp__DataModel__ParameterSetTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Phase, _p_Seiscomp__DataModel__PhaseTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Pick, _p_Seiscomp__DataModel__PickTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__PickReference, _p_Seiscomp__DataModel__PickReferenceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__PrincipalAxes, _p_Seiscomp__DataModel__PrincipalAxesTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__PublicObject, _p_Seiscomp__DataModel__PublicObjectTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__PublicObjectCache, _p_Seiscomp__DataModel__PublicObjectCacheTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__PublicObjectRingBuffer, _p_Seiscomp__DataModel__PublicObjectRingBufferTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer, _p_Seiscomp__DataModel__PublicObjectTimeSpanBufferTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__QCLog, _p_Seiscomp__DataModel__QCLogTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__QualityControl, _p_Seiscomp__DataModel__QualityControlTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Reading, _p_Seiscomp__DataModel__ReadingTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__RealArray, _p_Seiscomp__DataModel__RealArrayTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__RealPDF1D, _p_Seiscomp__DataModel__RealPDF1DTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__RealQuantity, _p_Seiscomp__DataModel__RealQuantityTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ResponseFAP, _p_Seiscomp__DataModel__ResponseFAPTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ResponseFIR, _p_Seiscomp__DataModel__ResponseFIRTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ResponseIIR, _p_Seiscomp__DataModel__ResponseIIRTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ResponsePAZ, _p_Seiscomp__DataModel__ResponsePAZTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__ResponsePolynomial, _p_Seiscomp__DataModel__ResponsePolynomialTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Route, _p_Seiscomp__DataModel__RouteTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__RouteArclink, _p_Seiscomp__DataModel__RouteArclinkTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__RouteSeedlink, _p_Seiscomp__DataModel__RouteSeedlinkTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Routing, _p_Seiscomp__DataModel__RoutingTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Sensor, _p_Seiscomp__DataModel__SensorTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__SensorCalibration, _p_Seiscomp__DataModel__SensorCalibrationTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__SensorLocation, _p_Seiscomp__DataModel__SensorLocationTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Setup, _p_Seiscomp__DataModel__SetupTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__SourceTimeFunction, _p_Seiscomp__DataModel__SourceTimeFunctionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Station, _p_Seiscomp__DataModel__StationTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__StationGroup, _p_Seiscomp__DataModel__StationGroupTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__StationMagnitude, _p_Seiscomp__DataModel__StationMagnitudeTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__StationMagnitudeContribution, _p_Seiscomp__DataModel__StationMagnitudeContributionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__StationReference, _p_Seiscomp__DataModel__StationReferenceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Stream, _p_Seiscomp__DataModel__StreamTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__Tensor, _p_Seiscomp__DataModel__TensorTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__TimeArray, _p_Seiscomp__DataModel__TimeArrayTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__TimePDF1D, _p_Seiscomp__DataModel__TimePDF1DTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__TimeQuantity, _p_Seiscomp__DataModel__TimeQuantityTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__TimeWindow, _p_Seiscomp__DataModel__TimeWindowTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__WaveformQuality, _p_Seiscomp__DataModel__WaveformQualityTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__DataModel__WaveformStreamID, _p_Seiscomp__DataModel__WaveformStreamIDTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__GenericRecord, _p_Seiscomp__GenericRecordTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Geo__GeoFeature, _p_Seiscomp__Geo__GeoFeatureTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Geo__GeoFeatureSet, _p_Seiscomp__Geo__GeoFeatureSetTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__Cropper, _p_Seiscomp__IO__CropperTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__DatabaseInterface, _p_Seiscomp__IO__DatabaseInterfaceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__Exporter, _p_Seiscomp__IO__ExporterTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__GFArchive, _p_Seiscomp__IO__GFArchiveTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__GFReceiver, _p_Seiscomp__IO__GFReceiverTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__GFSource, _p_Seiscomp__IO__GFSourceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__Importer, _p_Seiscomp__IO__ImporterTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__MSeedEncoder, _p_Seiscomp__IO__MSeedEncoderTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__MSeedRecord, _p_Seiscomp__IO__MSeedRecordTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__PipeFilter, _p_Seiscomp__IO__PipeFilterTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordDemuxFilter, _p_Seiscomp__IO__RecordDemuxFilterTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordFilterInterface, _p_Seiscomp__IO__RecordFilterInterfaceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordIIRFilterT_double_t, _p_Seiscomp__IO__RecordIIRFilterT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordIIRFilterT_float_t, _p_Seiscomp__IO__RecordIIRFilterT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordInput, _p_Seiscomp__IO__RecordInputTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordResamplerBase, _p_Seiscomp__IO__RecordResamplerBaseTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordResamplerT_double_t, _p_Seiscomp__IO__RecordResamplerT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordResamplerT_float_t, _p_Seiscomp__IO__RecordResamplerT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordResamplerT_int_t, _p_Seiscomp__IO__RecordResamplerT_int_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordStream, _p_Seiscomp__IO__RecordStreamTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__AverageT_double_t, _p_Seiscomp__Math__Filtering__AverageT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__AverageT_float_t, _p_Seiscomp__Math__Filtering__AverageT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__ChainFilterT_double_t, _p_Seiscomp__Math__Filtering__ChainFilterT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__ChainFilterT_float_t, _p_Seiscomp__Math__Filtering__ChainFilterT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t, _p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t, _p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t, _p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_double_t, _p_Seiscomp__Math__Filtering__IIR__FilterT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__FilterT_float_t, _p_Seiscomp__Math__Filtering__IIR__FilterT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t, _p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t, _p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t, _p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t, _p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t, _p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t, _p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t, _p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t, _p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t, _p_Seiscomp__Math__Filtering__InPlaceFilterT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t, _p_Seiscomp__Math__Filtering__InPlaceFilterT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__InitialTaperT_double_t, _p_Seiscomp__Math__Filtering__InitialTaperT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__InitialTaperT_float_t, _p_Seiscomp__Math__Filtering__InitialTaperT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t, _p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t, _p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__RunningMeanT_double_t, _p_Seiscomp__Math__Filtering__RunningMeanT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__RunningMeanT_float_t, _p_Seiscomp__Math__Filtering__RunningMeanT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__STALTA2T_double_t, _p_Seiscomp__Math__Filtering__STALTA2T_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__STALTA2T_float_t, _p_Seiscomp__Math__Filtering__STALTA2T_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__STALTAT_double_t, _p_Seiscomp__Math__Filtering__STALTAT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__STALTAT_float_t, _p_Seiscomp__Math__Filtering__STALTAT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t, _p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t, _p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CityT_double_t, _p_Seiscomp__Math__Geo__CityT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CityT_float_t, _p_Seiscomp__Math__Geo__CityT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CoordT_double_t, _p_Seiscomp__Math__Geo__CoordT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CoordT_float_t, _p_Seiscomp__Math__Geo__CoordT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__NamedCoordT_double_t, _p_Seiscomp__Math__Geo__NamedCoordT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__NamedCoordT_float_t, _p_Seiscomp__Math__Geo__NamedCoordT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Restitution__FFT__PolesAndZeros, _p_Seiscomp__Math__Restitution__FFT__PolesAndZerosTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Restitution__FFT__ResponseList, _p_Seiscomp__Math__Restitution__FFT__ResponseListTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Math__Restitution__FFT__TransferFunction, _p_Seiscomp__Math__Restitution__FFT__TransferFunctionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__NumericArrayT_char_t, _p_Seiscomp__NumericArrayT_char_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__NumericArrayT_double_t, _p_Seiscomp__NumericArrayT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__NumericArrayT_float_t, _p_Seiscomp__NumericArrayT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__NumericArrayT_int_t, _p_Seiscomp__NumericArrayT_int_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Record, _p_Seiscomp__RecordTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__Arclink__ArclinkConnection, _p_Seiscomp__RecordStream__Arclink__ArclinkConnectionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__CombinedConnection, _p_Seiscomp__RecordStream__CombinedConnectionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__File, _p_Seiscomp__RecordStream__FileTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__SLConnection, _p_Seiscomp__RecordStream__SLConnectionTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Seismology__LocatorInterface, _p_Seiscomp__Seismology__LocatorInterfaceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__Seismology__SensorLocationDelegate, _p_Seiscomp__Seismology__SensorLocationDelegateTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TravelTimeTable, _p_Seiscomp__TravelTimeTableTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TravelTimeTableInterface, _p_Seiscomp__TravelTimeTableInterfaceTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t, _p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_char_t, _p_Seiscomp__TypedArrayT_char_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_double_t, _p_Seiscomp__TypedArrayT_double_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_float_t, _p_Seiscomp__TypedArrayT_float_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_int_t, _p_Seiscomp__TypedArrayT_int_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_std__complexT_double_t_t, _p_Seiscomp__TypedArrayT_std__complexT_double_t_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_std__complexT_float_t_t, _p_Seiscomp__TypedArrayT_std__complexT_float_t_tTo_p_Seiscomp__Core__BaseObject, 0, 0},  {&_swigt__p_Seiscomp__TypedArrayT_std__string_t, _p_Seiscomp__TypedArrayT_std__string_tTo_p_Seiscomp__Core__BaseObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EDataUsedWaveType_Seiscomp__DataModel__EDataUsedWaveTypeQuantity_Seiscomp__DataModel__EDataUsedWaveTypeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EDataUsedWaveType_Seiscomp__DataModel__EDataUsedWaveTypeQuantity_Seiscomp__DataModel__EDataUsedWaveTypeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationMode_Seiscomp__DataModel__EEvaluationModeQuantity_Seiscomp__DataModel__EEvaluationModeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationMode_Seiscomp__DataModel__EEvaluationModeQuantity_Seiscomp__DataModel__EEvaluationModeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationStatus_Seiscomp__DataModel__EEvaluationStatusQuantity_Seiscomp__DataModel__EEvaluationStatusNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationStatus_Seiscomp__DataModel__EEvaluationStatusQuantity_Seiscomp__DataModel__EEvaluationStatusNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventDescriptionType_Seiscomp__DataModel__EEventDescriptionTypeQuantity_Seiscomp__DataModel__EEventDescriptionTypeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventDescriptionType_Seiscomp__DataModel__EEventDescriptionTypeQuantity_Seiscomp__DataModel__EEventDescriptionTypeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventTypeCertainty_Seiscomp__DataModel__EEventTypeCertaintyQuantity_Seiscomp__DataModel__EEventTypeCertaintyNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventTypeCertainty_Seiscomp__DataModel__EEventTypeCertaintyQuantity_Seiscomp__DataModel__EEventTypeCertaintyNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventType_Seiscomp__DataModel__EEventTypeQuantity_Seiscomp__DataModel__EEventTypeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventType_Seiscomp__DataModel__EEventTypeQuantity_Seiscomp__DataModel__EEventTypeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EInventoryError_Seiscomp__DataModel__EInventoryErrorQuantity_Seiscomp__DataModel__EInventoryErrorNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EInventoryError_Seiscomp__DataModel__EInventoryErrorQuantity_Seiscomp__DataModel__EInventoryErrorNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorMethod_Seiscomp__DataModel__EMomentTensorMethodQuantity_Seiscomp__DataModel__EMomentTensorMethodNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorMethod_Seiscomp__DataModel__EMomentTensorMethodQuantity_Seiscomp__DataModel__EMomentTensorMethodNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorStatus_Seiscomp__DataModel__EMomentTensorStatusQuantity_Seiscomp__DataModel__EMomentTensorStatusNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorStatus_Seiscomp__DataModel__EMomentTensorStatusQuantity_Seiscomp__DataModel__EMomentTensorStatusNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOperation_Seiscomp__DataModel__EOperationQuantity_Seiscomp__DataModel__EOperationNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOperation_Seiscomp__DataModel__EOperationQuantity_Seiscomp__DataModel__EOperationNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginDepthType_Seiscomp__DataModel__EOriginDepthTypeQuantity_Seiscomp__DataModel__EOriginDepthTypeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginDepthType_Seiscomp__DataModel__EOriginDepthTypeQuantity_Seiscomp__DataModel__EOriginDepthTypeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginType_Seiscomp__DataModel__EOriginTypeQuantity_Seiscomp__DataModel__EOriginTypeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginType_Seiscomp__DataModel__EOriginTypeQuantity_Seiscomp__DataModel__EOriginTypeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginUncertaintyDescription_Seiscomp__DataModel__EOriginUncertaintyDescriptionQuantity_Seiscomp__DataModel__EOriginUncertaintyDescriptionNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginUncertaintyDescription_Seiscomp__DataModel__EOriginUncertaintyDescriptionQuantity_Seiscomp__DataModel__EOriginUncertaintyDescriptionNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickOnset_Seiscomp__DataModel__EPickOnsetQuantity_Seiscomp__DataModel__EPickOnsetNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickOnset_Seiscomp__DataModel__EPickOnsetQuantity_Seiscomp__DataModel__EPickOnsetNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickPolarity_Seiscomp__DataModel__EPickPolarityQuantity_Seiscomp__DataModel__EPickPolarityNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickPolarity_Seiscomp__DataModel__EPickPolarityQuantity_Seiscomp__DataModel__EPickPolarityNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__ESourceTimeFunctionType_Seiscomp__DataModel__ESourceTimeFunctionTypeQuantity_Seiscomp__DataModel__ESourceTimeFunctionTypeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__ESourceTimeFunctionType_Seiscomp__DataModel__ESourceTimeFunctionTypeQuantity_Seiscomp__DataModel__ESourceTimeFunctionTypeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EStationGroupType_Seiscomp__DataModel__EStationGroupTypeQuantity_Seiscomp__DataModel__EStationGroupTypeNames_t[] = {  {&_swigt__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EStationGroupType_Seiscomp__DataModel__EStationGroupTypeQuantity_Seiscomp__DataModel__EStationGroupTypeNames_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__ClassNotFound[] = {{&_swigt__p_Seiscomp__Core__ClassNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__DuplicateClassname[] = {{&_swigt__p_Seiscomp__Core__DuplicateClassname, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__EndOfStreamException[] = {{&_swigt__p_Seiscomp__Core__EndOfStreamException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__MemoryException[] = {{&_swigt__p_Seiscomp__Core__MemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__OperationInterrupted[] = {{&_swigt__p_Seiscomp__Core__OperationInterrupted, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__OverflowException[] = {{&_swigt__p_Seiscomp__Core__OverflowException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__StreamException[] = {{&_swigt__p_Seiscomp__Core__StreamException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__TypeConversionException[] = {{&_swigt__p_Seiscomp__Core__TypeConversionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__TypeException[] = {{&_swigt__p_Seiscomp__Core__TypeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__UnderflowException[] = {{&_swigt__p_Seiscomp__Core__UnderflowException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__ValueException[] = {{&_swigt__p_Seiscomp__Core__ValueException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__LibmseedException[] = {{&_swigt__p_Seiscomp__IO__LibmseedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordStreamException[] = {{&_swigt__p_Seiscomp__IO__RecordStreamException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__RecordStreamTimeout[] = {{&_swigt__p_Seiscomp__IO__RecordStreamTimeout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__RecordStream__SeedlinkCommandException[] = {{&_swigt__p_Seiscomp__RecordStream__SeedlinkCommandException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__RecordStream__SeedlinkException[] = {{&_swigt__p_Seiscomp__RecordStream__SeedlinkException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__GeneralException[] = {  {&_swigt__p_Seiscomp__Core__GeneralException, 0, 0, 0},  {&_swigt__p_Seiscomp__Core__ClassNotFound, _p_Seiscomp__Core__ClassNotFoundTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__DuplicateClassname, _p_Seiscomp__Core__DuplicateClassnameTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__EndOfStreamException, _p_Seiscomp__Core__EndOfStreamExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__MemoryException, _p_Seiscomp__Core__MemoryExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__OperationInterrupted, _p_Seiscomp__Core__OperationInterruptedTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__OverflowException, _p_Seiscomp__Core__OverflowExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__StreamException, _p_Seiscomp__Core__StreamExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__TypeConversionException, _p_Seiscomp__Core__TypeConversionExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__TypeException, _p_Seiscomp__Core__TypeExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__UnderflowException, _p_Seiscomp__Core__UnderflowExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Core__ValueException, _p_Seiscomp__Core__ValueExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__FileNotFoundError, _p_Seiscomp__FileNotFoundErrorTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__IO__LibmseedException, _p_Seiscomp__IO__LibmseedExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordStreamException, _p_Seiscomp__IO__RecordStreamExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordStreamTimeout, _p_Seiscomp__IO__RecordStreamTimeoutTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__MultipleModelsError, _p_Seiscomp__MultipleModelsErrorTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__NoPhaseError, _p_Seiscomp__NoPhaseErrorTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__SeedlinkCommandException, _p_Seiscomp__RecordStream__SeedlinkCommandExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__SeedlinkException, _p_Seiscomp__RecordStream__SeedlinkExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Seismology__LocatorException, _p_Seiscomp__Seismology__LocatorExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Seismology__PickNotFoundException, _p_Seiscomp__Seismology__PickNotFoundExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},  {&_swigt__p_Seiscomp__Seismology__StationNotFoundException, _p_Seiscomp__Seismology__StationNotFoundExceptionTo_p_Seiscomp__Core__GeneralException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__BinaryArchive[] = {{&_swigt__p_Seiscomp__IO__BinaryArchive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__VBinaryArchive[] = {{&_swigt__p_Seiscomp__IO__VBinaryArchive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__IO__XMLArchive[] = {{&_swigt__p_Seiscomp__IO__XMLArchive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t[] = {  {&_swigt__p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t, 0, 0, 0},  {&_swigt__p_Seiscomp__DataModel__DatabaseArchive, _p_Seiscomp__DataModel__DatabaseArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t, 0, 0},  {&_swigt__p_Seiscomp__IO__BinaryArchive, _p_Seiscomp__IO__BinaryArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t, 0, 0},  {&_swigt__p_Seiscomp__IO__VBinaryArchive, _p_Seiscomp__IO__VBinaryArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t, 0, 0},  {&_swigt__p_Seiscomp__IO__XMLArchive, _p_Seiscomp__IO__XMLArchiveTo_p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__Generic__ClassFactoryInterfaceT_Seiscomp__Core__BaseObject_t[] = {  {&_swigt__p_Seiscomp__Core__Generic__ClassFactoryInterfaceT_Seiscomp__Core__BaseObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__OptionalT_double_t[] = {  {&_swigt__p_Seiscomp__Core__OptionalT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__DataMessage_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__DataMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NotifierMessage_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NotifierMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_const_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_t[] = {  {&_swigt__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__Time[] = {  {&_swigt__p_Seiscomp__Core__Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ArclinkRequestSummary[] = {  {&_swigt__p_Seiscomp__DataModel__ArclinkRequestSummary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Arrival[] = {  {&_swigt__p_Seiscomp__DataModel__Arrival, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Axis[] = {  {&_swigt__p_Seiscomp__DataModel__Axis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Blob[] = {  {&_swigt__p_Seiscomp__DataModel__Blob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ComplexArray[] = {  {&_swigt__p_Seiscomp__DataModel__ComplexArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__ConfidenceEllipsoid[] = {  {&_swigt__p_Seiscomp__DataModel__ConfidenceEllipsoid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__CreationInfo[] = {  {&_swigt__p_Seiscomp__DataModel__CreationInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__IntegerQuantity[] = {  {&_swigt__p_Seiscomp__DataModel__IntegerQuantity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__NodalPlane[] = {  {&_swigt__p_Seiscomp__DataModel__NodalPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__NodalPlanes[] = {  {&_swigt__p_Seiscomp__DataModel__NodalPlanes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Origin[] = {  {&_swigt__p_Seiscomp__DataModel__Origin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__OriginQuality[] = {  {&_swigt__p_Seiscomp__DataModel__OriginQuality, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__OriginUncertainty[] = {  {&_swigt__p_Seiscomp__DataModel__OriginUncertainty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Phase[] = {  {&_swigt__p_Seiscomp__DataModel__Phase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Pick[] = {  {&_swigt__p_Seiscomp__DataModel__Pick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__PrincipalAxes[] = {  {&_swigt__p_Seiscomp__DataModel__PrincipalAxes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__RealArray[] = {  {&_swigt__p_Seiscomp__DataModel__RealArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__RealPDF1D[] = {  {&_swigt__p_Seiscomp__DataModel__RealPDF1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__RealQuantity[] = {  {&_swigt__p_Seiscomp__DataModel__RealQuantity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__SensorLocation[] = {  {&_swigt__p_Seiscomp__DataModel__SensorLocation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__SourceTimeFunction[] = {  {&_swigt__p_Seiscomp__DataModel__SourceTimeFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__Tensor[] = {  {&_swigt__p_Seiscomp__DataModel__Tensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__TimeArray[] = {  {&_swigt__p_Seiscomp__DataModel__TimeArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__TimePDF1D[] = {  {&_swigt__p_Seiscomp__DataModel__TimePDF1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__TimeQuantity[] = {  {&_swigt__p_Seiscomp__DataModel__TimeQuantity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__TimeWindow[] = {  {&_swigt__p_Seiscomp__DataModel__TimeWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__DataModel__WaveformStreamID[] = {  {&_swigt__p_Seiscomp__DataModel__WaveformStreamID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__FileNotFoundError[] = {  {&_swigt__p_Seiscomp__FileNotFoundError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Geo__GeoCoordinate[] = {  {&_swigt__p_Seiscomp__Geo__GeoCoordinate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Geo__PolyRegions[] = {  {&_swigt__p_Seiscomp__Geo__PolyRegions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Geo__CityT_double_t[] = {  {&_swigt__p_Seiscomp__Math__Geo__CityT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Geo__CityT_float_t[] = {  {&_swigt__p_Seiscomp__Math__Geo__CityT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Geo__CoordT_double_t[] = {  {&_swigt__p_Seiscomp__Math__Geo__CoordT_double_t, 0, 0, 0},  {&_swigt__p_Seiscomp__IO__GFReceiver, _p_Seiscomp__IO__GFReceiverTo_p_Seiscomp__Math__Geo__CoordT_double_t, 0, 0},  {&_swigt__p_Seiscomp__IO__GFSource, _p_Seiscomp__IO__GFSourceTo_p_Seiscomp__Math__Geo__CoordT_double_t, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CityT_double_t, _p_Seiscomp__Math__Geo__CityT_double_tTo_p_Seiscomp__Math__Geo__CoordT_double_t, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__NamedCoordT_double_t, _p_Seiscomp__Math__Geo__NamedCoordT_double_tTo_p_Seiscomp__Math__Geo__CoordT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Geo__CoordT_float_t[] = {  {&_swigt__p_Seiscomp__Math__Geo__CoordT_float_t, 0, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CityT_float_t, _p_Seiscomp__Math__Geo__CityT_float_tTo_p_Seiscomp__Math__Geo__CoordT_float_t, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__NamedCoordT_float_t, _p_Seiscomp__Math__Geo__NamedCoordT_float_tTo_p_Seiscomp__Math__Geo__CoordT_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Geo__NamedCoordT_double_t[] = {  {&_swigt__p_Seiscomp__Math__Geo__NamedCoordT_double_t, 0, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CityT_double_t, _p_Seiscomp__Math__Geo__CityT_double_tTo_p_Seiscomp__Math__Geo__NamedCoordT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Geo__NamedCoordT_float_t[] = {  {&_swigt__p_Seiscomp__Math__Geo__NamedCoordT_float_t, 0, 0, 0},  {&_swigt__p_Seiscomp__Math__Geo__CityT_float_t, _p_Seiscomp__Math__Geo__CityT_float_tTo_p_Seiscomp__Math__Geo__NamedCoordT_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__MultipleModelsError[] = {  {&_swigt__p_Seiscomp__MultipleModelsError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__NoPhaseError[] = {  {&_swigt__p_Seiscomp__NoPhaseError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__NumericArrayT_char_t[] = {  {&_swigt__p_Seiscomp__NumericArrayT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__NumericArrayT_double_t[] = {  {&_swigt__p_Seiscomp__NumericArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__NumericArrayT_float_t[] = {  {&_swigt__p_Seiscomp__NumericArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__NumericArrayT_int_t[] = {  {&_swigt__p_Seiscomp__NumericArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Regions[] = {  {&_swigt__p_Seiscomp__Regions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Seismology__LocatorException[] = {  {&_swigt__p_Seiscomp__Seismology__LocatorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Seismology__LocatorInterface[] = {  {&_swigt__p_Seiscomp__Seismology__LocatorInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Seismology__PickNotFoundException[] = {  {&_swigt__p_Seiscomp__Seismology__PickNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Seismology__SensorLocationDelegate[] = {  {&_swigt__p_Seiscomp__Seismology__SensorLocationDelegate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Seismology__StationNotFoundException[] = {  {&_swigt__p_Seiscomp__Seismology__StationNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TravelTime[] = {  {&_swigt__p_Seiscomp__TravelTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TravelTimeList[] = {  {&_swigt__p_Seiscomp__TravelTimeList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TravelTimeTable[] = {  {&_swigt__p_Seiscomp__TravelTimeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TravelTimeTableInterface[] = {  {&_swigt__p_Seiscomp__TravelTimeTableInterface, 0, 0, 0},  {&_swigt__p_Seiscomp__TravelTimeTable, _p_Seiscomp__TravelTimeTableTo_p_Seiscomp__TravelTimeTableInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t[] = {  {&_swigt__p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_std__complexT_double_t_t[] = {  {&_swigt__p_Seiscomp__TypedArrayT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_std__complexT_float_t_t[] = {  {&_swigt__p_Seiscomp__TypedArrayT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__TypedArrayT_std__string_t[] = {  {&_swigt__p_Seiscomp__TypedArrayT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Storage[] = {  {&_swigt__p_Storage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TimePoint[] = {  {&_swigt__p_TimePoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Values[] = {  {&_swigt__p_Values, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Weeks[] = {  {&_swigt__p_Weeks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__any[] = {  {&_swigt__p_boost__any, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__bad_any_cast[] = {  {&_swigt__p_boost__bad_any_cast, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_file_iterator[] = {  {&_swigt__p_file_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_category[] = {  {&_swigt__p_iterator_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Seiscomp__TravelTime_t[] = {  {&_swigt__p_std__allocatorT_Seiscomp__TravelTime_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_t[] = {  {&_swigt__p_std__basic_iosT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Config__CaseSensitivityException[] = {{&_swigt__p_Seiscomp__Config__CaseSensitivityException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Config__Exception[] = {{&_swigt__p_Seiscomp__Config__Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Config__OptionNotFoundException[] = {{&_swigt__p_Seiscomp__Config__OptionNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Config__SyntaxException[] = {{&_swigt__p_Seiscomp__Config__SyntaxException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Config__TypeConversionException[] = {{&_swigt__p_Seiscomp__Config__TypeConversionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Core__ValueError[] = {{&_swigt__p_Seiscomp__Core__ValueError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Seiscomp__Math__Filtering__AlignmentError[] = {{&_swigt__p_Seiscomp__Math__Filtering__AlignmentError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Seiscomp__Config__CaseSensitivityException, _p_Seiscomp__Config__CaseSensitivityExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Config__Exception, _p_Seiscomp__Config__ExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Config__OptionNotFoundException, _p_Seiscomp__Config__OptionNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Config__SyntaxException, _p_Seiscomp__Config__SyntaxExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Config__TypeConversionException, _p_Seiscomp__Config__TypeConversionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__ClassNotFound, _p_Seiscomp__Core__ClassNotFoundTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__DuplicateClassname, _p_Seiscomp__Core__DuplicateClassnameTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__EndOfStreamException, _p_Seiscomp__Core__EndOfStreamExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__GeneralException, _p_Seiscomp__Core__GeneralExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__MemoryException, _p_Seiscomp__Core__MemoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__OperationInterrupted, _p_Seiscomp__Core__OperationInterruptedTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__OverflowException, _p_Seiscomp__Core__OverflowExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__StreamException, _p_Seiscomp__Core__StreamExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__TypeConversionException, _p_Seiscomp__Core__TypeConversionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__TypeException, _p_Seiscomp__Core__TypeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__UnderflowException, _p_Seiscomp__Core__UnderflowExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__ValueError, _p_Seiscomp__Core__ValueErrorTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Core__ValueException, _p_Seiscomp__Core__ValueExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__FileNotFoundError, _p_Seiscomp__FileNotFoundErrorTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__IO__LibmseedException, _p_Seiscomp__IO__LibmseedExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordStreamException, _p_Seiscomp__IO__RecordStreamExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__IO__RecordStreamTimeout, _p_Seiscomp__IO__RecordStreamTimeoutTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Math__Filtering__AlignmentError, _p_Seiscomp__Math__Filtering__AlignmentErrorTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__MultipleModelsError, _p_Seiscomp__MultipleModelsErrorTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__NoPhaseError, _p_Seiscomp__NoPhaseErrorTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__SeedlinkCommandException, _p_Seiscomp__RecordStream__SeedlinkCommandExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__RecordStream__SeedlinkException, _p_Seiscomp__RecordStream__SeedlinkExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Seismology__LocatorException, _p_Seiscomp__Seismology__LocatorExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Seismology__PickNotFoundException, _p_Seiscomp__Seismology__PickNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Seiscomp__Seismology__StationNotFoundException, _p_Seiscomp__Seismology__StationNotFoundExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Seiscomp__TravelTime_t[] = {  {&_swigt__p_std__listT_Seiscomp__TravelTime_t, 0, 0, 0},  {&_swigt__p_Seiscomp__TravelTimeList, _p_Seiscomp__TravelTimeListTo_p_std__listT_Seiscomp__TravelTime_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Seiscomp__Core__MetaObject_t[] = {  {&_swigt__p_std__shared_ptrT_Seiscomp__Core__MetaObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Seiscomp__Core__MetaProperty_t[] = {  {&_swigt__p_std__shared_ptrT_Seiscomp__Core__MetaProperty_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Seiscomp__Core__BaseObject_p_t[] = {  {&_swigt__p_std__vectorT_Seiscomp__Core__BaseObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_std__allocatorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_t_t[] = {  {&_swigt__p_std__vectorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_std__allocatorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Seiscomp__Math__SeismometerResponse__FAP_std__allocatorT_Seiscomp__Math__SeismometerResponse__FAP_t_t[] = {  {&_swigt__p_std__vectorT_Seiscomp__Math__SeismometerResponse__FAP_std__allocatorT_Seiscomp__Math__SeismometerResponse__FAP_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t[] = {  {&_swigt__p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Archive,
  _swigc__p_AttachmentList,
  _swigc__p_AttachmentType,
  _swigc__p_Attributes,
  _swigc__p_Backend,
  _swigc__p_DataArray,
  _swigc__p_Days,
  _swigc__p_Duration,
  _swigc__p_F1,
  _swigc__p_F2,
  _swigc__p_F3,
  _swigc__p_F4,
  _swigc__p_F5,
  _swigc__p_F6,
  _swigc__p_Flags,
  _swigc__p_Hours,
  _swigc__p_IDList,
  _swigc__p_ImplType,
  _swigc__p_IncludedFiles,
  _swigc__p_InplaceFilterType,
  _swigc__p_Iterator,
  _swigc__p_LogNodeCPtr,
  _swigc__p_LogNodePtr,
  _swigc__p_MSRecord_s,
  _swigc__p_MajorType,
  _swigc__p_MicroSeconds,
  _swigc__p_MilliSeconds,
  _swigc__p_MinorType,
  _swigc__p_Minutes,
  _swigc__p_Notifiers,
  _swigc__p_OID,
  _swigc__p_PackType,
  _swigc__p_ParameterMap,
  _swigc__p_PatchType,
  _swigc__p_PickList,
  _swigc__p_PopCallback,
  _swigc__p_Properties,
  _swigc__p_PropertyIndex,
  _swigc__p_PropertyValue,
  _swigc__p_PublicObjectMap,
  _swigc__p_PushCallback,
  _swigc__p_ReferenceType,
  _swigc__p_RootType,
  _swigc__p_Seconds,
  _swigc__p_Seiscomp__Array,
  _swigc__p_Seiscomp__BitSet,
  _swigc__p_Seiscomp__Config__CaseSensitivityException,
  _swigc__p_Seiscomp__Config__Config,
  _swigc__p_Seiscomp__Config__Exception,
  _swigc__p_Seiscomp__Config__OptionNotFoundException,
  _swigc__p_Seiscomp__Config__SyntaxException,
  _swigc__p_Seiscomp__Config__TypeConversionException,
  _swigc__p_Seiscomp__Core__BaseObject,
  _swigc__p_Seiscomp__Core__ClassNotFound,
  _swigc__p_Seiscomp__Core__DataMessage,
  _swigc__p_Seiscomp__Core__DuplicateClassname,
  _swigc__p_Seiscomp__Core__EndOfStreamException,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EDataUsedWaveType_Seiscomp__DataModel__EDataUsedWaveTypeQuantity_Seiscomp__DataModel__EDataUsedWaveTypeNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationMode_Seiscomp__DataModel__EEvaluationModeQuantity_Seiscomp__DataModel__EEvaluationModeNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEvaluationStatus_Seiscomp__DataModel__EEvaluationStatusQuantity_Seiscomp__DataModel__EEvaluationStatusNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventDescriptionType_Seiscomp__DataModel__EEventDescriptionTypeQuantity_Seiscomp__DataModel__EEventDescriptionTypeNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventTypeCertainty_Seiscomp__DataModel__EEventTypeCertaintyQuantity_Seiscomp__DataModel__EEventTypeCertaintyNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EEventType_Seiscomp__DataModel__EEventTypeQuantity_Seiscomp__DataModel__EEventTypeNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EInventoryError_Seiscomp__DataModel__EInventoryErrorQuantity_Seiscomp__DataModel__EInventoryErrorNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorMethod_Seiscomp__DataModel__EMomentTensorMethodQuantity_Seiscomp__DataModel__EMomentTensorMethodNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EMomentTensorStatus_Seiscomp__DataModel__EMomentTensorStatusQuantity_Seiscomp__DataModel__EMomentTensorStatusNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOperation_Seiscomp__DataModel__EOperationQuantity_Seiscomp__DataModel__EOperationNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginDepthType_Seiscomp__DataModel__EOriginDepthTypeQuantity_Seiscomp__DataModel__EOriginDepthTypeNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginType_Seiscomp__DataModel__EOriginTypeQuantity_Seiscomp__DataModel__EOriginTypeNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EOriginUncertaintyDescription_Seiscomp__DataModel__EOriginUncertaintyDescriptionQuantity_Seiscomp__DataModel__EOriginUncertaintyDescriptionNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickOnset_Seiscomp__DataModel__EPickOnsetQuantity_Seiscomp__DataModel__EPickOnsetNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EPickPolarity_Seiscomp__DataModel__EPickPolarityQuantity_Seiscomp__DataModel__EPickPolarityNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__ESourceTimeFunctionType_Seiscomp__DataModel__ESourceTimeFunctionTypeQuantity_Seiscomp__DataModel__ESourceTimeFunctionTypeNames_t,
  _swigc__p_Seiscomp__Core__EnumT_Seiscomp__DataModel__EStationGroupType_Seiscomp__DataModel__EStationGroupTypeQuantity_Seiscomp__DataModel__EStationGroupTypeNames_t,
  _swigc__p_Seiscomp__Core__GeneralException,
  _swigc__p_Seiscomp__Core__GenericMessageT_Seiscomp__Core__BaseObject_t,
  _swigc__p_Seiscomp__Core__GenericMessageT_Seiscomp__DataModel__Notifier_t,
  _swigc__p_Seiscomp__Core__Generic__ArchiveT_Seiscomp__Core__BaseObject_t,
  _swigc__p_Seiscomp__Core__Generic__ClassFactoryInterfaceT_Seiscomp__Core__BaseObject_t,
  _swigc__p_Seiscomp__Core__GreensFunction,
  _swigc__p_Seiscomp__Core__InterruptibleObject,
  _swigc__p_Seiscomp__Core__MemoryException,
  _swigc__p_Seiscomp__Core__Message,
  _swigc__p_Seiscomp__Core__OperationInterrupted,
  _swigc__p_Seiscomp__Core__OptionalT_double_t,
  _swigc__p_Seiscomp__Core__OverflowException,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Array_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__BitSet_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Config_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__BaseObject_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__DataMessage_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__GreensFunction_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__InterruptibleObject_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Core__Message_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Access_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AmplitudeReference_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Amplitude_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkLog_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestLine_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequestSummary_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkRequest_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkStatusLine_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArclinkUser_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Arrival_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialEventParametersMessage_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ArtificialOriginMessage_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxDevice_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxSource_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__AuxStream_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Axis_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Blob_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Comment_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ComplexArray_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CompositeTime_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfidenceEllipsoid_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigModule_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigStation_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ConfigSyncMessage_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__CreationInfo_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAttributeExtent_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataAvailability_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataExtent_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataSegment_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataUsed_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseArchive_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseQuery_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DatabaseReader_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__DataloggerCalibration_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Datalogger_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Decimation_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventDescription_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__EventParameters_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Event_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanismReference_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__FocalMechanism_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__IntegerQuantity_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__InventorySyncMessage_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Inventory_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__JournalEntry_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Journaling_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Magnitude_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorComponentContribution_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorPhaseSetting_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensorStationContribution_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__MomentTensor_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Network_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlane_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NodalPlanes_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__NotifierMessage_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Notifier_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Object_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Observer_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginQuality_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginReference_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__OriginUncertainty_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Origin_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Outage_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ParameterSet_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Parameter_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Phase_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PickReference_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Pick_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PrincipalAxes_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__PublicObject_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QCLog_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__QualityControl_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Reading_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealArray_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealPDF1D_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RealQuantity_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFAP_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseFIR_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponseIIR_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePAZ_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__ResponsePolynomial_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteArclink_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__RouteSeedlink_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Route_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Routing_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorCalibration_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SensorLocation_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Sensor_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Setup_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__SourceTimeFunction_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationGroup_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitudeContribution_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationMagnitude_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__StationReference_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Station_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Stream_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Tensor_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeArray_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimePDF1D_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeQuantity_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__TimeWindow_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__Visitor_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformQuality_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__DataModel__WaveformStreamID_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__GenericRecord_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__Category_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Geo__GeoFeature_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Cropper_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__DatabaseInterface_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Exporter_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__GFArchive_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__Importer_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__MSeedRecord_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordFilterInterface_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__IO__RecordInput_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Math__Restitution__FFT__TransferFunction_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_char_t_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_double_t_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_float_t_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__NumericArrayT_int_t_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__Arclink__ArclinkConnection_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__CombinedConnection_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__File_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream__SLConnection_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__RecordStream_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Record_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__LocatorInterface_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__Seismology__SensorLocationDelegate_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TravelTimeTableInterface_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_double_t_t_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__complexT_float_t_t_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_const_t,
  _swigc__p_Seiscomp__Core__SmartPointerT_Seiscomp__TypedArrayT_std__string_t_t,
  _swigc__p_Seiscomp__Core__StreamException,
  _swigc__p_Seiscomp__Core__Time,
  _swigc__p_Seiscomp__Core__TypeConversionException,
  _swigc__p_Seiscomp__Core__TypeException,
  _swigc__p_Seiscomp__Core__UnderflowException,
  _swigc__p_Seiscomp__Core__ValueError,
  _swigc__p_Seiscomp__Core__ValueException,
  _swigc__p_Seiscomp__DataModel__Access,
  _swigc__p_Seiscomp__DataModel__Amplitude,
  _swigc__p_Seiscomp__DataModel__AmplitudeReference,
  _swigc__p_Seiscomp__DataModel__ArclinkLog,
  _swigc__p_Seiscomp__DataModel__ArclinkRequest,
  _swigc__p_Seiscomp__DataModel__ArclinkRequestLine,
  _swigc__p_Seiscomp__DataModel__ArclinkRequestSummary,
  _swigc__p_Seiscomp__DataModel__ArclinkStatusLine,
  _swigc__p_Seiscomp__DataModel__ArclinkUser,
  _swigc__p_Seiscomp__DataModel__Arrival,
  _swigc__p_Seiscomp__DataModel__ArtificialEventParametersMessage,
  _swigc__p_Seiscomp__DataModel__ArtificialOriginMessage,
  _swigc__p_Seiscomp__DataModel__AuxDevice,
  _swigc__p_Seiscomp__DataModel__AuxSource,
  _swigc__p_Seiscomp__DataModel__AuxStream,
  _swigc__p_Seiscomp__DataModel__Axis,
  _swigc__p_Seiscomp__DataModel__Blob,
  _swigc__p_Seiscomp__DataModel__Comment,
  _swigc__p_Seiscomp__DataModel__ComplexArray,
  _swigc__p_Seiscomp__DataModel__CompositeTime,
  _swigc__p_Seiscomp__DataModel__ConfidenceEllipsoid,
  _swigc__p_Seiscomp__DataModel__Config,
  _swigc__p_Seiscomp__DataModel__ConfigModule,
  _swigc__p_Seiscomp__DataModel__ConfigStation,
  _swigc__p_Seiscomp__DataModel__ConfigSyncMessage,
  _swigc__p_Seiscomp__DataModel__CreationInfo,
  _swigc__p_Seiscomp__DataModel__DataAttributeExtent,
  _swigc__p_Seiscomp__DataModel__DataAvailability,
  _swigc__p_Seiscomp__DataModel__DataExtent,
  _swigc__p_Seiscomp__DataModel__DataSegment,
  _swigc__p_Seiscomp__DataModel__DataUsed,
  _swigc__p_Seiscomp__DataModel__DatabaseArchive,
  _swigc__p_Seiscomp__DataModel__DatabaseIterator,
  _swigc__p_Seiscomp__DataModel__DatabaseQuery,
  _swigc__p_Seiscomp__DataModel__DatabaseReader,
  _swigc__p_Seiscomp__DataModel__Datalogger,
  _swigc__p_Seiscomp__DataModel__DataloggerCalibration,
  _swigc__p_Seiscomp__DataModel__Decimation,
  _swigc__p_Seiscomp__DataModel__Event,
  _swigc__p_Seiscomp__DataModel__EventDescription,
  _swigc__p_Seiscomp__DataModel__EventParameters,
  _swigc__p_Seiscomp__DataModel__FocalMechanism,
  _swigc__p_Seiscomp__DataModel__FocalMechanismReference,
  _swigc__p_Seiscomp__DataModel__IntegerQuantity,
  _swigc__p_Seiscomp__DataModel__Inventory,
  _swigc__p_Seiscomp__DataModel__InventorySyncMessage,
  _swigc__p_Seiscomp__DataModel__JournalEntry,
  _swigc__p_Seiscomp__DataModel__Journaling,
  _swigc__p_Seiscomp__DataModel__Magnitude,
  _swigc__p_Seiscomp__DataModel__MomentTensor,
  _swigc__p_Seiscomp__DataModel__MomentTensorComponentContribution,
  _swigc__p_Seiscomp__DataModel__MomentTensorPhaseSetting,
  _swigc__p_Seiscomp__DataModel__MomentTensorStationContribution,
  _swigc__p_Seiscomp__DataModel__Network,
  _swigc__p_Seiscomp__DataModel__NodalPlane,
  _swigc__p_Seiscomp__DataModel__NodalPlanes,
  _swigc__p_Seiscomp__DataModel__Notifier,
  _swigc__p_Seiscomp__DataModel__NotifierMessage,
  _swigc__p_Seiscomp__DataModel__Object,
  _swigc__p_Seiscomp__DataModel__Observer,
  _swigc__p_Seiscomp__DataModel__Origin,
  _swigc__p_Seiscomp__DataModel__OriginQuality,
  _swigc__p_Seiscomp__DataModel__OriginReference,
  _swigc__p_Seiscomp__DataModel__OriginUncertainty,
  _swigc__p_Seiscomp__DataModel__Outage,
  _swigc__p_Seiscomp__DataModel__Parameter,
  _swigc__p_Seiscomp__DataModel__ParameterSet,
  _swigc__p_Seiscomp__DataModel__Phase,
  _swigc__p_Seiscomp__DataModel__Pick,
  _swigc__p_Seiscomp__DataModel__PickReference,
  _swigc__p_Seiscomp__DataModel__PrincipalAxes,
  _swigc__p_Seiscomp__DataModel__PublicObject,
  _swigc__p_Seiscomp__DataModel__PublicObjectCache,
  _swigc__p_Seiscomp__DataModel__PublicObjectRingBuffer,
  _swigc__p_Seiscomp__DataModel__PublicObjectTimeSpanBuffer,
  _swigc__p_Seiscomp__DataModel__QCLog,
  _swigc__p_Seiscomp__DataModel__QualityControl,
  _swigc__p_Seiscomp__DataModel__Reading,
  _swigc__p_Seiscomp__DataModel__RealArray,
  _swigc__p_Seiscomp__DataModel__RealPDF1D,
  _swigc__p_Seiscomp__DataModel__RealQuantity,
  _swigc__p_Seiscomp__DataModel__ResponseFAP,
  _swigc__p_Seiscomp__DataModel__ResponseFIR,
  _swigc__p_Seiscomp__DataModel__ResponseIIR,
  _swigc__p_Seiscomp__DataModel__ResponsePAZ,
  _swigc__p_Seiscomp__DataModel__ResponsePolynomial,
  _swigc__p_Seiscomp__DataModel__Route,
  _swigc__p_Seiscomp__DataModel__RouteArclink,
  _swigc__p_Seiscomp__DataModel__RouteSeedlink,
  _swigc__p_Seiscomp__DataModel__Routing,
  _swigc__p_Seiscomp__DataModel__Sensor,
  _swigc__p_Seiscomp__DataModel__SensorCalibration,
  _swigc__p_Seiscomp__DataModel__SensorLocation,
  _swigc__p_Seiscomp__DataModel__Setup,
  _swigc__p_Seiscomp__DataModel__SourceTimeFunction,
  _swigc__p_Seiscomp__DataModel__Station,
  _swigc__p_Seiscomp__DataModel__StationGroup,
  _swigc__p_Seiscomp__DataModel__StationMagnitude,
  _swigc__p_Seiscomp__DataModel__StationMagnitudeContribution,
  _swigc__p_Seiscomp__DataModel__StationReference,
  _swigc__p_Seiscomp__DataModel__Stream,
  _swigc__p_Seiscomp__DataModel__Tensor,
  _swigc__p_Seiscomp__DataModel__TimeArray,
  _swigc__p_Seiscomp__DataModel__TimePDF1D,
  _swigc__p_Seiscomp__DataModel__TimeQuantity,
  _swigc__p_Seiscomp__DataModel__TimeWindow,
  _swigc__p_Seiscomp__DataModel__WaveformQuality,
  _swigc__p_Seiscomp__DataModel__WaveformStreamID,
  _swigc__p_Seiscomp__FileNotFoundError,
  _swigc__p_Seiscomp__GenericRecord,
  _swigc__p_Seiscomp__Geo__GeoCoordinate,
  _swigc__p_Seiscomp__Geo__GeoFeature,
  _swigc__p_Seiscomp__Geo__GeoFeatureSet,
  _swigc__p_Seiscomp__Geo__PolyRegions,
  _swigc__p_Seiscomp__IO__BinaryArchive,
  _swigc__p_Seiscomp__IO__Cropper,
  _swigc__p_Seiscomp__IO__DatabaseInterface,
  _swigc__p_Seiscomp__IO__Exporter,
  _swigc__p_Seiscomp__IO__GFArchive,
  _swigc__p_Seiscomp__IO__GFReceiver,
  _swigc__p_Seiscomp__IO__GFSource,
  _swigc__p_Seiscomp__IO__Importer,
  _swigc__p_Seiscomp__IO__LibmseedException,
  _swigc__p_Seiscomp__IO__MSeedEncoder,
  _swigc__p_Seiscomp__IO__MSeedRecord,
  _swigc__p_Seiscomp__IO__PipeFilter,
  _swigc__p_Seiscomp__IO__RecordDemuxFilter,
  _swigc__p_Seiscomp__IO__RecordFilterInterface,
  _swigc__p_Seiscomp__IO__RecordIIRFilterT_double_t,
  _swigc__p_Seiscomp__IO__RecordIIRFilterT_float_t,
  _swigc__p_Seiscomp__IO__RecordInput,
  _swigc__p_Seiscomp__IO__RecordResamplerBase,
  _swigc__p_Seiscomp__IO__RecordResamplerT_double_t,
  _swigc__p_Seiscomp__IO__RecordResamplerT_float_t,
  _swigc__p_Seiscomp__IO__RecordResamplerT_int_t,
  _swigc__p_Seiscomp__IO__RecordStream,
  _swigc__p_Seiscomp__IO__RecordStreamException,
  _swigc__p_Seiscomp__IO__RecordStreamTimeout,
  _swigc__p_Seiscomp__IO__VBinaryArchive,
  _swigc__p_Seiscomp__IO__XMLArchive,
  _swigc__p_Seiscomp__Math__Filtering__AlignmentError,
  _swigc__p_Seiscomp__Math__Filtering__AverageT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__AverageT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__ChainFilterT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__ChainFilterT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__BiquadCascadeT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandpassT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthBandstopT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighLowpassT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthHighpassT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__ButterworthLowpassT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__FilterT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__FilterT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__GenericSeismometerT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_LP_FilterT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__WWSSN_SP_FilterT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__IIR__WoodAndersonFilterT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__InPlaceFilterT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__InPlaceFilterT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__InitialTaperT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__InitialTaperT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__RunningMeanHighPassT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__RunningMeanT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__RunningMeanT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__STALTA2T_double_t,
  _swigc__p_Seiscomp__Math__Filtering__STALTA2T_float_t,
  _swigc__p_Seiscomp__Math__Filtering__STALTAT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__STALTAT_float_t,
  _swigc__p_Seiscomp__Math__Filtering__STALTA_ClassicT_double_t,
  _swigc__p_Seiscomp__Math__Filtering__STALTA_ClassicT_float_t,
  _swigc__p_Seiscomp__Math__Geo__CityT_double_t,
  _swigc__p_Seiscomp__Math__Geo__CityT_float_t,
  _swigc__p_Seiscomp__Math__Geo__CoordT_double_t,
  _swigc__p_Seiscomp__Math__Geo__CoordT_float_t,
  _swigc__p_Seiscomp__Math__Geo__NamedCoordT_double_t,
  _swigc__p_Seiscomp__Math__Geo__NamedCoordT_float_t,
  _swigc__p_Seiscomp__Math__Restitution__FFT__PolesAndZeros,
  _swigc__p_Seiscomp__Math__Restitution__FFT__ResponseList,
  _swigc__p_Seiscomp__Math__Restitution__FFT__TransferFunction,
  _swigc__p_Seiscomp__MultipleModelsError,
  _swigc__p_Seiscomp__NoPhaseError,
  _swigc__p_Seiscomp__NumericArrayT_char_t,
  _swigc__p_Seiscomp__NumericArrayT_double_t,
  _swigc__p_Seiscomp__NumericArrayT_float_t,
  _swigc__p_Seiscomp__NumericArrayT_int_t,
  _swigc__p_Seiscomp__Record,
  _swigc__p_Seiscomp__RecordStream__Arclink__ArclinkConnection,
  _swigc__p_Seiscomp__RecordStream__CombinedConnection,
  _swigc__p_Seiscomp__RecordStream__File,
  _swigc__p_Seiscomp__RecordStream__SLConnection,
  _swigc__p_Seiscomp__RecordStream__SeedlinkCommandException,
  _swigc__p_Seiscomp__RecordStream__SeedlinkException,
  _swigc__p_Seiscomp__Regions,
  _swigc__p_Seiscomp__Seismology__LocatorException,
  _swigc__p_Seiscomp__Seismology__LocatorInterface,
  _swigc__p_Seiscomp__Seismology__PickNotFoundException,
  _swigc__p_Seiscomp__Seismology__SensorLocationDelegate,
  _swigc__p_Seiscomp__Seismology__StationNotFoundException,
  _swigc__p_Seiscomp__TravelTime,
  _swigc__p_Seiscomp__TravelTimeList,
  _swigc__p_Seiscomp__TravelTimeTable,
  _swigc__p_Seiscomp__TravelTimeTableInterface,
  _swigc__p_Seiscomp__TypedArrayT_Seiscomp__Core__Time_t,
  _swigc__p_Seiscomp__TypedArrayT_char_t,
  _swigc__p_Seiscomp__TypedArrayT_double_t,
  _swigc__p_Seiscomp__TypedArrayT_float_t,
  _swigc__p_Seiscomp__TypedArrayT_int_t,
  _swigc__p_Seiscomp__TypedArrayT_std__complexT_double_t_t,
  _swigc__p_Seiscomp__TypedArrayT_std__complexT_float_t_t,
  _swigc__p_Seiscomp__TypedArrayT_std__string_t,
  _swigc__p_Storage,
  _swigc__p_TimePoint,
  _swigc__p_Type,
  _swigc__p_ValueType,
  _swigc__p_Values,
  _swigc__p_Weeks,
  _swigc__p_allocator_type,
  _swigc__p_boost__any,
  _swigc__p_boost__bad_any_cast,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_const_iterator,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_file_iterator,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_iterator,
  _swigc__p_iterator_category,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_PyObject,
  _swigc__p_pos_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__allocatorT_Seiscomp__TravelTime_t,
  _swigc__p_std__basic_iosT_char_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__exception,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__listT_Seiscomp__TravelTime_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__shared_ptrT_Seiscomp__Core__MetaObject_t,
  _swigc__p_std__shared_ptrT_Seiscomp__Core__MetaProperty_t,
  _swigc__p_std__vectorT_Seiscomp__Core__BaseObject_p_t,
  _swigc__p_std__vectorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_std__allocatorT_Seiscomp__Math__Filtering__IIR__BiquadCoefficients_t_t,
  _swigc__p_std__vectorT_Seiscomp__Math__SeismometerResponse__FAP_std__allocatorT_Seiscomp__Math__SeismometerResponse__FAP_t_t,
  _swigc__p_std__vectorT_Seiscomp__Seismology__LocatorInterface__PickItem_std__allocatorT_Seiscomp__Seismology__LocatorInterface__PickItem_t_t,
  _swigc__p_std__vectorT_std__complexT_double_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  SWIG_Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SWIG_Python_SetConstant(d, "SC3_LOCATOR_INTERFACE_VERSION",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "LocatorInterface_F_NONE",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::F_NONE)));
  SWIG_Python_SetConstant(d, "LocatorInterface_F_BACKAZIMUTH",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::F_BACKAZIMUTH)));
  SWIG_Python_SetConstant(d, "LocatorInterface_F_SLOWNESS",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::F_SLOWNESS)));
  SWIG_Python_SetConstant(d, "LocatorInterface_F_TIME",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::F_TIME)));
  SWIG_Python_SetConstant(d, "LocatorInterface_F_ALL",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::F_ALL)));
  SWIG_Python_SetConstant(d, "LocatorInterface_EFlagsQuantity",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::EFlagsQuantity)));
  SWIG_Python_SetConstant(d, "LocatorInterface_NoCapability",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::NoCapability)));
  SWIG_Python_SetConstant(d, "LocatorInterface_InitialLocation",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::InitialLocation)));
  SWIG_Python_SetConstant(d, "LocatorInterface_FixedDepth",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::FixedDepth)));
  SWIG_Python_SetConstant(d, "LocatorInterface_DistanceCutOff",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::DistanceCutOff)));
  SWIG_Python_SetConstant(d, "LocatorInterface_IgnoreInitialLocation",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::IgnoreInitialLocation)));
  SWIG_Python_SetConstant(d, "LocatorInterface_CapQuantity",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::CapQuantity)));
  SWIG_Python_SetConstant(d, "LocatorInterface_Log",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::Log)));
  SWIG_Python_SetConstant(d, "LocatorInterface_Warning",SWIG_From_int(static_cast< int >(Seiscomp::Seismology::LocatorInterface::Warning)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

